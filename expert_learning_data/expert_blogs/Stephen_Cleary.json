{
  "name": "Stephen Cleary",
  "url": "https://blog.stephencleary.com/",
  "type": "blog",
  "topics": [
    "async/await",
    "concurrency",
    "tasks"
  ],
  "sample_posts": [
    {
      "title": "C# Advent: No one loves the .NET Core name anymore",
      "link": "https://blog.stephencleary.com/2024/12/netcore.html",
      "pubDate": "Tue, 03 Dec 2024 00:00:00 +0000",
      "description": "<p>This post is part of <a href=\"https://csadvent.christmas/\">C# Advent</a> organized by <a href=\"https://x.com/mgroves\">@mgroves</a>.</p>\n\n<h2 id=\"a-brief-history-of-net-core\">A Brief History of “.NET Core”</h2>\n\n<blockquote class=\"blockquote\">\n  <p>‘Twas a holiday season, so bright and so clear,<br />\nWhen .NET Core was a name we held dear.<br />\nOnce, it meant Silverlight, in the browser’s embrace,<br />\nA vision of apps that could run with great grace.<br /></p>\n\n  <p>But as time moved on, so too did the trend,<br />\nSilverlight’s reign began to descend.<br />\nThen WinRT arrived, all shiny and new,<br />\nWith Windows Store apps, the promise it grew.<br /></p>\n\n  <p>Next came UWP, a universal dream,<br />\nFor apps that could run on each Windows stream.<br />\nYet, despite all the progress, something was amiss,<br />\nThe tech world was changing, and something we’d miss.<br /></p>\n\n  <p>Then .NET Core rose, its name now aglow,<br />\nA shift to the future, a new path to go.<br />\nIt wasn’t just Windows, it reached far and wide,<br />\nCross-platform magic, no longer confined.<br /></p>\n\n  <p>Gone were the days of Silverlight’s reign,<br />\nNo more WinRT to tether and chain.<br />\nUWP too, was a chapter now closed,<br />\nBut the legacy of .NET still brightly glowed.<br /></p>\n\n  <p>Now .NET Core means something profound,<br />\nA modern framework that’s world-renowned.<br />\nIt’s cloud, it’s mobile, it’s web all combined,<br />\nA platform so nimble, for all to find.<br /></p>\n\n  <p>So here’s to the future, to the journey ahead,<br />\nWith .NET Core, new dreams are now spread.<br />\nWe celebrate Christmas, not just for the cheer,<br />\nBut for how far .NET has come through the years!<br /></p>\n\n  <footer class=\"blockquote-footer text-right\"><cite>ChatGPT, of course. I couldn't write this.</cite></footer>\n</blockquote>\n\n<p>I thought today would be a fun time to write up something I’ve been meaning to write for years: the history of “.NET Core” terminology.</p>\n\n<p>More specifically, this is how <em>I’ve</em> seen the term “.NET Core” used in the past. It’s not guaranteed to be correct, and <em>certainly</em> not guaranteed to be complete! Am I missing anything? Feel free to shout out in the comments!</p>\n\n<h3 id=\"net-compact-framework\">.NET Compact Framework</h3>\n\n<p>I believe I first heard the term “.NET Core” referring to the .NET Compact Framework. This was way back when .NET Framework 3.5 was the new hotness. Actually, that was “.NET Framework 3.5 SP1” - as in “Service Pack 1”. Yes, .NET used to have <em>service packs</em>.</p>\n\n<p>I’m not sure if “.NET Core” was the proper term to refer to NetCF or not. AFAIK, it was an unofficial term that was applied because .NET Compact Framework contained a small subset of the (massive) .NET Framework, intended to run on embedded devices. Hence, it was a “core” (minimal) framework.</p>\n\n<h3 id=\"silverlight-winrt-windows-phone-windows-store-and-universal-windows-platform\">Silverlight, WinRT, Windows Phone, Windows Store, and Universal Windows Platform</h3>\n\n<p>Perhaps I should have put a trigger warning on this article… Sorry for anyone who winced in pain just reading the title for this section…</p>\n\n<p>All of these technologies had something or other to do with “.NET Core” as a term. They were all minimal sub-frameworks of the full .NET Framework. And at least some of them had similar terminology for their runtimes (e.g., Silverlight ran on “Core CLR”). My brain has mercifully purged the sordid details. I only vaguely remember Windows Phone being different from Windows Phone Apps, and Silverlight getting even more stripped-down to run on Windows Phone.</p>\n\n<p>This was not a fun time to be a library developer.</p>\n\n<h3 id=\"netcore-as-a-target-framework-moniker\">netcore as a Target Framework Moniker</h3>\n\n<p>This is what I actually want to focus on. <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/frameworks?WT.mc_id=DT-MVP-5000058\">Target framework monikers (TFMs)</a> are very important to library developers.</p>\n\n<p>The term “.NET Core” officially entered the NuGet space as a TFM, but it <em>wasn’t</em> for what we call .NET Core today. It was for Windows Store apps (and WinRT apps), and briefly extending into UWP apps.</p>\n\n<p>Yes, Windows Store projects way back in Windows 8.0 (as well as WinRT) used a TFM identifier of <code>netcore45</code>. Windows 8.1 used <code>netcore451</code>. When Windows Store apps were replaced by Universal Windows Platform (UWP) apps, they briefly used <code>netcore50</code> before changing to <code>uap10.0</code>.</p>\n\n<p>So, when the (modern) .NET Core team needed a TFM, they found <code>netcoreNN</code> wasn’t available. I assume this is why they went with <code>netcoreappNN</code> instead (after a brief foray into <code>dnxcore50</code> and <code>aspnetcore50</code>). So .NET Core TFMs for older versions (1.0-3.1) are <code>netcoreapp1.0</code> - <code>netcoreapp3.1</code>. It was just an unfortunate accident of history.</p>\n\n<h2 id=\"no-more-net-core\">No More .NET Core</h2>\n\n<p>The .NET team has dropped “Core”. There is now one .NET moving forward - a great relief to library authors!</p>\n\n<p>Since v5, the TFMs have even changed: modern .NET uses <code>net9.0</code> and similar, dropping the “core” moniker even from the TFM.</p>\n\n<p>I still refer to .NET as “.NET Core” from time to time, especially in conversations that have to do with both .NET Framework and the new .NET. E.g., I’ll refer to a “.NET Core migration” rather than just “.NET migration” for a project currently targeting .NET Framework. The proper term, though, is no longer “.NET Core” but just “.NET”.</p>\n\n<p>“.NET Core” is gone. And good riddance!</p>\n\n<p>May the future be One .NET, and I wish you all joy in this Christmas season!</p>\n"
    },
    {
      "title": "Cancellation, Part 6: Linking",
      "link": "https://blog.stephencleary.com/2024/10/cancellation-6-linking.html",
      "pubDate": "Thu, 10 Oct 2024 00:00:00 +0000",
      "description": "<p>So far we’ve covered how <a href=\"/2022/02/cancellation-1-overview.html\">cancellation is requested by one piece of code, and responded to by another piece of code</a>. The requesting code has a <a href=\"/2022/03/cancellation-2-requesting-cancellation.html\">standard way of requesting cancellation</a>, as well as a standard way of <a href=\"/2022/03/cancellation-3-detecting-cancellation.html\">detecting whether the code was canceled or not</a>. Meanwhile, the responding code can observe cancellation either by <a href=\"/2022/03/cancellation-4-polling.html\">polling</a> or (more commonly) by <a href=\"/2024/08/cancellation-5-registration.html\">registering a cancellation callback</a>. So far, so good; and we’re ready for the next step!</p>\n\n<p>In this article, we’ll look at how <em>linked</em> cancellation tokens work.</p>\n\n<h2 id=\"linked-cancellation-tokens\">Linked Cancellation Tokens</h2>\n\n<p>Linked cancellation tokens allow your code to create a <code>CancellationTokenSource</code> that cancels whenever any other cancellation tokens are canceled, in addition to a manual cancellation request.</p>\n\n<p>The following code creates a linked cancellation token source:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">.</span><span class=\"n\">CreateLinkedTokenSource</span><span class=\"p\">(</span><span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n    <span class=\"kt\">var</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"n\">DoSomethingElseAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">...</span> <span class=\"c1\">// Do something while operation is in progress, possibly calling `cts.Cancel()`</span>\n    <span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The <code>DoSomethingAsync</code> method above takes a <code>cancellationToken</code> - I’ll call this the “outer” cancellation token. It then creates a CTS that is linked to that outer token. Then, when it calls <code>DoSomethingElseAsync</code>, it passes the token from that linked CTS, which I’ll call the “inner” cancellation token.</p>\n\n<p>If the outer cancellation token (<code>cancellationToken</code>) is ever canceled, then the linked CTS (<code>cts</code>) and its inner cancellation token (<code>cts.Token</code>) are also canceled. Furthermore, the <code>DoSomethingAsync</code> method has the option of explicitly cancelling the linked CTS - in this case, only the inner cancellation token would be canceled, leaving the outer cancellation token unchanged.</p>\n\n<p>Sharp observers may have noticed that the same thing can be done using registrations:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">();</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">registration</span> <span class=\"p\">=</span> <span class=\"n\">cancellationToken</span><span class=\"p\">.</span><span class=\"n\">Register</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Cancel</span><span class=\"p\">);</span>\n    <span class=\"kt\">var</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"n\">DoSomethingElseAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">...</span> <span class=\"c1\">// Do something while operation is in progress, possibly calling `cts.Cancel()`</span>\n    <span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Indeed, logically this is pretty much what is happening: you can think of a linked cancellation token source as a perfectly ordinary cancellation token source along with a registration that cancels it when some other token is canceled.</p>\n\n<h3 id=\"multiple-links\">Multiple Links</h3>\n\n<p>The inner cancellation token above is canceled when the outer token is canceled <em>or</em> when its source is explicitly canceled. Similarly, we can pass any number of cancellation tokens into <code>CreateLinkedTokenSource</code>, and the cancellation token source it returns will be canceled when <em>any</em> of the outer tokens are canceled.</p>\n\n<h2 id=\"use-cases\">Use Cases</h2>\n\n<p>The outer token and the inner cancellation source can really represent anything; linked cancellation tokens are useful whenever you need code to be canceled if “A or B”.</p>\n\n<p>But I suspect the most common use case is when the outer token represents an end-user cancellation request, and the inner token represents a timeout. E.g., this can happen when the business logic includes a timeout-and-retry kind of code pattern, while also allowing the end-user to cancel all the retries with a single button click.</p>\n\n<p>One natural place where this kind of code is used is Polly. Polly will allow you to pass in a cancellation token - an outer token that is under your control. Then it passes a <em>potentially different</em> cancellation token to your execution delegate; this inner token is controlled by Polly. Polly’s pipelines (e.g., timeout) may trigger the inner token to cancel your delegate. Naturally, if your code cancels the outer token passed to Polly, that would flow to the inner token as well. I.e., they are linked.</p>\n\n<p>Taking a simplified code example right from the Polly homepage:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">ExecuteWithTimeoutAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ResiliencePipeline</span> <span class=\"n\">pipeline</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">ResiliencePipelineBuilder</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"n\">AddTimeout</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">))</span>\n        <span class=\"p\">.</span><span class=\"n\">Build</span><span class=\"p\">();</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">pipeline</span><span class=\"p\">.</span><span class=\"n\">ExecuteAsync</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"n\">token</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"cm\">/* Your custom logic goes here */</span>\n    <span class=\"p\">},</span> <span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The <code>ExecuteWithRetryAndTimeoutAsync</code> takes an outer token <code>cancellationToken</code> and passes it to Polly. Polly then creates a linked inner token (which includes pipeline behaviors such as the timeout), and passes the inner token (<code>token</code>) to your delegate.</p>\n\n<div class=\"alert alert-danger\">\n  <p><i class=\"fa fa-exclamation-triangle fa-2x pull-left\"></i></p>\n\n  <p>Delegates you pass to Polly should observe the token they get from Polly, not any other tokens!</p>\n</div>\n\n<p>This is particularly a pitfall when you’re adding Polly pipelines to existing code, e.g., when adding timeouts to this code:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">ExecuteAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">!=</span> <span class=\"m\">10</span><span class=\"p\">;</span> <span class=\"p\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">Delay</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">),</span> <span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>A common mistake is to forget to update the token usage:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// BAD CODE!!! DO NOT USE!!!</span>\n<span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">ExecuteWithTimeoutAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ResiliencePipeline</span> <span class=\"n\">pipeline</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">ResiliencePipelineBuilder</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"n\">AddTimeout</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">))</span>\n        <span class=\"p\">.</span><span class=\"n\">Build</span><span class=\"p\">();</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">pipeline</span><span class=\"p\">.</span><span class=\"n\">ExecuteAsync</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"n\">token</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// BAD CODE!!! DO NOT USE!!!</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">!=</span> <span class=\"m\">10</span><span class=\"p\">;</span> <span class=\"p\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">Delay</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">),</span> <span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span> <span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>In this case, the delegate is still observing <code>cancellationToken</code>, when it should be observing <code>token</code> instead:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">ExecuteWithTimeoutAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ResiliencePipeline</span> <span class=\"n\">pipeline</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">ResiliencePipelineBuilder</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"n\">AddTimeout</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">))</span>\n        <span class=\"p\">.</span><span class=\"n\">Build</span><span class=\"p\">();</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">pipeline</span><span class=\"p\">.</span><span class=\"n\">ExecuteAsync</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"n\">token</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">!=</span> <span class=\"m\">10</span><span class=\"p\">;</span> <span class=\"p\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">Delay</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">),</span> <span class=\"n\">token</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span> <span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<h2 id=\"sharp-corner-dont-use-operationcanceledexceptioncancellationtoken\">Sharp Corner: Don’t use OperationCanceledException.CancellationToken</h2>\n\n<p>Consider the original example code again:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">.</span><span class=\"n\">CreateLinkedTokenSource</span><span class=\"p\">(</span><span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n    <span class=\"kt\">var</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"n\">DoSomethingElseAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">...</span> <span class=\"c1\">// Do something while operation is in progress, possibly calling `cts.Cancel()`</span>\n    <span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now consider some code that may call <code>DoSomethingAsync</code> and respond to cancellation:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// BAD CODE!!! DO NOT USE!!!</span>\n<span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">MainAsync</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">();</span>\n    <span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">CancelAfter</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">2000</span><span class=\"p\">));</span>\n\n    <span class=\"k\">try</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">await</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">OperationCanceledException</span> <span class=\"n\">ex</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">CancellationToken</span> <span class=\"p\">==</span> <span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">)</span> <span class=\"c1\">// BAD CODE!!! DO NOT USE!!!</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Timeout!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The intent of the handling code is to do something different if the code is canceled <em>due to this particular cancellation source</em>. Unfortunately, this code is problematic in the real world; <code>DoSomethingAsync</code> may be using a linked cancellation token source, in which case the <code>OperationCanceledException.CancellationToken</code> would not match <code>cts.Token</code>, even if that was the source of the cancellation!</p>\n\n<p>This is why I always recommend <a href=\"/2022/03/cancellation-3-detecting-cancellation.html\">not using <code>OperationCanceledException.CancellationToken</code></a>. A proper solution is to check whether that source has been triggered:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">MainAsync</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">();</span>\n    <span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">CancelAfter</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">2000</span><span class=\"p\">));</span>\n\n    <span class=\"k\">try</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">await</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">OperationCanceledException</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">IsCancellationRequested</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Timeout!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<h3 id=\"checking-inner-tokens-still-dont-use-operationcanceledexceptioncancellationtoken\">Checking Inner Tokens: Still don’t use OperationCanceledException.CancellationToken</h3>\n\n<p>You might be tempted to do this kind of test when using linked cancellation tokens, again to determine what the cancellation source is:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// BAD CODE!!! DO NOT USE!!!</span>\n<span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">.</span><span class=\"n\">CreateLinkedTokenSource</span><span class=\"p\">(</span><span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n    <span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">CancelAfter</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">));</span>\n\n    <span class=\"k\">try</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">await</span> <span class=\"nf\">DoSomethingElseAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">OperationCanceledException</span> <span class=\"n\">ex</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">CancellationToken</span> <span class=\"p\">==</span> <span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">)</span> <span class=\"c1\">// BAD CODE!!! DO NOT USE!!!</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">...</span> <span class=\"c1\">// Do some recovery specific to the timeout.</span>\n        <span class=\"k\">throw</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>However, this code has the same issue! It’s possible that <code>DoSomethingElseAsync</code> may <em>itself</em> use a linked cancellation token (or may be changed to use one in the future)!</p>\n\n<p>The solution - again - is to not use <code>OperationCanceledException.CancellationToken</code>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">cts</span> <span class=\"p\">=</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">.</span><span class=\"n\">CreateLinkedTokenSource</span><span class=\"p\">(</span><span class=\"n\">cancellationToken</span><span class=\"p\">);</span>\n    <span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">CancelAfter</span><span class=\"p\">(</span><span class=\"n\">TimeSpan</span><span class=\"p\">.</span><span class=\"n\">FromSeconds</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">));</span>\n\n    <span class=\"k\">try</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">await</span> <span class=\"nf\">DoSomethingElseAsync</span><span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">OperationCanceledException</span> <span class=\"n\">ex</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">cts</span><span class=\"p\">.</span><span class=\"n\">IsCancellationRequested</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">...</span> <span class=\"c1\">// Do some recovery specific to the timeout.</span>\n        <span class=\"k\">throw</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Most of the time you won’t need to use linked cancellation tokens in your code, but linked cancellation tokens are useful when you need them! Some points to remember:</p>\n\n<ul>\n  <li>Dispose your cancellation token sources - including linked cancellation token sources.</li>\n  <li>Don’t use <code>OperationCanceledException.CancellationToken</code>; use <code>IsCancellationRequested</code> instead.</li>\n  <li>For any code that has multiple tokens in scope, be mindful about which one you are observing.</li>\n</ul>\n"
    },
    {
      "title": "Cancellation, Part 5: Registration",
      "link": "https://blog.stephencleary.com/2024/08/cancellation-5-registration.html",
      "pubDate": "Thu, 08 Aug 2024 00:00:00 +0000",
      "description": "<p>Last time in this series I talked about <a href=\"/2022/03/cancellation-4-polling.html\">how to respond to cancellation requests by polling for them</a>. That’s a common approach for synchronous or CPU-bound code. In this post, I’m covering a pattern more common for asynchronous code: registration.</p>\n\n<p>Registration is a way for your code to get a callback immediately when cancellation is requested. This callback can then perform some operation (often calling a different API) to cancel the asynchronous operation. Due to the multiple ways callbacks may be invoked, it’s generally recommended that cancellation callbacks should not throw exceptions.</p>\n\n<div class=\"alert alert-danger\">\n  <p><i class=\"fa fa-exclamation-triangle fa-2x pull-left\"></i></p>\n\n  <p>Your callback should not throw exceptions.</p>\n</div>\n\n<h2 id=\"how-to-register\">How to Register</h2>\n\n<p>Your code can register a callback with any <code>CancellationToken</code> by calling <code>CancellationToken.Register</code>. This callback is invoked when (if) the cancellation token is cancelled. The <code>Register</code> method returns a cancellation token registration, which is essentially just an <code>IDisposable</code>.</p>\n\n<p>Pretty much every asynchronous API <em>already has</em> cancellation support, so the example code below is somewhat contrived. The API in this example code provides a <code>StartSomething()</code> method to start some asynchronous operation, a <code>StopSomething()</code> method to cancel that operation, and a <code>SomethingCompletedTask</code> property to detect when the operation completed. There are very few APIs like this in the .NET ecosystem, but you may run into a design similar to this if you’re wrapping code from another language that doesn’t have a promise-based <code>async</code> system.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">registration</span> <span class=\"p\">=</span> <span class=\"n\">cancellationToken</span><span class=\"p\">.</span><span class=\"n\">Register</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">StopSomething</span><span class=\"p\">());</span>\n    <span class=\"n\">StartSomething</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"n\">SomethingCompletedTask</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Note that callbacks might never be invoked! Tasks always complete (that is, <a href=\"https://devblogs.microsoft.com/pfxteam/dont-forget-to-complete-your-tasks/?WT.mc_id=DT-MVP-5000058\">they always <em>should</em> complete</a>), but that doesn’t hold for cancellation tokens. There are some cancellation tokens that will never be cancelled, so they will never invoke their callbacks.</p>\n\n<div class=\"alert alert-danger\">\n  <p><i class=\"fa fa-exclamation-triangle fa-2x pull-left\"></i></p>\n\n  <p>Your callback might never be called.</p>\n</div>\n\n<h3 id=\"a-race-condition\">A Race Condition</h3>\n\n<p>What happens if a cancellation token is cancelled at approximately the same time the callback is registered? This situation is properly handled by a simple rule: if a callback is ever added to a cancellation token that is already canceled, then it is immediately and synchronously invoked.</p>\n\n<div class=\"alert alert-danger\">\n  <p><i class=\"fa fa-exclamation-triangle fa-2x pull-left\"></i></p>\n\n  <p>Your callback might be called immediately on the same thread before <code>Register</code> returns.</p>\n</div>\n\n<h2 id=\"cleanup-is-important\">Cleanup Is Important!</h2>\n\n<p>The lifetime of cancellation tokens can vary greatly. Some cancellation tokens are used for short, individual operations. Other cancellation tokens are used for application shutdown. When writing your cancelable code, ensure that your code disposes of the registration; this will prevent resource leaks in your application.</p>\n\n<p>The <code>using var registration</code> in the example code above (repeated below) is one common way of handling cleanup: the registration is disposed once the asynchronous work completes.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DoSomethingAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">cancellationToken</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">registration</span> <span class=\"p\">=</span> <span class=\"n\">cancellationToken</span><span class=\"p\">.</span><span class=\"n\">Register</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">StopSomething</span><span class=\"p\">());</span>\n    <span class=\"n\">StartSomething</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"n\">SomethingCompletedTask</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"c1\">// The registration is cleaned up here if the operation completed without being cancelled.</span></code></pre></figure>\n\n<div class=\"alert alert-danger\">\n  <p><i class=\"fa fa-exclamation-triangle fa-2x pull-left\"></i></p>\n\n  <p>Be sure to dispose your cancellation token registrations!</p>\n</div>\n\n<h2 id=\"sharp-corner-synchronous-cancellation-callbacks\">Sharp Corner: Synchronous Cancellation Callbacks</h2>\n\n<p>As discussed in <a href=\"/2022/03/cancellation-2-requesting-cancellation.html\">requesting cancellation</a>, token sources may be cancelled by calling the <code>Cancel</code> method. It’s important to note that any registered callbacks are immediately (and synchronously) run by the <code>Cancel</code> method before it returns. This can be a source of deadlocks or other unexpected behavior if your code is written assuming that callbacks are invoked <em>after</em> the <code>Cancel</code> method. Specifically, callbacks shouldn’t perform any blocking operation.</p>\n\n<div class=\"alert alert-danger\">\n  <p><i class=\"fa fa-exclamation-triangle fa-2x pull-left\"></i></p>\n\n  <p>Your callback is invoked synchronously in most cases.</p>\n</div>\n\n<p>This is awkward often enough that .NET 8.0 added a <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync?view=net-8.0&amp;WT.mc_id=DT-MVP-5000058\"><code>CancellationTokenSource.CancelAsync</code> method</a> which invokes the cancellation callbacks on a thread pool thread. Technically, it immediately and synchronously transitions the cancellation token source to the canceled state, and <em>then</em> queues the callback invocations on a thread pool thread. The returned task completes when the callbacks have completed.</p>\n\n<p>One more wrinkle, actually: it’s possible that <code>CancelAsync</code> will return before the callbacks have completed <em>if</em> it’s already been called. As soon as the <code>CancellationTokenSource</code> transitions to the canceled state, any future calls to <code>Cancel</code> or <code>CancelAsync</code> will return immediately, even if a previous call to <code>CancelAsync</code> hasn’t finished running its callbacks yet. But you probably don’t need to worry about that; it’s just a side note.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>This post has a bunch of scary warnings, but really, registering callbacks is the <em>natural</em> way to implement cancellation at the lowest levels. <a href=\"/2022/03/cancellation-4-polling.html\">Polling</a> is commonly used in sample code because it’s simpler, but registration allows your code to react immediately.</p>\n\n<p>Don’t let the warnings dissuade you from using cancellation registrations! They’re more like guidelines for proper usage:</p>\n<ul>\n  <li>Your callback should not throw exceptions.</li>\n  <li>Your callback might never be called.</li>\n  <li>Your callback might be called immediately on the same thread before <code>Register</code> returns.</li>\n  <li>Be sure to dispose your cancellation token registrations.</li>\n  <li>Your callback is invoked synchronously in most cases.</li>\n</ul>\n\n<p>If you follow these guidelines, you should be able to use cancellation token registrations successfully!</p>\n"
    },
    {
      "title": "ICYMI: Video Series on TCP/IP Application Protocol Design",
      "link": "https://blog.stephencleary.com/2024/08/icymi-tcpip-protocol-design.html",
      "pubDate": "Thu, 01 Aug 2024 00:00:00 +0000",
      "description": "<p>I speak regularly at various programming conferences, and one of my favorite talks is actually on TCP/IP protocol design. This is a skill that I learned almost by accident (literally because <em>someone</em> had to, and no one else in the company <em>wanted</em> to). It’s always been one of my favorite talks, and I submit it all over the place. Most of the time it’s rejected. Which I get - protocol design is esoteric and just plain useless for most developers. But I think it’s still <em>fun!</em></p>\n\n<p>A bit ago I decided to take everything I had ever learned about TCP/IP protcols and live-code a server and client. So, all the knowledge that goes into my talk is also in this video series. I chose a basic chat server, since the requirements are simple and easily understood. I also wanted to try out some of the newer .NET APIs. Specifically, the final solution uses:</p>\n\n<ul>\n  <li><code>async</code> and <code>await</code> - naturally!</li>\n  <li><code>Socket</code> - the Berkeley-ish API for socket communication.</li>\n  <li><code>System.IO.Pipelines</code> - for low-level buffer management.</li>\n  <li><code>System.Threading.Channels</code> and <code>IAsyncEnumerable</code> - for asynchronous streams of messages.</li>\n  <li>A dictionary of <code>TaskCompletionSource</code> instances - to implement higher-level request/response APIs.</li>\n</ul>\n\n<p>Someday I’d like to update this to use QUIC (<code>System.Net.Quic</code>). Let me know if that’s something you’d be interested in!</p>\n\n<p>The full video series (over 16 hours!) is <a href=\"https://www.youtube.com/playlist?list=PLIebvSMVr_dehKSoq6vuAW0BGEM6QnDlS\">available for free on YouTube</a>, and the code is <a href=\"https://github.com/StephenClearyExamples/TcpChat\">on GitHub</a>. Enjoy!</p>\n"
    },
    {
      "title": "MetaPost 2024-04-24",
      "link": "https://blog.stephencleary.com/2024/04/metapost.html",
      "pubDate": "Thu, 25 Apr 2024 00:00:00 +0000",
      "description": "<p>I don’t do meta-posts that often, but this is one. Feel free to skip this if you don’t care! :D</p>\n\n<h2 id=\"icymi-in-case-you-missed-it\">ICYMI (In Case You Missed It)</h2>\n\n<p>I’m planning to write several rather small blog posts that will mostly be pointers to other things. I’ve been publishing more GitHub repositories, Gists, and other things (occasional videos and podcasts). It has occurred to me recently that most of my followers are not aware of these; I apologize, and I’ll try to be better about publishing a note here about them.</p>\n\n<p>These blog posts will have an ICYMI prefix. Unless I forget.</p>\n\n<h2 id=\"advertisements\">Advertisements</h2>\n\n<p>On a completely different note, I’ve always had a tolerate-hate relationship with advertisements on my site. Before jumping into the latest change, I’m going to briefly describe some history.</p>\n\n<h3 id=\"google-ads-the-early-days\">Google Ads: The Early Days</h3>\n\n<p>Google Ads have always been on my site. Except recently (more on that below). Google Ads give you a great way to very easily set up ads and also give you a good deal of control on what <em>kinds</em> of ads are on your site. This is very important to me since I have personal objections to advertisements that encourage addictions. Specifically, gambling and pornography ads have never been allowed on my site.</p>\n\n<p>Perhaps non-coincidentally, gambling and pornography ads are the <em>highest paying</em> ad categories (or at least they were last time I checked). I’ve never made a lot of money off my ads, though, and cutting my ad income by a third or half has always been an acceptable tradeoff to me.</p>\n\n<h3 id=\"disqus\">Disqus</h3>\n\n<p>Back in the day, I used Disqus for comments on my blog. It was good (enough), and the price was right: free. Sooner or later, though, they decided they should actually make some money.</p>\n\n<p>I was first made aware of this by several visitors to my site informing me that my site was showing ads of… let’s say “unsavory content”. Yes, Disqus - without warning - had started showing ads for pornographic sites on my site.</p>\n\n<p>Not only were they showing ads I didn’t want on my site, but they also deliberately hid them from me. It turns out Disqus would not show ads if they could tell you were potentially the owner of your site.</p>\n\n<p>I tried to control the ad categories, but Disqus (at least at that time) did not have any such controls or options. It was either pay them money or put up with <em>their</em> ad choices.</p>\n\n<p>Of course, there was a third option, too. I spent a weekend hacking together my own comment system. Goodbye forever, Disqus.</p>\n\n<h3 id=\"google-ads-now-also-gone\">Google Ads: Now Also Gone</h3>\n\n<p>Recently, I removed Google Ads from my site. They’ve been getting more annoying, doing sneaky full-page takeovers if users switch to another tab and then back. I’ve tried to restrain them, but at the end of the day, there’s only so much I can do.</p>\n\n<p>So, I’ve removed Google Ads. I’m not against companies making money, and I’m not against advertising. But I am against annoying ads (Google), or sneaky uncontrollable ads (Disqus).</p>\n\n<h3 id=\"the-future-of-my-ads\">The Future of My Ads</h3>\n\n<p>All that to say this: I’m open to considering sponsor messages on my blog post(s). If you’re interested in sponsoring an existing post, <a href=\"https://stephencleary.com/contact/\">contact me</a>!</p>\n"
    },
    {
      "title": "C# Advent: The Joy of Immutable Update Patterns",
      "link": "https://blog.stephencleary.com/2023/12/the-joy-of-immutable-update-patterns.html",
      "pubDate": "Sun, 24 Dec 2023 00:00:00 +0000",
      "description": "<p>This is my first-ever post that is part of <a href=\"https://csadvent.christmas/\">C# Advent</a> organized by <a href=\"https://x.com/mgroves\">@mgroves</a>. This year there’s a <a href=\"https://www.youtube.com/watch?v=D4udjhRjW4o\">video</a>, too, including yours-truly singing while wearing my favorite Christmas shirt!</p>\n\n<h2 id=\"joy-to-the-world\">Joy to the World!</h2>\n\n<blockquote class=\"blockquote\">\n  <p>Glory to God in the highest, and on earth peace, good will toward men.</p>\n\n  <footer class=\"blockquote-footer text-right\"><cite>Luke 2:14</cite></footer>\n</blockquote>\n\n<p>I love Christmas! It’s easily my favorite holiday.</p>\n\n<p>In spite of difficulties and upheaval in the world (it is 2023 right now), Christmas still stands as a time of refection and remembrance and expectation.</p>\n\n<p>I do approach Christmas from a Christian perspective, and I enjoy meditating on Jesus’ birth during this time. In particular this year, I’ve been focusing on <em>peace</em> and <em>joy</em>, two words commonly associated with Christmas and the coming of the Christ.</p>\n\n<p>So, when I was considering the topic for my C# Advent article, I particularly wanted one that invoked Peace or Joy. And, when working with C#, there is one aspect of the language that truly does cause feelings of joy whenever I use it. It’s not a single language feature, but rather a collection of language features that all work together in a beatiful way.</p>\n\n<p>Hence the title of this blog post: The Joy of Immutable Update Patterns. Wow, that sounds nerdy…</p>\n\n<h2 id=\"immutability\">Immutability</h2>\n\n<p>An immutable type is one whose value can’t change. Immutable types have several advantages, not the least of which is that they’re just easier to reason about. Some languages push immutability very strongly; C# takes a relatively pragmatic approach.</p>\n\n<p>Immutability varies across the C# ecosystem (and it’s currently seeing a gradual rise in popularity). Most value types are usually immutable (e.g., <code>int</code>, <code>decimal</code>, and <code>Guid</code>); most reference types are not immutable (e.g., <code>List&lt;int&gt;</code>). However, there are lots of exceptions to that general rule; mutable value types are common in performance-sensitive scenarios, and some reference types such as <code>string</code> are immutable.</p>\n\n<p>Modern code has a few additional options for immutable types: you can use <code>record class</code> (C# 9) for immutable reference types and <code>readonly record struct</code> (C# 10) for immutable value types. There’s also the collections in <code>System.Collections.Immutable</code> for more complex data structures such as stacks, queues, and dictionaries. Of course, with your own immutable types and collections, their members/elements must be immutable in order for the composite value to be immutable.</p>\n\n<h2 id=\"updating-immutable-data\">Updating Immutable Data</h2>\n\n<p>Immutable data makes local functions easier to reason about - you <em>know</em> the data can’t change - but of course every program has to model modifications in some way. One approach is to have a <em>variable</em> that is mutable, referring to some <em>data</em> that is immutable. To change the immutable data, you can write code that transitions one immutable value to another.</p>\n\n<p>It is in this area that C# has been slowly adding enhancements over many years, and is now approaching beautiful code. Code that makes me smile when I write it!</p>\n\n<h3 id=\"switch-expressions\"><code>switch</code> Expressions</h3>\n\n<p><code>switch</code> expressions (C# 8) are at the core of immutable update patterns. At their simplest, they provide a mapping from one constant to another:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">static</span> <span class=\"n\">Category</span> <span class=\"nf\">Map</span><span class=\"p\">(</span><span class=\"n\">AdventThing</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">t</span> <span class=\"k\">switch</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">AdventThing</span><span class=\"p\">.</span><span class=\"n\">Mary</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Category</span><span class=\"p\">.</span><span class=\"n\">Person</span><span class=\"p\">,</span>\n  <span class=\"n\">AdventThing</span><span class=\"p\">.</span><span class=\"n\">Sheep</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Category</span><span class=\"p\">.</span><span class=\"n\">Animal</span><span class=\"p\">,</span>\n  <span class=\"n\">AdventThing</span><span class=\"p\">.</span><span class=\"n\">Camel</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Category</span><span class=\"p\">.</span><span class=\"n\">Animal</span><span class=\"p\">,</span>\n  <span class=\"n\">AdventThing</span><span class=\"p\">.</span><span class=\"n\">Bethlehem</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Category</span><span class=\"p\">.</span><span class=\"n\">Place</span><span class=\"p\">,</span>\n  <span class=\"n\">_</span> <span class=\"p\">=&gt;</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">ArgumentOutOfRangeException</span><span class=\"p\">(</span><span class=\"n\">nameof</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)),</span>\n<span class=\"p\">};</span></code></pre></figure>\n\n<p><code>switch</code> expressions are built on <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns?WT.mc_id=DT-MVP-5000058\">pattern matching</a>, which started in <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/patterns?WT.mc_id=DT-MVP-5000058\">C# 8</a> (alongside the <code>switch</code> expression) and have received enhancements in <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/patterns3?WT.mc_id=DT-MVP-5000058\">C# 9</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/extended-property-patterns?WT.mc_id=DT-MVP-5000058\">C# 10</a>, and <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-11.0/list-patterns?WT.mc_id=DT-MVP-5000058\">C# 11</a>. They’re practically a separate mini-language at this point!</p>\n\n<p>Switch expressions on their own are powerful, but they’re especially useful alongside <code>with</code> expressions.</p>\n\n<h3 id=\"with-expressions\"><code>with</code> Expressions</h3>\n\n<p><code>with</code> expressions are a shorthand way of copying a composite value (i.e., a <code>record class</code> or <code>readonly record struct</code>) and changing only the specified properties. A simple example should suffice:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">record</span> <span class=\"k\">class</span> <span class=\"nf\">Inn</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">RoomsAvailable</span><span class=\"p\">);</span>\n<span class=\"n\">Inn</span> <span class=\"nf\">Full</span><span class=\"p\">(</span><span class=\"n\">Inn</span> <span class=\"n\">inn</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">inn</span> <span class=\"n\">with</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">RoomsAvailable</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">Inn</span> <span class=\"n\">myInn</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;Bethlehem Getaway&quot;</span><span class=\"p\">,</span> <span class=\"m\">50</span><span class=\"p\">);</span>\n<span class=\"n\">Inn</span> <span class=\"n\">fullInn</span> <span class=\"p\">=</span> <span class=\"n\">Full</span><span class=\"p\">(</span><span class=\"n\">myInn</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>In the example above, <code>Full</code> does not modify the (immutable) inn; it returns a <em>new</em> inn that is full.</p>\n\n<p>Combining <code>switch</code> expressions with <code>with</code> expressions is where you start to see the beauty of this kind of immutable update pattern:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Inn</span> <span class=\"nf\">ReserveRoom</span><span class=\"p\">(</span><span class=\"n\">Inn</span> <span class=\"n\">inn</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">inn</span> <span class=\"k\">switch</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">{</span> <span class=\"n\">RoomsAvailable</span><span class=\"p\">:</span> <span class=\"p\">&gt;</span><span class=\"m\">0</span> <span class=\"p\">}</span> <span class=\"p\">=&gt;</span> <span class=\"n\">inn</span> <span class=\"n\">with</span> <span class=\"p\">{</span> <span class=\"n\">RoomsAvailable</span> <span class=\"p\">=</span> <span class=\"n\">inn</span><span class=\"p\">.</span><span class=\"n\">RoomsAvailable</span> <span class=\"p\">-</span> <span class=\"m\">1</span> <span class=\"p\">},</span>\n  <span class=\"n\">_</span> <span class=\"p\">=&gt;</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">InvalidOperationException</span><span class=\"p\">(</span><span class=\"s\">&quot;No rooms available.&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">};</span></code></pre></figure>\n\n<p>Here’s a method that decrements the available rooms in an <code>Inn</code>. It is a <em>pure</em> method; it depends only on its inputs and produces only its outputs, with no mutation. This is the point at which we’re starting to do immutable state transitions.</p>\n\n<h3 id=\"collections\">Collections</h3>\n\n<p>I tend to use <code>System.Collections.Immutable</code> whenever I need something stack- or queue- or dictionary-like in an immutable context. These types all have methods like <code>Add</code> that <em>return</em> a new collection rather than modifying one in place. Internally, the immutable collections share internal data structures, so this isn’t as inefficient as copying the entire collection; immutable collections can never be as memory-efficient as mutable collections, but they’re usually efficient enough to not be an issue. I find immutable collections satisfy my needs quite well.</p>\n\n<p>However, I would be remiss if I didn’t mention that C# has added a new way to create collections (including <code>ImmutableArray&lt;T&gt;</code>). It’s very reminiscient of JavaScript’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread operator</a>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">ImmutableArray</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"n\">list</span> <span class=\"p\">=</span> <span class=\"n\">ImmutableArray</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">11</span><span class=\"p\">,</span> <span class=\"m\">13</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"m\">2</span><span class=\"p\">;</span>\n\n<span class=\"n\">ImmutableArray</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"p\">[..</span><span class=\"n\">list</span><span class=\"p\">[..</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"p\">..</span><span class=\"n\">list</span><span class=\"p\">[^</span><span class=\"n\">index</span><span class=\"p\">..]];</span>\n<span class=\"c1\">// result: [3, 5, 7, 11, 13]</span>\n<span class=\"c1\">// Equivalent to:</span>\n<span class=\"c1\">//   ImmutableArray&lt;int&gt; result = list.SetItem(index, 7);</span></code></pre></figure>\n\n<p>As of this writing, though, the implementation iterates over all the elements and builds an entirely new collection. This is quite inefficient for immutable collections, so I do not use C# 12’s <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions?WT.mc_id=DT-MVP-5000058\">collection expressions</a> when working with immutable data. (But for mutable code, they rock!)</p>\n\n<h2 id=\"application-unidirectional-data-flow\">Application: Unidirectional Data Flow</h2>\n\n<p>Let’s build this up into something a bit more complex! We can give each inn an actual collection of rooms, and just acquire an available one when requested.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">record</span> <span class=\"k\">class</span> <span class=\"nf\">Room</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">Id</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">Available</span><span class=\"p\">);</span>\n<span class=\"n\">record</span> <span class=\"k\">class</span> <span class=\"nf\">Inn</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">ImmutableHashSet</span><span class=\"p\">&lt;</span><span class=\"n\">Room</span><span class=\"p\">&gt;</span> <span class=\"n\">Rooms</span><span class=\"p\">);</span>\n\n<span class=\"n\">Inn</span> <span class=\"nf\">ReserveRoom</span><span class=\"p\">(</span><span class=\"n\">Inn</span> <span class=\"n\">inn</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">var</span> <span class=\"n\">room</span> <span class=\"p\">=</span> <span class=\"n\">inn</span><span class=\"p\">.</span><span class=\"n\">Rooms</span><span class=\"p\">.</span><span class=\"n\">FirstOrDefault</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"p\">=&gt;</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">Available</span><span class=\"p\">)</span>\n      <span class=\"p\">??</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">InvalidOperationException</span><span class=\"p\">(</span><span class=\"s\">&quot;No rooms available.&quot;</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">inn</span> <span class=\"n\">with</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">Rooms</span> <span class=\"p\">=</span> <span class=\"n\">inn</span><span class=\"p\">.</span><span class=\"n\">Rooms</span><span class=\"p\">.</span><span class=\"n\">Remove</span><span class=\"p\">(</span><span class=\"n\">room</span><span class=\"p\">).</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">room</span> <span class=\"n\">with</span> <span class=\"p\">{</span> <span class=\"n\">Available</span> <span class=\"p\">=</span> <span class=\"k\">false</span> <span class=\"p\">}),</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Inn</span> <span class=\"n\">myInn</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;Bethlehem Getaway&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">50</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">+</span> <span class=\"m\">100</span><span class=\"p\">,</span> <span class=\"n\">Available</span><span class=\"p\">:</span> <span class=\"k\">true</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToImmutableHashSet</span><span class=\"p\">());</span>\n<span class=\"n\">Inn</span> <span class=\"n\">resultInn</span> <span class=\"p\">=</span> <span class=\"n\">ReserveRoom</span><span class=\"p\">(</span><span class=\"n\">myInn</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Now we have some more complex state, and our <code>ReserveRoom</code> method now finds a room, reserves it, and returns the new composite state of the inn. I often find it useful to have these modifier methods also return some indication of what they did - in this case, it can return the room that was reserved. Tuples are convenient for multiple return values:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"p\">(</span><span class=\"n\">Inn</span> <span class=\"n\">Inn</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">RoomId</span><span class=\"p\">)</span> <span class=\"n\">ReserveRoom</span><span class=\"p\">(</span><span class=\"n\">Inn</span> <span class=\"n\">inn</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">var</span> <span class=\"n\">room</span> <span class=\"p\">=</span> <span class=\"n\">inn</span><span class=\"p\">.</span><span class=\"n\">Rooms</span><span class=\"p\">.</span><span class=\"n\">FirstOrDefault</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"p\">=&gt;</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">Available</span><span class=\"p\">)</span>\n      <span class=\"p\">??</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">InvalidOperationException</span><span class=\"p\">(</span><span class=\"s\">&quot;No rooms available.&quot;</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"n\">inn</span> <span class=\"n\">with</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">Rooms</span> <span class=\"p\">=</span> <span class=\"n\">inn</span><span class=\"p\">.</span><span class=\"n\">Rooms</span><span class=\"p\">.</span><span class=\"n\">Remove</span><span class=\"p\">(</span><span class=\"n\">room</span><span class=\"p\">).</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">room</span> <span class=\"n\">with</span> <span class=\"p\">{</span> <span class=\"n\">Available</span> <span class=\"p\">=</span> <span class=\"k\">false</span> <span class=\"p\">}),</span>\n      <span class=\"p\">},</span>\n      <span class=\"n\">room</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>If you squint a bit, you can see <code>ReserveRoom</code> as being like a Redux reducer (for a single action: reserving a room). Many years ago, React and Redux took the world by storm. Although Redux has fallen out of favor in some circles, it made some ideas popular, and those continue to live on.</p>\n\n<p>Specifically, the idea of Unidirectional Data Flow is one that has taken hold, particularly in UI applications. The core idea is that the application has a single instance of composite immutable state, and that this state is only changed by applying pure functions to it (commonly called “reducers”). Other parts of the application (including the UI) listen for and respond to state changes. UDF is an architecture that is overkill for extremely simple applications, but is an absolute lifesaver when there is significant complexity.</p>\n\n<p>Unidirectional Data Flow (UDF) can go by several names. Model-View-Intent (MVI) is an architecture common on mobile platforms that is based on UDF. Another fairly common architecture name is The Elm Architecture (TEA, or sometimes just Elm). Today most C# UI applications still use a basic MVVM style of architecture, but I expect with the language changes that better support immutable update patterns, we’ll start to see more adoption of UDF architectures in C#. At least, I hope so!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I hope this post has been interesting to you! Personally, I do enjoy writing code combining <code>switch</code> and <code>with</code> expressions. I think the resulting code is really elegant, and I hope you got some joy out of this! Merry Christmas!</p>\n\n<!--\n## Application: Building Asynchronous Primitives\n\nAnd now I'm going to completely switch gears. Because immutable state updates are great for application state, but they're also great for doing threadsafe code.\n\nOne advantage of immutable data is that - since it is immutable - it can be safely shared among any threads! There's usually just one variable that _refers_ to the immutable state, and that variable is the only thing that needs actual multithreaded protection. So, let's use this aspect to improve on a well-known primitive.\n\nI have an \"Async Masterclass\" talk that I've given a few times, and in that talk one of the topics I cover is building your own asynchronous synchronization primitives. A simple example is an `AsyncManualResetEvent`, which in my (current) slides ends up looking like this:\n\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">sealed</span> <span class=\"k\">class</span> <span class=\"nc\">AsyncManualResetEvent</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">private</span> <span class=\"kt\">object</span> <span class=\"n\">_mutex</span><span class=\"p\">;</span>\n\t<span class=\"k\">private</span> <span class=\"n\">TaskCompletionSource</span> <span class=\"n\">_tcs</span><span class=\"p\">;</span>\n\t\n\t<span class=\"k\">public</span> <span class=\"nf\">AsyncManualResetEvent</span><span class=\"p\">()</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">_mutex</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">_tcs</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">(</span><span class=\"n\">TaskCreationOptions</span><span class=\"p\">.</span><span class=\"n\">RunContinuationsAsynchronously</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">public</span> <span class=\"n\">Task</span> <span class=\"nf\">WaitUntilSetAsync</span><span class=\"p\">()</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">lock</span> <span class=\"p\">(</span><span class=\"n\">_mutex</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">_tcs</span><span class=\"p\">.</span><span class=\"n\">Task</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Set</span><span class=\"p\">()</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">lock</span> <span class=\"p\">(</span><span class=\"n\">_mutex</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">_tcs</span><span class=\"p\">.</span><span class=\"n\">TrySetResult</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Reset</span><span class=\"p\">()</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">lock</span> <span class=\"p\">(</span><span class=\"n\">_mutex</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_tcs</span><span class=\"p\">.</span><span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">IsCompleted</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">_tcs</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">(</span><span class=\"n\">TaskCreationOptions</span><span class=\"p\">.</span><span class=\"n\">RunContinuationsAsynchronously</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n\nAnd, sure, there's nothing really _wrong_ with this, but there's some parts that aren't clear to many developers. How can I use `lock` in this asynchronous primitive? And `RunContinuationsAsynchronously` is necessary to avoid a particularly tricky deadlock situation. It's just not code that is \n\n-->\n"
    },
    {
      "title": "ConfigureAwait in .NET 8",
      "link": "https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html",
      "pubDate": "Thu, 09 Nov 2023 00:00:00 +0000",
      "description": "<p>I don’t often write “what’s new in .NET” posts, but .NET 8.0 has an interesting addition that I haven’t seen a lot of people talk about. <code>ConfigureAwait</code> is getting a pretty good overhaul/enhancement; let’s take a look!</p>\n\n<h2 id=\"configureawaittrue-and-configureawaitfalse\">ConfigureAwait(true) and ConfigureAwait(false)</h2>\n\n<p>First, let’s review the semantics and history of the original <code>ConfigureAwait</code>, which takes a boolean argument named <code>continueOnCapturedContext</code>.</p>\n\n<p>When <code>await</code> acts on a task (<code>Task</code>, <code>Task&lt;T&gt;</code>, <code>ValueTask</code>, or <code>ValueTask&lt;T&gt;</code>), its <a href=\"/2012/02/async-and-await.html\">default behavior</a> is to capture a “context”; later, when the task completes, the <code>async</code> method resumes executing in that context. The “context” is <code>SynchronizationContext.Current</code> or <code>TaskScheduler.Current</code> (falling back on the thread pool context if none is provided). This default behavior of continuing on the captured context can be made explicit by using <code>ConfigureAwait(continueOnCapturedContext: true)</code>.</p>\n\n<p><code>ConfigureAwait(continueOnCapturedContext: false)</code> is useful if you <em>don’t</em> want to resume on that context. When using <code>ConfigureAwait(false)</code>, the <code>async</code> method resumes on any available thread pool thread.</p>\n\n<p>The history of <code>ConfigureAwait(false)</code> is interesting (at least to me). Originally, the community recommended using <code>ConfigureAwait(false)</code> everywhere you could, unless you <em>needed</em> the context. This is the position I <a href=\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming?WT.mc_id=DT-MVP-5000058#configure-context\">recommended in my Async Best Practices article</a>. There were several discussions during that time frame over why the default was <code>true</code>, especially from frustrated library developers who had to use <code>ConfigureAwait(false)</code> a lot.</p>\n\n<p>Over the years, though, the recommendation of “use <code>ConfigureAwait(false)</code> whenever you can” has been modified. The first (albeit minor) shift was instead of “use <code>ConfigureAwait(false)</code> whenever you can”, a simpler guideline arose: use <code>ConfigureAwait(false)</code> in library code and <em>don’t</em> use it in application code. This is an easier guideline to understand and follow. Still, the complaints about having to use <code>ConfigureAwait(false)</code> continued, with periodic requests to change the default on a project-wide level. These requests have always been rejected by the C# team for language consistency reasons.</p>\n\n<p>More recently (specifically, since ASP.NET dropped their <code>SynchronizationContext</code> with ASP.NET Core and fixed all the places where sync-over-async was necessary), there has been a move away from <code>ConfigureAwait(false)</code>. As a library author, I fully understand how annoying it is to have <code>ConfigureAwait(false)</code> litter your codebase! Some library authors have just decided not to bother with <code>ConfigureAwait(false)</code>. For myself, I still use <code>ConfigureAwait(false)</code> in my libraries, but I understand the frustration.</p>\n\n<div class=\"alert alert-info\">\n  <p><i class=\"fa fa-hand-o-right fa-2x pull-left\"></i></p>\n\n  <p>An earlier version of this post incorrectly claimed that the Entity Framework Core team had decided not to use <code>ConfigureAwait(false)</code>. This was only true in early versions of Entity Framework Core. Entity Framework Core <a href=\"https://github.com/dotnet/efcore/pull/21110\" class=\"alert-link\">added <code>ConfigureAwait(false)</code> in version 5.0.0</a> and continues to use <code>ConfigureAwait(false)</code> as of this writing (2023-11-11).</p>\n</div>\n\n<p>Since we’re on the topic of <code>ConfigureAwait(false)</code>, I’d like to note a few common misconceptions:</p>\n\n<ol>\n  <li><code>ConfigureAwait(false)</code> is not a good way to avoid deadlocks. That’s not its purpose, and it’s a questionable solution at best. In order to avoid deadlocks when doing direct blocking, you’d have to make sure <em>all</em> the asynchronous code uses <code>ConfigureAwait(false)</code>, including code in libraries and the runtime. It’s just not a very maintainable solution. There are <a href=\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2015/july/async-programming-brownfield-async-development?WT.mc_id=DT-MVP-5000058\">better solutions available</a>.</li>\n  <li><code>ConfigureAwait</code> configures the <code>await</code>, not the task. E.g., the <code>ConfigureAwait(false)</code> in <code>SomethingAsync().ConfigureAwait(false).GetAwaiter().GetResult()</code> does exactly nothing. Similarly, the <code>await</code> in <code>var task = SomethingAsync(); task.ConfigureAwait(false); await task;</code> still continues on the captured context, completely ignoring the <code>ConfigureAwait(false)</code>. I’ve seen both of these mistakes over the years.</li>\n  <li><code>ConfigureAwait(false)</code> does not mean “run the rest of this method on a thread pool thread” or “run the rest of this method on a different thread”. It only takes effect if the <code>await</code> yields control and then later resumes the <code>async</code> method. Specifically, <code>await</code> will <em>not</em> yield control if its task is already complete; in that case, the <code>ConfigureAwait</code> has no effect because the <code>await</code> continues synchronously.</li>\n</ol>\n\n<p>OK, now that we’ve refreshed our understanding of <code>ConfigureAwait(false)</code>, let’s take a look at how <code>ConfigureAwait</code> is getting some enhancements in .NET 8. None of the existing behavior is changed; <code>await</code> without any <code>ConfigureAwait</code> at all still has the default behavior of <code>ConfigureAwait(true)</code>, and <code>ConfigureAwait(false)</code> still has the same behavior, too. But there’s a <em>new</em> <code>ConfigureAwait</code> coming into town!</p>\n\n<h2 id=\"configureawaitconfigureawaitoptions\">ConfigureAwait(ConfigureAwaitOptions)</h2>\n\n<p>There are several new options available for <code>ConfigureAwait</code>. <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.configureawaitoptions?view=net-8.0\"><code>ConfigureAwaitOptions</code></a> is a new type that provides all the different ways to configure awaitables:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">namespace</span> <span class=\"nn\">System.Threading.Tasks</span><span class=\"p\">;</span>\n<span class=\"na\">[Flags]</span>\n<span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">ConfigureAwaitOptions</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">None</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"n\">x0</span><span class=\"p\">,</span>\n    <span class=\"n\">ContinueOnCapturedContext</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"n\">x1</span><span class=\"p\">,</span>\n    <span class=\"n\">SuppressThrowing</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"n\">x2</span><span class=\"p\">,</span>\n    <span class=\"n\">ForceYielding</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"n\">x4</span><span class=\"p\">,</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>First, a quick note: this is a <code>Flags</code> enum; any combination of these options can be used together.</p>\n\n<p>The next thing I want to point out is that <code>ConfigureAwait(ConfigureAwaitOptions)</code> is only available on <code>Task</code> and <code>Task&lt;T&gt;</code>, at least for .NET 8. It wasn’t added to <code>ValueTask</code> / <code>ValueTask&lt;T&gt;</code> yet. It’s possible that a future release of .NET may add <code>ConfigureAwait(ConfigureAwaitOptions)</code> for value tasks, but as of now it’s only available on reference tasks, so you’ll need to call <code>AsTask</code> if you want to use these new options on value tasks.</p>\n\n<p>Now, let’s consider each of these options in turn.</p>\n\n<h3 id=\"configureawaitoptionsnone-and-configureawaitoptionscontinueoncapturedcontext\">ConfigureAwaitOptions.None and ConfigureAwaitOptions.ContinueOnCapturedContext</h3>\n\n<p>These two are going to be pretty familiar, except with one twist.</p>\n\n<p><code>ConfigureAwaitOptions.ContinueOnCapturedContext</code> - as you might guess from the name - is the same as <code>ConfigureAwait(continueOnCapturedContext: true)</code>. In other words, the <code>await</code> will capture the context and resume executing the <code>async</code> method on that context.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Task</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"p\">...;</span>\n\n<span class=\"c1\">// These all do the same thing</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">;</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">continueOnCapturedContext</span><span class=\"p\">:</span> <span class=\"k\">true</span><span class=\"p\">);</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">ContinueOnCapturedContext</span><span class=\"p\">);</span></code></pre></figure>\n\n<p><code>ConfigureAwaitOptions.None</code> is the same as <code>ConfigureAwait(continueOnCapturedContext: false)</code>. In other words, <code>await</code> will behave perfectly normally, except that it will <em>not</em> capture the context; assuming the <code>await</code> does yield (i.e, the task is not already complete), then the <code>async</code> method will resume executing on any available thread pool thread.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Task</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"p\">...;</span>\n\n<span class=\"c1\">// These do the same thing</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">continueOnCapturedContext</span><span class=\"p\">:</span> <span class=\"k\">false</span><span class=\"p\">);</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Here’s the twist: with the new options, the default is to <em>not</em> capture the context! Unless you explicitly include <code>ContinueOnCapturedContext</code> in your flags, the context will <em>not</em> be captured. Of course, the default behavior of <code>await</code> itself is unchanged: without any <code>ConfigureAwait</code> at all, <code>await</code> will behave as though <code>ConfigureAwait(true)</code> or <code>ConfigureAwait(ConfigureAwaitOptions.ContinueOnCapturedContext)</code> was used.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Task</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"p\">...;</span>\n\n<span class=\"c1\">// Default behavior (no ConfigureAwait): continue on the captured context.</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Default flag option (None): do not continue on the captured context.</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>So, that’s something to keep in mind as you start using this new <code>ConfigureAwaitOptions</code> enum.</p>\n\n<h3 id=\"configureawaitoptionssuppressthrowing\">ConfigureAwaitOptions.SuppressThrowing</h3>\n\n<p>The <code>SuppressThrowing</code> flag suppresses exceptions that would otherwise occur when <code>await</code>ing a task. Under normal conditions, <code>await</code> will observe task exceptions by re-raising them at the point of the <code>await</code>. Normally, this is exactly the behavior you want, but there are some situations where you just want to wait for the task to complete and you don’t care whether it completes successfully or with an exception. <code>SuppressThrowing</code> allows you to wait for the completion of a task without observing its result.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Task</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"p\">...;</span>\n\n<span class=\"c1\">// These do the same thing</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">SuppressThrowing</span><span class=\"p\">);</span>\n<span class=\"k\">try</span> <span class=\"p\">{</span> <span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"k\">false</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span> <span class=\"p\">}</span></code></pre></figure>\n\n<p>I expect this will be most useful alongside cancellation. There are some cases where some code needs to cancel a task and then wait for the existing task to complete before starting a replacement task. <code>SuppressThrowing</code> would be useful in that scenario: the code can <code>await</code> with <code>SuppressThrowing</code>, and the method will continue when the task completes, whether it was successful, canceled, or finished with an exception.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// Cancel the old task and wait for it to complete, ignoring exceptions.</span>\n<span class=\"n\">_cts</span><span class=\"p\">.</span><span class=\"n\">Cancel</span><span class=\"p\">();</span>\n<span class=\"k\">await</span> <span class=\"n\">_task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">SuppressThrowing</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Start the new task.</span>\n<span class=\"n\">_cts</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">CancellationTokenSource</span><span class=\"p\">();</span>\n<span class=\"n\">_task</span> <span class=\"p\">=</span> <span class=\"n\">SomethingAsync</span><span class=\"p\">(</span><span class=\"n\">_cts</span><span class=\"p\">.</span><span class=\"n\">Token</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>If you <code>await</code> with the <code>SuppressThrowing</code> flag, then the exception <em>is</em> considered “observed”, so <code>TaskScheduler.UnobservedTaskException</code> is not raised. The assumption is that you are awaiting the task and deliberately discarding the exception, so it’s not considered unobserved.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">TaskScheduler</span><span class=\"p\">.</span><span class=\"n\">UnobservedTaskException</span> <span class=\"p\">+=</span> <span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">__</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;never printed&quot;</span><span class=\"p\">);</span> <span class=\"p\">};</span>\n\n<span class=\"n\">Task</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">FromException</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">InvalidOperationException</span><span class=\"p\">());</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">SuppressThrowing</span><span class=\"p\">);</span>\n<span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">;</span>\n\n<span class=\"n\">GC</span><span class=\"p\">.</span><span class=\"n\">Collect</span><span class=\"p\">();</span>\n<span class=\"n\">GC</span><span class=\"p\">.</span><span class=\"n\">WaitForPendingFinalizers</span><span class=\"p\">();</span>\n<span class=\"n\">GC</span><span class=\"p\">.</span><span class=\"n\">Collect</span><span class=\"p\">();</span>\n\n<span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">ReadKey</span><span class=\"p\">();</span></code></pre></figure>\n\n<p>There’s another consideration for this flag as well. When used with a plain <code>Task</code>, the semantics are clear: if the task faults, the exception is just ignored. However, the same semantics don’t quite work for <code>Task&lt;T&gt;</code>, because in that case the <code>await</code> expression needs to return a value (of type <code>T</code>). It’s not clear what value of <code>T</code> would be appropriate to return in the case of an ignored exception, so the current behavior is to throw an <code>ArgumentOutOfRangeException</code> at runtime. To help catch this at compile time, a new warning <a href=\"https://github.com/dotnet/roslyn-analyzers/pull/6669\">was added</a>: <code>CA2261</code> <code>The ConfigureAwaitOptions.SuppressThrowing is only supported with the non-generic Task</code>. This rule defaults to a warning, but I’d suggest making it an error, since it will always fail at runtime.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Task</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">FromResult</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Causes CA2261 warning at build time and ArgumentOutOfRangeException at runtime.</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">SuppressThrowing</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>As a final note, this is one flag that also affects synchronous blocking in addition to <code>await</code>. Specifically, you can call <code>.GetAwaiter().GetResult()</code> to block on the awaiter returned from <code>ConfigureAwait</code>. The <code>SuppressThrowing</code> flag will cause exceptions to be ignored whether using <code>await</code> or <code>GetAwaiter().GetResult()</code>. Previously, when <code>ConfigureAwait</code> only took a boolean parameter, you could say “ConfigureAwait configures the await”; but now you have to be more specific: “ConfigureAwait returns a configured awaitable”. And it is now possible that the configured awaitable modifies the behavior of blocking code in addition to the behavior of the <code>await</code>. <code>ConfigureAwait</code> is perhaps a slight misnomer now, but it is still <em>primarily</em> intended for configuring <code>await</code>. Of course, blocking on asynchronous code still isn’t recommended.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"n\">Task</span> <span class=\"n\">task</span> <span class=\"p\">=</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">InvalidOperationException</span><span class=\"p\">());</span>\n\n<span class=\"c1\">// Synchronously blocks on the task (not recommended). Does not throw an exception.</span>\n<span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">SuppressThrowing</span><span class=\"p\">).</span><span class=\"n\">GetAwaiter</span><span class=\"p\">().</span><span class=\"n\">GetResult</span><span class=\"p\">();</span></code></pre></figure>\n\n<h3 id=\"configureawaitoptionsforceyielding\">ConfigureAwaitOptions.ForceYielding</h3>\n\n<p>The final flag is the <code>ForceYielding</code> flag. I expect this flag will be rarely used, but when you need it, you need it!</p>\n\n<p><code>ForceYielding</code> is similar to <code>Task.Yield</code>. <code>Yield</code> returns a special awaitable that always claims to be not completed, but schedules its continuations immediately. What this means is that the <code>await</code> always acts asynchronously, yielding to its caller, and then the <code>async</code> method continues executing as soon as possible. The <a href=\"/2012/02/async-and-await.html\">normal behavior for <code>await</code></a> is to check if its awaitable is complete, and if it is, then continue executing synchronously; <code>ForceYielding</code> prevents that synchronous behavior, forcing the <code>await</code> to behave asynchronously.</p>\n\n<p>For myself, I find forcing asynchronous behavior most useful in unit testing. It can also be used to avoid stack dives in some cases. It may also be useful when implementing asynchronous coordination primitives, such as the ones in my AsyncEx library. Essentially, anywhere where you want to force <code>await</code> to behave asynchronously, you can use <code>ForceYielding</code> to accomplish that.</p>\n\n<p>One point that I find interesting is that <code>await</code> with <code>ForceYielding</code> makes the <code>await</code> behave like it does in JavaScript. In JavaScript, <code>await</code> <em>always</em> yields, even if you pass it a resolved promise. In C#, you can now <code>await</code> a completed task with <code>ForceYielding</code>, and <code>await</code> will behave as though it’s not completed, just like JavaScript’s <code>await</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">Main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"n\">CurrentManagedThreadId</span><span class=\"p\">);</span> <span class=\"c1\">// main thread</span>\n  <span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">CompletedTask</span><span class=\"p\">;</span>\n  <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"n\">CurrentManagedThreadId</span><span class=\"p\">);</span> <span class=\"c1\">// main thread</span>\n  <span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">CompletedTask</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">ForceYielding</span><span class=\"p\">);</span>\n  <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"n\">CurrentManagedThreadId</span><span class=\"p\">);</span> <span class=\"c1\">// thread pool thread</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Note that <code>ForceYielding</code> by itself also implies <em>not</em> continuing on the captured context, so it is the same as saying “schedule the rest of this method to the thread pool” or “switch to a thread pool thread”.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// ForceYielding forces await to behave asynchronously.</span>\n<span class=\"c1\">// Lack of ContinueOnCapturedContext means the method continues on a thread pool thread.</span>\n<span class=\"c1\">// Therefore, code after this statement will *always* run on a thread pool thread.</span>\n<span class=\"k\">await</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">ForceYielding</span><span class=\"p\">);</span></code></pre></figure>\n\n<p><code>Task.Yield</code> <em>will</em> resume on the captured context, so it’s not <em>exactly</em> like <code>ForceYielding</code> by itself. It’s actually like <code>ForceYielding</code> with <code>ContinueOnCapturedContext</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// These do the same thing</span>\n<span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">Yield</span><span class=\"p\">();</span>\n<span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">CompletedTask</span><span class=\"p\">.</span><span class=\"n\">ConfigureAwait</span><span class=\"p\">(</span><span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">ForceYielding</span> <span class=\"p\">|</span> <span class=\"n\">ConfigureAwaitOptions</span><span class=\"p\">.</span><span class=\"n\">ContinueOnCapturedContext</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Of course, the real value of <code>ForceYielding</code> is that it can be applied to any task at all. Previously, in the situations where yielding was required, you had to either add a <em>separate</em> <code>await Task.Yield();</code> statement or create a custom awaitable. That’s no longer necessary now that <code>ForceYielding</code> can be applied to any task.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<p>It’s great to see the .NET team still making improvements in <code>async</code>/<code>await</code>, all these years later!</p>\n\n<p>If you’re interested in more of the history and design discussion behind <code>ConfigureAwaitOptions</code>, check out the <a href=\"https://github.com/dotnet/runtime/pull/87067\">pull request</a>. At one point there <a href=\"https://github.com/dotnet/runtime/issues/22144#issuecomment-1561983918\">was</a> a <code>ForceAsynchronousContinuation</code> that was dropped before release. It had a more obscure use case, essentially overriding <code>await</code>’s <a href=\"/2012/12/dont-block-in-asynchronous-code.html\">default behavior of scheduling the <code>async</code> method continuation with <code>ExecuteSynchronously</code></a>. Perhaps a future update will add that back in, or perhaps a future update will add <code>ConfigureAwaitOptions</code> support to value tasks. We’ll just have to see what the future holds!</p>\n"
    },
    {
      "title": "Padding for Overlaid Structs",
      "link": "https://blog.stephencleary.com/2023/10/padding-for-overlaid-structs.html",
      "pubDate": "Thu, 05 Oct 2023 00:00:00 +0000",
      "description": "<p><a href=\"/2023/09/memory-mapped-files-overlaid-structs.html\">Last time</a> we covered the basics of memory-mapped files and how to overlay structs onto the in-memory view of the file. This time we’ll take a look at different techniques to add “padding” or “holes” in our overlaid structs. Sometimes your overlaid struct is a header or container for another struct, which may be one of several different structure types. For example, a binary file may be composed of records, each with an identical header, and one field of that header is the record type, which defines how the remainder of that record should be interpreted.</p>\n\n<p>For this post, we’ll use the same <code>Data</code> struct we were working with last time, but this time we want to add some padding between the first and second data fields:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n  <span class=\"cm\">/* TODO: forty bytes of padding goes here */</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Bonus points if our solution allows accessing that padding as another overlaid struct type.</p>\n\n<h2 id=\"the-ideal-solution-not-supported-safe-fixed-size-buffers\">The Ideal Solution (Not Supported): Safe Fixed-Size Buffers</h2>\n\n<p>Ideally, we could just define a block of memory in our struct. This is similar to how it’s done in unamanged languages:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// The code below currently causes these compiler erorrs.</span>\n<span class=\"c1\">// Error CS0650 Bad array declarator: To declare a managed array the rank specifier precedes the variable&#39;s identifier. To declare a fixed size buffer field, use the fixed keyword before the field type.</span>\n<span class=\"c1\">// Error CS0270 Array size cannot be specified in a variable declaration (try initializing with a &#39;new&#39; expression)</span>\n<span class=\"k\">public</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"kt\">byte</span> <span class=\"n\">_padding</span><span class=\"p\">[</span><span class=\"m\">40</span><span class=\"p\">];</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>There’s actually been some discussion about adding this to C#; the feature is called “safe fixed-size buffers” (a.k.a., “anonymous inline arrays”). It <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/csharp-11.0/low-level-struct-improvements.md#safe-fixed-size-buffers\">didn’t make it into C# 11</a>. The syntax above <a href=\"https://github.com/dotnet/csharplang/issues/1314\">was considered for C# 12</a> but <a href=\"https://github.com/dotnet/csharplang/blob/main/meetings/2023/LDM-2023-05-01.md#fixed-size-buffers\">rejected earlier this year</a>.</p>\n\n<h2 id=\"inline-arrays-net-80--c-12\">Inline Arrays (.NET 8.0 / C# 12)</h2>\n\n<p>Even though the nicer syntax above was rejected, <a href=\"https://github.com/dotnet/csharplang/blob/f2800749ab171e9d6076f4f4bb5d0513f11c234a/proposals/csharp-12.0/inline-arrays.md\">inline arrays</a> themselves have been accepted. Indeed, it is possible that a future version of C# may give us the nice syntax above, <a href=\"https://github.com/dotnet/csharplang/blob/f2800749ab171e9d6076f4f4bb5d0513f11c234a/proposals/csharp-12.0/inline-arrays.md#detailed-design-option-2\">implemented using inline arrays</a>.</p>\n\n<p>For now, we can just deconstruct that ourselves and write by hand what we wish the compiler would write for us:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"n\">Padding40</span> <span class=\"n\">_padding</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n\n<span class=\"na\">  [InlineArray(40)]</span>\n  <span class=\"k\">private</span> <span class=\"k\">struct</span> <span class=\"nc\">Padding40</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"kt\">byte</span> <span class=\"n\">_start</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The <code>InlineArrayAttribute</code> is a bit odd; what it’s actually doing is telling the runtime to repeat the single field in that struct that many times. So <code>Padding40</code> is actually 40 bytes long.</p>\n\n<p>This works fine, as long as you’re on .NET 8.0; the <code>InlineArrayAttribute</code> <a href=\"https://github.com/dotnet/runtime/issues/61135\">requires runtime support</a>. If you define your own <code>InlineArrayAttribute</code> and try to run this on earlier runtimes, the <code>Padding40</code> struct will be the wrong size, and <code>Data</code> will not get the correct amount of padding.</p>\n\n<p>Bonus: we can access the padding as another overlaid struct type by adding this member to the <code>Data</code> struct:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"na\">[UnscopedRef]</span> <span class=\"k\">public</span> <span class=\"k\">ref</span> <span class=\"n\">T</span> <span class=\"n\">PaddingAs</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;()</span> <span class=\"k\">where</span> <span class=\"n\">T</span> <span class=\"p\">:</span> <span class=\"k\">struct</span> <span class=\"err\">=&gt; </span><span class=\"nc\">ref</span> <span class=\"n\">Unsafe</span><span class=\"p\">.</span><span class=\"n\">As</span><span class=\"p\">&lt;</span><span class=\"n\">Padding40</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"k\">ref</span> <span class=\"n\">_padding</span><span class=\"p\">);</span></code></pre></figure>\n\n<h2 id=\"unsafe-fixed-size-buffers\">Unsafe Fixed-Size Buffers</h2>\n\n<p>The nicer syntax above is all about taking an existing feature - <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/unsafe-code?WT.mc_id=DT-MVP-5000058#fixed-size-buffers\">unsafe fixed-size buffers</a> - and allowing them in a safe context. If you’re not on .NET 8.0 yet, you can still use the old-school unsafe fixed-size buffers:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">unsafe</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"k\">fixed</span> <span class=\"kt\">byte</span> <span class=\"n\">_padding</span><span class=\"p\">[</span><span class=\"m\">40</span><span class=\"p\">];</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>This also works fine, but has the drawback of requiring an <code>unsafe</code> context. The <code>Overlay</code> helper from the <a href=\"/2023/09/memory-mapped-files-overlaid-structs.html\">last post</a> is also <code>unsafe</code>, but it would be nice if that was the <em>only</em> <code>unsafe</code> thing and all my overlay structures don’t have to be <code>unsafe</code> just to add padding.</p>\n\n<p>Bonus: we can access the padding as another overlaid struct type by adding this member to the <code>Data</code> struct:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">unsafe</span> <span class=\"k\">ref</span> <span class=\"n\">T</span> <span class=\"n\">PaddingAs</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;()</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">fixed</span> <span class=\"p\">(</span><span class=\"kt\">byte</span><span class=\"p\">*</span> <span class=\"n\">p</span> <span class=\"p\">=</span> <span class=\"n\">_padding</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"k\">ref</span> <span class=\"n\">Unsafe</span><span class=\"p\">.</span><span class=\"n\">AsRef</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>It does seem a bit awkward to me, though. The <code>fixed</code> statement is informing the GC that <code>_padding</code> can’t be moved… but since this is an overlaid structure (at the address of a memory-mapped view), it can’t be moved <em>anyway</em>. So it seems superfluous. Probably <a href=\"https://stackoverflow.com/a/22204244/263693\">not a lot of overhead</a>; it’s just that the code seems awkward: “pin this thing in memory, read the pointer value, and then unpin it”.</p>\n\n<h2 id=\"explicit-struct-layout\">Explicit Struct Layout</h2>\n\n<p>Let’s try an old-school, p/Invoke-style approach:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"na\">[StructLayout(LayoutKind.Explicit)]</span>\n<span class=\"k\">private</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n<span class=\"na\">  [FieldOffset(0)]</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n<span class=\"na\">  [FieldOffset(44)]</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>I was curious to know if this approach worked, and it does. I don’t really recommend it, since you have to explicitly lay out your entire struct. Also, there isn’t a good way of referencing the padding.</p>\n\n<h2 id=\"marshalling-doesnt-work\">Marshalling (Doesn’t Work)</h2>\n\n<p>Just as a side note, <em>marshalling</em> directives don’t work. For example:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// Does not work!</span>\n<span class=\"na\">[StructLayout(LayoutKind.Sequential)]</span>\n<span class=\"k\">private</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n<span class=\"na\">  [MarshalAs(UnmanagedType.ByValArray, SizeConst = 40)]</span>\n  <span class=\"k\">private</span> <span class=\"kt\">byte</span><span class=\"p\">[]</span> <span class=\"n\">_padding</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>This works if we’re doing p/Invoke, because it’s marshalling (copying) the structure to/from unmanaged code. Since we’re <em>overlaying</em> the structure directly in memory, marshalling directives like this don’t work.</p>\n\n<h2 id=\"explicit-fields\">Explicit Fields</h2>\n\n<p>Of course, you can always define padding using multiple explicit fields. The resulting code is ugly (and IMO more awkward to maintain), but it works fine:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_padding0</span><span class=\"p\">,</span> <span class=\"n\">_padding1</span><span class=\"p\">,</span> <span class=\"n\">_padding2</span><span class=\"p\">,</span> <span class=\"n\">_padding3</span><span class=\"p\">,</span> <span class=\"n\">_padding4</span><span class=\"p\">,</span> <span class=\"n\">_padding5</span><span class=\"p\">,</span> <span class=\"n\">_padding6</span><span class=\"p\">,</span> <span class=\"n\">_padding7</span><span class=\"p\">,</span> <span class=\"n\">_padding8</span><span class=\"p\">,</span> <span class=\"n\">_padding9</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>I’m using <code>int</code> fields above so I only have to type 10 of them, as opposed to 40 <code>byte</code>-sized fields.</p>\n\n<p>You can even do a bonus round with this approach by referencing the first padding member:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"na\">[UnscopedRef]</span> <span class=\"k\">public</span> <span class=\"k\">ref</span> <span class=\"n\">T</span> <span class=\"n\">PaddingAs</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;()</span> <span class=\"k\">where</span> <span class=\"n\">T</span> <span class=\"p\">:</span> <span class=\"k\">struct</span> <span class=\"err\">=&gt; </span><span class=\"nc\">ref</span> <span class=\"n\">Unsafe</span><span class=\"p\">.</span><span class=\"n\">As</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"k\">ref</span> <span class=\"n\">_padding0</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>Of course, if you have lots of padding (or multiple padding sections), this can get tedious.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Since I’m working on a greenfield project, I’ve chosen to use the .NET 8.0-style <code>InlineArrayAttribute</code> approach, with the hope that the syntax becomes nicer in future versions of C#. If I had to support older .NET versions, I’d probably take the “Unsafe Fixed-Size Buffers” approach, even though it requires <code>unsafe</code> contexts for all those overlaid structs.</p>\n\n<p>I hope this has been helpful to you during your memory-mapping adventures!</p>\n"
    },
    {
      "title": "Memory-Mapped Files and Overlaid Structs",
      "link": "https://blog.stephencleary.com/2023/09/memory-mapped-files-overlaid-structs.html",
      "pubDate": "Thu, 28 Sep 2023 00:00:00 +0000",
      "description": "<p>It has been a long, long time since I’ve used memory-mapped files - I think the last time was before .NET existed (!). Recently, I had a need to work with memory-mapped files in C#, and I gathered together a few resources that explain how to do it - specifically, how to map a file into memory and then “overlay” a structure on top of that memory. Since it took me a while to figure this out (and I learned about some cool upcoming features along the way), I thought I’d write this up into a proper post or two.</p>\n\n<h2 id=\"memory-mapped-files\">Memory-Mapped Files</h2>\n\n<p>Memory-mapped files are a pretty cool technique, where instead of reading disk data into memory directly, you can <em>map</em> it into the memory space of your process very quickly. Once it’s mapped into your process memory, reading from that memory will read from the disk (as necessary), and writing to that memory will write out to the file (eventually). You can do cool things like create a huge file mapping (way larger than your memory), and it will Just Work, paging memory in and out of your process behind the scenes. There’s a ton of information about memory-mapped files out there; if you’re on Windows, I like <a href=\"https://www.amazon.com/Windows-Internals-Part-architecture-management/dp/0735684189?crid=1R9XTJDVYVT4R&amp;qid=1695906423&amp;linkCode=ll1&amp;tag=stepheclearys-20&amp;linkId=a9d94c8104abdd7c669e33fd6ea2d430&amp;language=en_US&amp;ref_=as_li_ss_tl\" rel=\"nofollow\">Windows Internals</a> - Part 1 covers the memory manager (including memory-mapped files), and Part 2 has a few additional details on how memory-mapped files interact with the cache manager.</p>\n\n<p>In C#, mapping a file into memory isn’t terribly complex. First, you open the file (i.e., create a <code>FileStream</code> object). Then, you create a file mapping. Tip on the file mapping: if you’re mapping an existing file, you can pass <code>0</code> for the file length to just map the entire file. Finally, you create a view on that file mapping - and this is the step that actually maps the file into the memory space for your process. You <em>can</em> create a view over the entire file, but if you’re dealing with a very large file mapping, it’s common to create partial views as you need them.</p>\n\n<p>This code will create a new file, a file mapping (specifying 1000 bytes as the length of the file; the file is immediately grown to this size), and a single view over the entire file:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">using</span> <span class=\"nn\">FileStream</span> <span class=\"n\">file</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileStream</span><span class=\"p\">(</span><span class=\"s\">@&quot;tmp.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span> <span class=\"n\">FileAccess</span><span class=\"p\">.</span><span class=\"n\">ReadWrite</span><span class=\"p\">,</span>\n    <span class=\"n\">FileShare</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">,</span> <span class=\"m\">4096</span><span class=\"p\">,</span> <span class=\"n\">FileOptions</span><span class=\"p\">.</span><span class=\"n\">RandomAccess</span><span class=\"p\">);</span>\n<span class=\"k\">using</span> <span class=\"nn\">MemoryMappedFile</span> <span class=\"n\">mapping</span> <span class=\"p\">=</span> <span class=\"n\">MemoryMappedFile</span><span class=\"p\">.</span><span class=\"n\">CreateFromFile</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"p\">,</span> <span class=\"m\">1000</span><span class=\"p\">,</span>\n    <span class=\"n\">MemoryMappedFileAccess</span><span class=\"p\">.</span><span class=\"n\">ReadWrite</span><span class=\"p\">,</span> <span class=\"n\">HandleInheritability</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">,</span> <span class=\"n\">leaveOpen</span><span class=\"p\">:</span> <span class=\"k\">true</span><span class=\"p\">);</span>\n<span class=\"k\">using</span> <span class=\"nn\">MemoryMappedViewAccessor</span> <span class=\"n\">view</span> <span class=\"p\">=</span> <span class=\"n\">mapping</span><span class=\"p\">.</span><span class=\"n\">CreateViewAccessor</span><span class=\"p\">();</span></code></pre></figure>\n\n<p>At this point, you have a <code>view</code>, which is a handle (actually a pointer) to the part of your process’ memory that actually represents the file contents. What’s really nice about this code is that it’s portable; the same code works on Linux and Windows (and presumably Mac and mobile platforms, though I haven’t tried those). However, pointers aren’t a great interface, especially in a managed language like C#. <code>MemoryMappedViewAccessor</code> has a bunch of… well… <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.io.memorymappedfiles.memorymappedviewaccessor?view=net-7.0&amp;WT.mc_id=DT-MVP-5000058#methods\"><em>awkward</em> methods</a> that are essentially “read a signed 16-bit integer at this offset”, “write an unsigned 32-bit integer at this offset”, etc. You can also copy a struct into and out of the view, but I don’t want to go through the trouble of doing a file mapping just to turn around and serialize a struct anyway.</p>\n\n<p>For convenience, unmanaged languages commonly overlay a structure onto the mapped memory. This approach allows you to define the file structure as an actual <code>struct</code> and then read/write fields in that struct instead of serializing values to memory or view offsets. “Overlapped structures” might be a more common term than “overlaid structures”, but I want to avoid any confusion with <code>OVERLAPPED</code>, so I’m using the term “overlaid structures” in these posts.</p>\n\n<p>If you’re in an unmanaged language like C++, you can just <code>reinterpret_cast</code> your file mapping view pointer to a structure pointer, and that’s it: you’ve got a struct at the same memory address as your file view! I found that there was much less information about overlaying structs in C#, though. So, let’s see how to do the same thing in C#!</p>\n\n<h2 id=\"overlaid-structs\">Overlaid Structs</h2>\n\n<p>After a bit of experimentation, this is what I ended up with:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">sealed</span> <span class=\"k\">unsafe</span> <span class=\"k\">class</span> <span class=\"nc\">Overlay</span> <span class=\"p\">:</span> <span class=\"n\">IDisposable</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">MemoryMappedViewAccessor</span> <span class=\"n\">_view</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"kt\">byte</span><span class=\"p\">*</span> <span class=\"n\">_pointer</span><span class=\"p\">;</span>\n\n  <span class=\"k\">public</span> <span class=\"nf\">Overlay</span><span class=\"p\">(</span><span class=\"n\">MemoryMappedViewAccessor</span> <span class=\"n\">view</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">_view</span> <span class=\"p\">=</span> <span class=\"n\">view</span><span class=\"p\">;</span>\n    <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">SafeMemoryMappedViewHandle</span><span class=\"p\">.</span><span class=\"n\">AcquirePointer</span><span class=\"p\">(</span><span class=\"k\">ref</span> <span class=\"n\">_pointer</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Dispose</span><span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">_view</span><span class=\"p\">.</span><span class=\"n\">SafeMemoryMappedViewHandle</span><span class=\"p\">.</span><span class=\"n\">ReleasePointer</span><span class=\"p\">();</span>\n\n  <span class=\"k\">public</span> <span class=\"k\">ref</span> <span class=\"n\">T</span> <span class=\"n\">As</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;()</span> <span class=\"k\">where</span> <span class=\"n\">T</span> <span class=\"p\">:</span> <span class=\"k\">struct</span> <span class=\"err\">=&gt; </span><span class=\"nc\">ref</span> <span class=\"n\">Unsafe</span><span class=\"p\">.</span><span class=\"n\">AsRef</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"n\">_pointer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>This is an <code>unsafe</code> type, but ideally this is the only place where <code>unsafe</code> is necessary.</p>\n\n<p><code>Overlay</code> is mainly just a pointer - the pointer to the view of the file that has been mapped into your process’ memory. It also has a <code>MemoryMappedViewAccessor</code> member, but that’s just used to free the pointer when the <code>Overlay</code> instance is disposed.</p>\n\n<p><code>Overlay</code> has a single notable member: <code>As&lt;T&gt;()</code>, which allows you to get a reference to a struct that overlays the mapped memory view.</p>\n\n<div class=\"alert alert-info\">\n  <p><i class=\"fa fa-info-circle fa-2x pull-left\"></i></p>\n\n  <p>On Windows (at least), the <code>SafeMemoryMappedViewHandle</code> handle actually <em>is</em> a pointer, and the <code>AcquirePointer</code> and <code>ReleasePointer</code> calls increment and decrement a reference counter for that handle. <code>Overlay</code> could be designed very differently (and more efficiently) if it cast the <code>SafeMemoryMappedViewHandle</code> handle value to a pointer.</p>\n\n  <p>However, on other platforms, I’m not sure if <code>SafeMemoryMappedViewHandle</code> is actually a pointer or not, so I’ve stuck with this safer implementation just to make sure the code is portable.</p>\n</div>\n\n<p>If you are OK with assuming <code>SafeMemoryMappedViewHandle</code> is a pointer, you can use this instead of <code>Overlay</code>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">class</span> <span class=\"nc\">MemoryMappedViewAccessorExtensions</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">unsafe</span> <span class=\"k\">ref</span> <span class=\"n\">T</span> <span class=\"n\">As</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"k\">this</span> <span class=\"n\">MemoryMappedViewAccessor</span> <span class=\"n\">accessor</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"n\">T</span> <span class=\"p\">:</span> <span class=\"k\">struct</span> <span class=\"err\">=&gt;</span>\n    <span class=\"k\">ref</span> <span class=\"n\">Unsafe</span><span class=\"p\">.</span><span class=\"n\">AsRef</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"n\">accessor</span><span class=\"p\">.</span><span class=\"n\">SafeMemoryMappedViewHandle</span><span class=\"p\">.</span><span class=\"n\">DangerousGetHandle</span><span class=\"p\">().</span><span class=\"n\">ToPointer</span><span class=\"p\">());</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>There’s a fair amount of “unsafe” and “dangerous” in that code, though, and it also makes some implementation assumptions (specifically, that <code>SafeMemoryMappedViewHandle</code>’s handle is an actual <em>pointer to memory</em>). So, for safety, I’m just sticking with <code>Overlay</code> with its explicit <code>AcquirePointer</code> and <code>ReleasePointer</code> calls.</p>\n\n<h2 id=\"using-overlay\">Using Overlay</h2>\n\n<p>First, define your <code>struct</code> type, keeping in mind that the in-memory layout (including packing/padding) must reflect the on-disk file structure. Then, you can map a file just like the above code, create an <code>Overlay</code> type, and acquire a struct reference. At that point, you can read or write the struct as desired.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">First</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">Second</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">using</span> <span class=\"nn\">FileStream</span> <span class=\"n\">file</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileStream</span><span class=\"p\">(</span><span class=\"s\">@&quot;tmp.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span> <span class=\"n\">FileAccess</span><span class=\"p\">.</span><span class=\"n\">ReadWrite</span><span class=\"p\">,</span>\n    <span class=\"n\">FileShare</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">,</span> <span class=\"m\">4096</span><span class=\"p\">,</span> <span class=\"n\">FileOptions</span><span class=\"p\">.</span><span class=\"n\">RandomAccess</span><span class=\"p\">);</span>\n<span class=\"k\">using</span> <span class=\"nn\">MemoryMappedFile</span> <span class=\"n\">mapping</span> <span class=\"p\">=</span> <span class=\"n\">MemoryMappedFile</span><span class=\"p\">.</span><span class=\"n\">CreateFromFile</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"p\">,</span> <span class=\"m\">1000</span><span class=\"p\">,</span>\n    <span class=\"n\">MemoryMappedFileAccess</span><span class=\"p\">.</span><span class=\"n\">ReadWrite</span><span class=\"p\">,</span> <span class=\"n\">HandleInheritability</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">,</span> <span class=\"n\">leaveOpen</span><span class=\"p\">:</span> <span class=\"k\">true</span><span class=\"p\">);</span>\n<span class=\"k\">using</span> <span class=\"nn\">MemoryMappedViewAccessor</span> <span class=\"n\">view</span> <span class=\"p\">=</span> <span class=\"n\">mapping</span><span class=\"p\">.</span><span class=\"n\">CreateViewAccessor</span><span class=\"p\">();</span>\n<span class=\"k\">using</span> <span class=\"nn\">Overlay</span> <span class=\"n\">overlay</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Overlay</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">);</span>\n<span class=\"k\">ref</span> <span class=\"n\">Data</span> <span class=\"n\">data</span> <span class=\"p\">=</span> <span class=\"k\">ref</span> <span class=\"n\">overlay</span><span class=\"p\">.</span><span class=\"n\">As</span><span class=\"p\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">&gt;();</span>\n<span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">First</span> <span class=\"p\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">Second</span> <span class=\"p\">=</span> <span class=\"m\">2</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Run the code above (works in LINQPad!), and you’ll end up with a <code>tmp.dat</code> file 1000 bytes long, with the first four bytes having the value of <code>First</code> (1) and the second four bytes having the value of <code>Second</code> (2). Note that since you’re reading/writing structures in memory, whatever endianness your machine is will determine the endianness of the binary file. Go ahead and pop it open in a hex editor (there’s an online one called <a href=\"https://hexed.it/\">HexEd.it</a>), and take a look at the binary file itself.</p>\n\n<h2 id=\"endianness\">Endianness</h2>\n\n<p>If you’re working with portable file formats, handling endianness is a necessity. Values in files on disk must be little-endian or big-endian, regardless of what processor happens to be reading or writing them. I recommend handling the differences in code with helpers, like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">class</span> <span class=\"nc\">OverlayHelpers</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">ReadBigEndian</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">bigEndian</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n      <span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">IsLittleEndian</span> <span class=\"p\">?</span> <span class=\"n\">BinaryPrimitives</span><span class=\"p\">.</span><span class=\"n\">ReverseEndianness</span><span class=\"p\">(</span><span class=\"n\">bigEndian</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">bigEndian</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">WriteBigEndian</span><span class=\"p\">(</span><span class=\"k\">out</span> <span class=\"kt\">int</span> <span class=\"n\">bigEndian</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"k\">value</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n      <span class=\"n\">bigEndian</span> <span class=\"p\">=</span> <span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">IsLittleEndian</span> <span class=\"p\">?</span> <span class=\"n\">BinaryPrimitives</span><span class=\"p\">.</span><span class=\"n\">ReverseEndianness</span><span class=\"p\">(</span><span class=\"k\">value</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"k\">value</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">ReadLittleEndian</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">littleEndian</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n      <span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">IsLittleEndian</span> <span class=\"p\">?</span> <span class=\"n\">littleEndian</span> <span class=\"p\">:</span> <span class=\"n\">BinaryPrimitives</span><span class=\"p\">.</span><span class=\"n\">ReverseEndianness</span><span class=\"p\">(</span><span class=\"n\">littleEndian</span><span class=\"p\">);</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">WriteLittleEndian</span><span class=\"p\">(</span><span class=\"k\">out</span> <span class=\"kt\">int</span> <span class=\"n\">littleEndian</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"k\">value</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n      <span class=\"n\">littleEndian</span> <span class=\"p\">=</span> <span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">IsLittleEndian</span> <span class=\"p\">?</span> <span class=\"k\">value</span> <span class=\"p\">:</span> <span class=\"n\">BinaryPrimitives</span><span class=\"p\">.</span><span class=\"n\">ReverseEndianness</span><span class=\"p\">(</span><span class=\"k\">value</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The helpers above let you read/write big- or little-endian values, regardless of the endianness of the current machine. They can be used in your structure definitions as such:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"k\">public</span> <span class=\"k\">struct</span> <span class=\"nc\">Data</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Layout</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_first</span><span class=\"p\">;</span>\n  <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"n\">_second</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Convenience accessors</span>\n  <span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">First</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">readonly</span> <span class=\"k\">get</span> <span class=\"p\">=&gt;</span> <span class=\"n\">OverlayHelpers</span><span class=\"p\">.</span><span class=\"n\">ReadBigEndian</span><span class=\"p\">(</span><span class=\"n\">_first</span><span class=\"p\">);</span>\n    <span class=\"k\">set</span> <span class=\"p\">=&gt;</span> <span class=\"n\">OverlayHelpers</span><span class=\"p\">.</span><span class=\"n\">WriteBigEndian</span><span class=\"p\">(</span><span class=\"k\">out</span> <span class=\"n\">_first</span><span class=\"p\">,</span> <span class=\"k\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">Second</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">readonly</span> <span class=\"k\">get</span> <span class=\"p\">=&gt;</span> <span class=\"n\">OverlayHelpers</span><span class=\"p\">.</span><span class=\"n\">ReadBigEndian</span><span class=\"p\">(</span><span class=\"n\">_second</span><span class=\"p\">);</span>\n    <span class=\"k\">set</span> <span class=\"p\">=&gt;</span> <span class=\"n\">OverlayHelpers</span><span class=\"p\">.</span><span class=\"n\">WriteBigEndian</span><span class=\"p\">(</span><span class=\"k\">out</span> <span class=\"n\">_second</span><span class=\"p\">,</span> <span class=\"k\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now the same program as above will always write the “first” and “second” fields as 32-bit signed big-endian values:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-csharp\" data-lang=\"csharp\"><span class=\"c1\">// (this is the same code as above)</span>\n<span class=\"k\">using</span> <span class=\"nn\">FileStream</span> <span class=\"n\">file</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileStream</span><span class=\"p\">(</span><span class=\"s\">@&quot;tmp.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">FileMode</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span> <span class=\"n\">FileAccess</span><span class=\"p\">.</span><span class=\"n\">ReadWrite</span><span class=\"p\">,</span>\n    <span class=\"n\">FileShare</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">,</span> <span class=\"m\">4096</span><span class=\"p\">,</span> <span class=\"n\">FileOptions</span><span class=\"p\">.</span><span class=\"n\">RandomAccess</span><span class=\"p\">);</span>\n<span class=\"k\">using</span> <span class=\"nn\">MemoryMappedFile</span> <span class=\"n\">mapping</span> <span class=\"p\">=</span> <span class=\"n\">MemoryMappedFile</span><span class=\"p\">.</span><span class=\"n\">CreateFromFile</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"p\">,</span> <span class=\"m\">1000</span><span class=\"p\">,</span>\n    <span class=\"n\">MemoryMappedFileAccess</span><span class=\"p\">.</span><span class=\"n\">ReadWrite</span><span class=\"p\">,</span> <span class=\"n\">HandleInheritability</span><span class=\"p\">.</span><span class=\"n\">None</span><span class=\"p\">,</span> <span class=\"n\">leaveOpen</span><span class=\"p\">:</span> <span class=\"k\">true</span><span class=\"p\">);</span>\n<span class=\"k\">using</span> <span class=\"nn\">MemoryMappedViewAccessor</span> <span class=\"n\">view</span> <span class=\"p\">=</span> <span class=\"n\">mapping</span><span class=\"p\">.</span><span class=\"n\">CreateViewAccessor</span><span class=\"p\">();</span>\n<span class=\"k\">using</span> <span class=\"nn\">Overlay</span> <span class=\"n\">overlay</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Overlay</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">);</span>\n<span class=\"k\">ref</span> <span class=\"n\">Data</span> <span class=\"n\">data</span> <span class=\"p\">=</span> <span class=\"k\">ref</span> <span class=\"n\">overlay</span><span class=\"p\">.</span><span class=\"n\">As</span><span class=\"p\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">&gt;();</span>\n<span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">First</span> <span class=\"p\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">Second</span> <span class=\"p\">=</span> <span class=\"m\">2</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Now, the code is completely portable: any .NET runtime that supports memory-mapped files (which AFAIK is all of them) will run this code, giving you the ability to define portable binary file formats using overlaid structures.</p>\n\n<h2 id=\"a-word-of-warning-alignment\">A Word of Warning: Alignment</h2>\n\n<p>Since you’re overlaying structures directly into memory addresses, you have to handle all the alignment requirements yourself. Some more common architectures such as x86/x64 don’t care about alignment and allow you to, e.g., define an <code>int</code> field at an offset of <code>1</code>. Other architectures do not allow unaligned access at all.</p>\n\n<p>As a general guideline, align your structure members by their own size. E.g., an <code>int</code> is 4 bytes, so it should be aligned on a 4-byte boundary. Put another way, the offset of an <code>int</code> field from the beginning of the <code>struct</code> should be evenly divisible by 4. Same for other types: <code>long</code> should be aligned on an 8-byte boundary, while <code>byte</code> should be aligned on a 1-byte boundary (i.e., anywhere).</p>\n\n<h2 id=\"a-word-of-warning-exceptions\">A Word of Warning: Exceptions</h2>\n\n<p>Memory mapped files give you one kind of convenience by mapping files into memory, but the counterpoint is that I/O exceptions may not happen exactly when you expect them to.</p>\n\n<p>When reading a file using normal I/O calls, if the read fails, then it fails right at that time. When using memory-mapped files, reads <em>from memory</em> may cause an I/O exception. This is true even if a previous read from that same memory succeeded.</p>\n\n<p>Similarly, if you write to a file using normal I/O calls, any failures are reported immediately. With memory-mapped files, <em>memory</em> writes may cause an I/O exception. And since memory-mapped files are lazily flushed to disk, I/O exceptions may be delayed until the view is flushed (during disposal).</p>\n\n<h2 id=\"next-time\">Next Time</h2>\n\n<p>I hope this has been helpful! If anyone out there knows a way to eliminate the <code>unsafe</code> code in <code>Overlay</code>, I’d love to hear it!</p>\n\n<p><a href=\"/2023/10/padding-for-overlaid-structs.html\">Next time</a> I’m planning to write a bit about overlaying structures with holes in them, which is a useful technique when you have “header” or “container” structures that wrap other structures possibly of different types.</p>\n"
    },
    {
      "title": "Grounded ChatGPT",
      "link": "https://blog.stephencleary.com/2023/05/grounded-chatgpt.html",
      "pubDate": "Thu, 18 May 2023 00:00:00 +0000",
      "description": "<p>So, there’s this thing you may have heard of called ChatGPT. A lot of people (myself included) have thought “OK, nice toy. It’s pretty good at producing human-sounding text. But I want to run it <em>on my own data</em> without becoming a data scientist and spending a few hundred thousand dollars in training costs.”</p>\n\n<p>Then someone pointed out to me there’s already a technique for this called Retrieval Augmented Generation, and in fact there’s some <a href=\"https://github.com/Azure-Samples/azure-search-openai-demo\">sample code right there</a> showing how to do it.</p>\n\n<h2 id=\"retrieval-augmented-generation\">Retrieval Augmented Generation</h2>\n\n<p>To save you a Google search (or ChatGPT query?), here’s my super-simple description of this technique: when the user asks a question, instead of just giving it to ChatGPT directly, first do a <em>search</em> for that question over your own data, and combine the search results <em>along with</em> the user’s question as the ChatGPT input.</p>\n\n<p>This technique “grounds” ChatGPT, giving it your own data alongside the user’s question. If you structure your input properly, you can influence ChatGPT to produce relevant results, even including source references. With this technique, ChatGPT is able to produce much better results, without the need for training or even fine-tuning the model itself.</p>\n\n<h2 id=\"sample-code\">Sample Code</h2>\n\n<p>The official sample referenced above is in Python. And I love Python. As a language, I mean. But it’s been… um… 25 years or so since I’ve used it. Definitely rusty. So I decided to write my own sample (heavily influenced by the official one) in C#. And using local Docker containers as much as possible instead of creating a bunch of Azure resources.</p>\n\n<p>You can find my <a href=\"https://github.com/StephenCleary/grounded-chatgpt\">C# Retrieval Augmented Generation code on GitHub</a>. It’s not production-ready, but it gets the general point across. You can use it pretty easily to “teach” ChatGPT about modern events or your own custom data. It uses Elasticsearch and Seq (both in local Docker containers), preserving its data in local Docker volumes. And it has exhaustive logging out of the box, so you can always review what APIs were called and how exactly they work. My code does use the Azure OpenAI API to talk to ChatGPT, but everything else is in local Docker containers.</p>\n\n<h2 id=\"more-implementation-details\">More Implementation Details</h2>\n\n<p>When you use this sample code to do a retrieval-augmented generation, what actually happens is this:</p>\n\n<p>The user’s question is sent to ChatGPT to extract search keywords, using this template:</p>\n\n<pre><code>Below is a question asked by the user that needs to be answered by searching.\nGenerate a search query based on names and concepts extracted from the question.\n\n### Question:\n{question}\n\n### Search query:\n</code></pre>\n\n<p>ChatGPT is pretty good at generating a search query from a user question; I set the <code>temperature</code> to zero to ensure there’s no randomness in this call.</p>\n\n<p>Next, this ChatGPT response is sent to Elasticsearch (just as a <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html\">simple query string</a>).</p>\n\n<p>The results of the Elasticsearch search are then formatted and injected into a ChatGPT prompt that looks like this:</p>\n\n<pre><code>Answer the following question. You may include multiple answers, but each answer may only use the data provided in the References below.\nEach Reference has a number followed by tab and then its data.\nUse square brakets to indicate which Reference was used, e.g. [7]\nDon't combine References; list each Reference separately, e.g. [1][2]\nIf you cannot answer using the References below, say you don't know. Only provide answers that include at least one Reference name.\nIf asking a clarifying question to the user would help, ask the question.\nDo not comment on unused References.\n\n### References:\n{sources}\n</code></pre>\n\n<p>The result is then post-processed to extract the quoted references and change them to hyperlinks.</p>\n\n<h2 id=\"have-fun\">Have Fun!</h2>\n\n<p>I’ve been pretty pleased with the results, even though I’m using very simplistic source processing, and a lexical search instead of a more proper semantic/vector search. Even with those limitations, the results are pretty impressive!</p>\n\n<p>That’s all I have to say for now. Have fun!</p>\n"
    }
  ],
  "collected_at": "2025-06-27T01:19:02.480289"
}