{
  "name": "Eric Lippert",
  "url": "https://ericlippert.com/",
  "type": "blog",
  "topics": [
    "language design",
    "performance",
    "compiler"
  ],
  "sample_posts": [
    {
      "title": "Bean Machine Retrospective, part 9",
      "link": "https://ericlippert.com/2023/03/21/bean-machine-retrospective-part-9/",
      "pubDate": "Tue, 21 Mar 2023 18:34:38 +0000",
      "description": "I wanted to implement concise &#8220;pattern matching&#8221; in Python, a language which unlike C#, F#, Scala, and so on, does not have any pattern matching built in. Logically a pattern is just a predicate: a function which takes a value &#8230; <a href=\"https://ericlippert.com/2023/03/21/bean-machine-retrospective-part-9/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "Bean Machine Retrospective, part 8",
      "link": "https://ericlippert.com/2023/02/23/bean-machine-retrospective-part-8/",
      "pubDate": "Thu, 23 Feb 2023 20:54:17 +0000",
      "description": "Before getting into the details of how my combinator-inspired source code transformation system works, I should say first, what is a general overview of the system? and second, why did I build it at all? In my experience, a typical &#8230; <a href=\"https://ericlippert.com/2023/02/23/bean-machine-retrospective-part-8/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "Bean Machine Retrospective, part 7",
      "link": "https://ericlippert.com/2023/02/08/bean-machine-retrospective-part-7/",
      "pubDate": "Wed, 08 Feb 2023 18:19:08 +0000",
      "description": "How do we write a compiler in a typical general-purpose line-of-business OO programming language such as Python, C#, Java, and so on? Compilers are programs, so we could make the question more general: how do we write programs? The basic &#8230; <a href=\"https://ericlippert.com/2023/02/08/bean-machine-retrospective-part-7/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "The names of birds, part 4",
      "link": "https://ericlippert.com/2023/02/03/the-names-of-birds-part-4/",
      "pubDate": "Fri, 03 Feb 2023 17:17:57 +0000",
      "description": "The European starling is a lovely looking bird, though territorial, noisy and aggressive up close. Unfortunately, they are very invasive in North America. Most of the hundreds of millions of European starlings now living in the Americas can be found &#8230; <a href=\"https://ericlippert.com/2023/02/03/the-names-of-birds-part-4/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "The names of birds, part 3",
      "link": "https://ericlippert.com/2023/02/01/the-names-of-birds-part-3/",
      "pubDate": "Wed, 01 Feb 2023 17:01:15 +0000",
      "description": "In the autumn of last year my friend Joan and I went on a little trip up to the Skagit valley north of Seattle to photograph birds of prey; I managed to get a blurry but recognizable shot of this &#8230; <a href=\"https://ericlippert.com/2023/02/01/the-names-of-birds-part-3/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "The names of birds, part 2",
      "link": "https://ericlippert.com/2023/01/30/the-names-of-birds-part-2/",
      "pubDate": "Mon, 30 Jan 2023 15:39:00 +0000",
      "description": "Reader &#8220;Joel&#8221; had an insightful comment on the first part of this series which I thought deserved a short episode of its own. Recall that we proved the theorem &#8220;if a compositional forest contains a mockingbird then every bird in &#8230; <a href=\"https://ericlippert.com/2023/01/30/the-names-of-birds-part-2/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "The names of birds, part 1",
      "link": "https://ericlippert.com/2023/01/17/the-names-of-birds-part-1/",
      "pubDate": "Tue, 17 Jan 2023 18:05:00 +0000",
      "description": "For the next part in my Bean Machine retrospective to make sense I&#8217;ll need to make a short digression. In looking back on the almost 20 years I&#8217;ve been blogging, it is surprising to me that I&#8217;ve only briefly alluded &#8230; <a href=\"https://ericlippert.com/2023/01/17/the-names-of-birds-part-1/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "Bean Machine Retrospective, part 6",
      "link": "https://ericlippert.com/2023/01/05/bean-machine-retrospective-part-6/",
      "pubDate": "Thu, 05 Jan 2023 17:13:00 +0000",
      "description": "Happy New Year all! Last time I briefly described the basic strategy of the Beanstalk compiler: transform the source code&#160;of each queried or observed function (and transitively their callees) into an equivalent program which&#160;partially evaluates&#160;the model,&#160;accumulating a graph&#160;as it goes. &#8230; <a href=\"https://ericlippert.com/2023/01/05/bean-machine-retrospective-part-6/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "Bean Machine Retrospective, part 5",
      "link": "https://ericlippert.com/2022/12/20/bean-machine-retrospective-part-5/",
      "pubDate": "Tue, 20 Dec 2022 17:45:00 +0000",
      "description": "Let&#8217;s take another look at the &#8220;hello world&#8221; example and think more carefully about what is actually going on: There&#8217;s a lot going on here. Let&#8217;s start by clearing up what the returned values of the random variables are. It &#8230; <a href=\"https://ericlippert.com/2022/12/20/bean-machine-retrospective-part-5/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    },
    {
      "title": "I want toast",
      "link": "https://ericlippert.com/2022/12/14/i-want-toast/",
      "pubDate": "Wed, 14 Dec 2022 21:14:09 +0000",
      "description": "I&#8217;ll get back to Bean Machine and Beanstalk in the next episode; today, a brief diversion to discuss a general principle of language design and congratulate some of my former colleagues. Back when we were all at Waterloo, a bunch &#8230; <a href=\"https://ericlippert.com/2022/12/14/i-want-toast/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
    }
  ],
  "collected_at": "2025-06-27T01:19:01.768346"
}