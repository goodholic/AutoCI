{
  "source": "github_patterns",
  "url": "https://github.com/Perfare/Il2CppDumper",
  "type": "project_documentation",
  "content": "# Il2CppDumper\n\n[![Build status](https://ci.appveyor.com/api/projects/status/anhqw33vcpmp8ofa?svg=true)](https://ci.appveyor.com/project/Perfare/il2cppdumper/branch/master/artifacts)\n\n中文说明请戳[这里](README.zh-CN.md)\n\nUnity il2cpp reverse engineer\n\n## Features\n\n* Complete DLL restore (except code), can be used to extract `MonoBehaviour` and `MonoScript`\n* Supports ELF, ELF64, Mach-O, PE, NSO and WASM format\n* Supports Unity 5.3 - 2022.2\n* Supports generate IDA, Ghidra and Binary Ninja scripts to help them better analyze il2cpp files\n* Supports generate structures header file\n* Supports Android memory dumped `libil2cpp.so` file to bypass protection\n* Support bypassing simple PE protection\n\n## Usage\n\nRun `Il2CppDumper.exe` and choose the il2cpp executable file and `global-metadata.dat` file, then enter the information as prompted\n\nThe program will then generate all the output files in current working directory\n\n### Command-line\n\n```\nIl2CppDumper.exe <executable-file> <global-metadata> <output-directory>\n```\n\n### Outputs\n\n#### DummyDll\n\nFolder, containing all restored dll files\n\nUse [dnSpy](https://github.com/0xd4d/dnSpy), [ILSpy](https://github.com/icsharpcode/ILSpy) or other .Net decompiler tools to view\n\nCan be used to extract Unity `MonoBehaviour` and `MonoScript`, for [UtinyRipper](https://github.com/mafaca/UtinyRipper), [UABE](https://7daystodie.com/forums/showthread.php?22675-Unity-Assets-Bundle-Extractor)\n\n#### ida.py\n\nFor IDA\n\n#### ida_with_struct.py\n\nFor IDA, read il2cpp.h file and apply structure information in IDA\n\n#### il2cpp.h\n\nstructure information header file\n\n#### ghidra.py\n\nFor Ghidra\n\n#### Il2CppBinaryNinja\n\nFor BinaryNinja\n\n#### ghidra_wasm.py\n\nFor Ghidra, work with [ghidra-wasm-plugin](https://github.com/nneonneo/ghidra-wasm-plugin)\n\n#### script.json\n\nFor ida.py, ghidra.py and Il2CppBinaryNinja\n\n#### stringliteral.json\n\nContains all stringLiteral information\n\n### Configuration\n\nAll the configuration options are located in `config.json`\n\nAvailable options:\n\n* `DumpMethod`, `DumpField`, `DumpProperty`, `DumpAttribute`, `DumpFieldOffset`, `DumpMethodOffset`, `DumpTypeDefIndex`\n  * Whether to output these information to dump.cs\n\n* `GenerateDummyDll`, `GenerateScript`\n  * Whether to generate these things\n\n* `DummyDllAddToken`\n  * Whether to add token in DummyDll\n\n* `RequireAnyKey`\n  * Whether to press any key to exit at the end\n\n* `ForceIl2CppVersion`, `ForceVersion`\n  * If `ForceIl2CppVersion` is `true`, the program will use the version number specified in `ForceVersion` to choose parser for il2cpp binaries (does not affect the choice of metadata parser). This may be useful on some older il2cpp version (e.g. the program may need to use v16 parser on il2cpp v20 (Android) binaries in order to work properly)\n\n* `ForceDump`\n  * Force files to be treated as dumped\n\n* `NoRedirectedPointer`\n  * Treat pointers in dumped files as unredirected, This option needs to be `true` for files dumped from some devices\n\n## Common errors\n\n#### `ERROR: Metadata file supplied is not valid metadata file.`  \n\nMake sure you choose the correct file. Sometimes games may obfuscate this file for content protection purposes and so on. Deobfuscating of such files is beyond the scope of this program, so please **DO NOT** file an issue regarding to deobfuscating.\n\nIf your file is `libil2cpp.so` and you have a rooted Android phone, you can try my other project [Zygisk-Il2CppDumper](https://github.com/Perfare/Zygisk-Il2CppDumper), it can bypass this protection.\n\n#### `ERROR: Can't use auto mode to process file, try manual mode.`\n\nPlease note that the executable file for the PC platform is `GameAssembly.dll` or `*Assembly.dll`\n\nYou can open a new issue and upload the file, I will try to solve.\n\n#### `ERROR: This file may be protected.`\n\nIl2CppDumper detected that the executable file has been protected, use `GameGuardian` to dump `libil2cpp.so` from the game memory, then use Il2CppDumper to load and follow the prompts, can bypass most protections.\n\nIf you have a rooted Android phone, you can try my other project [Zygisk-Il2CppDumper](https://github.com/Perfare/Zygisk-Il2CppDumper), it can bypass almost all protections.\n\n## Credits\n\n- Jumboperson - [Il2CppDumper](https://github.com/Jumboperson/Il2CppDumper)\n",
  "stars": 7815,
  "timestamp": "2025-06-27T00:14:27.607086",
  "category": "advanced_patterns"
}