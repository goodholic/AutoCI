{
  "source": "intensive_collector",
  "type": "code_example",
  "template_name": "async_command_pattern",
  "code": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n",
  "category": "implementation_patterns",
  "quality_score": 95,
  "collected_at": "2025-06-25T02:38:42.319094"
}