{
  "repo": "dotnet/samples",
  "file_path": "azure/sdk-identity-resources-storage/Program.cs",
  "file_name": "Program.cs",
  "content": "ï»¿using System;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Azure;\nusing Azure.Core;\nusing Azure.Identity;\nusing Azure.ResourceManager;\nusing Azure.ResourceManager.Resources;\nusing Azure.ResourceManager.Storage;\nusing Azure.ResourceManager.Storage.Models;\nusing Azure.Storage.Blobs;\nusing Azure.Storage.Blobs.Models;\nusing AccessTier = Azure.ResourceManager.Storage.Models.StorageAccountAccessTier;\n\nnamespace AzureIdentityStorageExample;\n\nclass Program\n{\n    static readonly AzureLocation s_resourceRegion = new(\"West US\");\n    \n    const string DotNetBotChillingPng = \"dotnet-bot_chilling.png\";\n    const string DotNetBotGrillingPng = \"dotnet-bot_grilling.png\";\n    const string BlobContainerName = \"images\";\n\n    static async Task Main()\n    {\n        var credential = new DefaultAzureCredential();\n        var armClient = new ArmClient(credential);        \n        var subscription = await armClient.GetDefaultSubscriptionAsync();\n\n        try\n        {\n            // Create a Resource Group\n            var resourceGroup = await CreateResourceGroupAsync(subscription);\n\n            // Create a Storage account\n            var storageAccount = await CreateStorageAccountAsync(subscription, resourceGroup);\n\n            // Create a container and upload a blob using a storage connection string\n            await UploadBlobUsingStorageConnectionStringAsync(storageAccount);\n\n            // Upload a blob using Azure.Identity.DefaultAzureCredential\n            await UploadBlobUsingDefaultAzureCredentialAsync(storageAccount, credential);\n\n\n            Console.WriteLine(\"Press any key to continue and delete the resources...\");\n            Console.ReadKey(true);\n            \n            // Delete the resource group\n            Console.WriteLine(\"Deleting the resources...\");\n            await resourceGroup.DeleteAsync(WaitUntil.Completed);\n            Console.WriteLine(\"Done!\");\n        }\n        catch (RequestFailedException ex)\n        {\n            Console.WriteLine($\"Request failed! {ex.Message} {ex.StackTrace}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Unexpected exception! {ex.Message} {ex.StackTrace}\");\n        }\n    }\n\n    /// <summary>\n    /// Creates a new resource group with a random name.\n    /// </summary>\n    /// <param name=\"subscription\">The subscription in which to create the resource group.</param>\n\n    private static async Task<ResourceGroupResource> CreateResourceGroupAsync(\n        SubscriptionResource subscription)\n    {\n        string resourceGroupName = RandomName(\"rg\", 20);\n        Console.WriteLine($\"Creating resource group {resourceGroupName}...\");\n        ArmOperation<ResourceGroupResource> resourceGroupOperation = \n            await subscription.GetResourceGroups()\n                .CreateOrUpdateAsync(\n                    WaitUntil.Completed, \n                    resourceGroupName,\n                    new ResourceGroupData(s_resourceRegion));\n        \n        Console.WriteLine(\"Done!\");\n        \n        return resourceGroupOperation.Value;\n    }\n\n    /// <summary>\n    /// Creates a new storage account with a random name.\n    /// </summary>\n    /// <param name=\"subscription\">The subscription in which to create the storage account.</param>\n    /// <param name=\"resourceGroup\">The resource group in which to create the storage account.</param>\n    /// <returns></returns>\n    private static async Task<StorageAccountResource> CreateStorageAccountAsync(\n        SubscriptionResource subscription, ResourceGroupResource resourceGroup)\n    {\n        Console.WriteLine(\"Creating a new storage account...\");\n\n        var storageAccountName = await GenerateStorageAccountNameAsync(subscription);\n\n        var parameters =\n            new StorageAccountCreateOrUpdateContent(\n                new StorageSku(StorageSkuName.StandardLrs),\n                StorageKind.BlobStorage,\n                s_resourceRegion)\n            {\n                AccessTier = AccessTier.Hot\n            };\n\n        var storageAccounts = resourceGroup.GetStorageAccounts();\n        ArmOperation<StorageAccountResource> createStorageAccountOperation = \n            await storageAccounts.CreateOrUpdateAsync(\n                WaitUntil.Completed,\n                storageAccountName, \n                parameters);   \n                     \n        Console.WriteLine($\"Done creating account {storageAccountName}.\");\n\n        return createStorageAccountOperation.Value;\n    }\n\n    /// <summary>\n    /// Generates a random, unique storage account name.\n    /// </summary>\n    /// <param name=\"subscription\">The subscription in which to create the storage account.</param>\n    /// <returns></returns>\n    private static async Task<string> GenerateStorageAccountNameAsync(SubscriptionResource subscription)\n    {\n        while (true)\n        {\n            var storageAccountName = RandomName(\"storage\", 20);\n            var availabilityResponse =\n                await subscription.CheckStorageAccountNameAvailabilityAsync(\n                    new StorageAccountNameAvailabilityContent(storageAccountName));\n\n            if (availabilityResponse.Value.IsNameAvailable.GetValueOrDefault())\n            {\n                return storageAccountName;\n            }\n        }\n    }\n\n    /// <summary>\n    /// Uploads an image as a blob to a storage account using a BlobContainerClient and a storage connection string.\n    /// </summary>\n    /// <param name=\"storageAccount\">The storage account in which to upload the blob.</param>\n    /// <returns></returns>\n    private static async Task UploadBlobUsingStorageConnectionStringAsync(\n        StorageAccountResource storageAccount)\n    {\n        Console.WriteLine(\n            $\"Creating a container and uploading blob {DotNetBotChillingPng} using a storage connection string...\");\n\n        var connectionString = await GetStorageConnectionStringAsync(storageAccount);\n\n        var containerClient = new BlobContainerClient(connectionString, BlobContainerName);\n        await containerClient.CreateIfNotExistsAsync(publicAccessType: PublicAccessType.Blob);\n\n        BlobClient blobClient = containerClient.GetBlobClient(DotNetBotChillingPng);\n        await blobClient.UploadAsync(DotNetBotChillingPng);\n\n        Console.WriteLine($\"Your blob uploaded with a connection string is at:\");\n        Console.WriteLine(\"\");\n        Console.WriteLine(blobClient.Uri);\n        Console.WriteLine(\"\");\n    }\n\n    /// <summary>\n    /// Retrieves the storage account key and uses it to return a storage connection string.\n    /// </summary>\n    /// <param name=\"storageAccount\">The storage account in which to upload the blob.</param>\n    /// <returns></returns>\n    static async Task<string> GetStorageConnectionStringAsync(StorageAccountResource storageAccount)\n    {\n        var keysResponse = storageAccount.GetKeysAsync().GetAsyncEnumerator();\n        var storageKey = await keysResponse.MoveNextAsync()\n            ? keysResponse.Current.Value\n            : throw new Exception(\"No keys found for storage account.\");\n\n        var connectionStringParts = new string[]\n        {\n            \"DefaultEndpointsProtocol=https\",\n            $\"AccountName={storageAccount.Data.Name}\",\n            $\"AccountKey={storageKey}\",\n            \"EndpointSuffix=core.windows.net\"\n        };\n\n        return string.Join(\";\", connectionStringParts);\n    }\n\n    /// <summary>\n    /// Uploads an image as a blob to a storage account using a BlobContainerClient and an Azure.Core.TokenCredential (like DefaultAzureCredential).\n    /// </summary>\n    /// <param name=\"storageAccount\">The storage account in which to upload the blob.</param>\n    /// <param name=\"credential\">An Azure.Core.TokenCredential that contains an authenticated token.</param>\n    /// <returns></returns>\n    private static async Task UploadBlobUsingDefaultAzureCredentialAsync(\n        StorageAccountResource storageAccount, TokenCredential credential)\n    {\n        Console.WriteLine($\"Uploading blob {DotNetBotGrillingPng} using DefaultAzureCredential...\");\n\n        var containerClient = new BlobContainerClient(\n            new Uri($\"{storageAccount.Data.PrimaryEndpoints.BlobUri}{BlobContainerName}\"), credential);\n\n        BlobClient blobClient = containerClient.GetBlobClient(DotNetBotGrillingPng);\n        await blobClient.UploadAsync(DotNetBotGrillingPng);\n\n        Console.WriteLine($\"Your blob uploaded with DefaultAzureCredential is at:\");\n        Console.WriteLine(\"\");\n        Console.WriteLine(blobClient.Uri);\n        Console.WriteLine(\"\");\n    }\n\n    /// <summary>\n    /// Generates a random name.\n    /// </summary>\n    /// <param name=\"prefix\">The text to include at the beginning of the name.</param>\n    /// <param name=\"maxLen\">The total length of the name.</param>\n    static string RandomName(string prefix, int maxLen)\n    {\n        var random = Random.Shared;\n        var sb = new StringBuilder(prefix);\n        for (int i = 0; i < maxLen - prefix.Length; i++)\n            sb.Append(random.Next(10));\n        return sb.ToString();\n    }\n}\n",
  "analysis": {
    "lines": 226,
    "classes": 1,
    "methods": 0,
    "interfaces": 0,
    "usings": [
      "Azure.Core",
      "Azure",
      "System.Text",
      "Azure.ResourceManager",
      "Azure.Storage.Blobs.Models",
      "Azure.ResourceManager.Resources",
      "System",
      "Azure.Identity",
      "Azure.ResourceManager.Storage.Models",
      "Azure.Storage.Blobs",
      "Azure.ResourceManager.Storage",
      "System.Threading.Tasks"
    ],
    "namespaces": [
      "AzureIdentityStorageExample"
    ],
    "has_async": true,
    "has_linq": false,
    "has_generics": true,
    "complexity_estimate": 7,
    "quality_score": 0.85
  },
  "size": 9024,
  "url": "https://github.com/dotnet/samples/blob/main/azure/sdk-identity-resources-storage/Program.cs",
  "collected_at": "2025-06-25T19:29:09.227182"
}