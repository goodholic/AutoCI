{
  "repo": "dotnet/samples",
  "file_path": "async/async-and-await/cs/ParallelAsyncExample/MainWindow.xaml.cs",
  "file_name": "MainWindow.xaml.cs",
  "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Threading;\n\nnamespace ParallelAsyncExample\n{\n    public partial class MainWindow : Window\n    {\n        private readonly HttpClient _client = new HttpClient { MaxResponseContentBufferSize = 1_000_000 };\n\n        private readonly IEnumerable<string> _urlList = new string[]\n        {\n            \"https://docs.microsoft.com\",\n            \"https://docs.microsoft.com/azure\",\n            \"https://docs.microsoft.com/powershell\",\n            \"https://docs.microsoft.com/dotnet\",\n            \"https://docs.microsoft.com/aspnet/core\",\n            \"https://docs.microsoft.com/windows\",\n            \"https://docs.microsoft.com/office\",\n            \"https://docs.microsoft.com/enterprise-mobility-security\",\n            \"https://docs.microsoft.com/visualstudio\",\n            \"https://docs.microsoft.com/microsoft-365\",\n            \"https://docs.microsoft.com/sql\",\n            \"https://docs.microsoft.com/dynamics365\",\n            \"https://docs.microsoft.com/surface\",\n            \"https://docs.microsoft.com/xamarin\",\n            \"https://docs.microsoft.com/azure/devops\",\n            \"https://docs.microsoft.com/system-center\",\n            \"https://docs.microsoft.com/graph\",\n            \"https://docs.microsoft.com/education\",\n            \"https://docs.microsoft.com/gaming\"\n        };\n\n        private void OnStartButtonClick(object sender, RoutedEventArgs e)\n        {\n            _startButton.IsEnabled = false;\n            _resultsTextBox.Clear();\n\n            Task.Run(() => StartSumPageSizesAsync());\n        }\n\n        private async Task StartSumPageSizesAsync()\n        {\n            await SumPageSizesAsync();\n            await Dispatcher.BeginInvoke(() =>\n            {\n                _resultsTextBox.Text += $\"\\nControl returned to {nameof(OnStartButtonClick)}.\";\n                _startButton.IsEnabled = true;\n            });\n        }\n\n        private async Task SumPageSizesAsync()\n        {\n            var stopwatch = Stopwatch.StartNew();\n\n            IEnumerable<Task<int>> downloadTasksQuery =\n                from url in _urlList\n                select ProcessUrlAsync(url, _client);\n\n            Task<int>[] downloadTasks = downloadTasksQuery.ToArray();\n\n            int[] lengths = await Task.WhenAll(downloadTasks);\n            int total = lengths.Sum();\n\n            await Dispatcher.BeginInvoke(() =>\n            {\n                stopwatch.Stop();\n\n                _resultsTextBox.Text += $\"\\nTotal bytes returned:  {total:#,#}\";\n                _resultsTextBox.Text += $\"\\nElapsed time:          {stopwatch.Elapsed}\\n\";\n            });\n        }\n\n        private async Task<int> ProcessUrlAsync(string url, HttpClient client)\n        {\n            byte[] byteArray = await client.GetByteArrayAsync(url);\n            await DisplayResultsAsync(url, byteArray);\n\n            return byteArray.Length;\n        }\n\n        private Task DisplayResultsAsync(string url, byte[] content) =>\n            Dispatcher.BeginInvoke(() =>\n                _resultsTextBox.Text += $\"{url,-60} {content.Length,10:#,#}\\n\")\n                      .Task;\n\n        protected override void OnClosed(EventArgs e) => _client.Dispose();\n    }\n}\n",
  "analysis": {
    "lines": 95,
    "classes": 1,
    "methods": 2,
    "interfaces": 0,
    "usings": [
      "System.Collections.Generic",
      "System.Diagnostics",
      "System.Linq",
      "System.Windows",
      "System.Windows.Threading",
      "System.Net.Http",
      "System",
      "System.Threading.Tasks"
    ],
    "namespaces": [
      "ParallelAsyncExample"
    ],
    "has_async": true,
    "has_linq": true,
    "has_generics": true,
    "complexity_estimate": 0,
    "quality_score": 1.0
  },
  "size": 3329,
  "url": "https://github.com/dotnet/samples/blob/main/async/async-and-await/cs/ParallelAsyncExample/MainWindow.xaml.cs",
  "collected_at": "2025-06-27T01:19:18.211397"
}