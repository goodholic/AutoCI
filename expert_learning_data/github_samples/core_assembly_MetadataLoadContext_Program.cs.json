{
  "repo": "dotnet/samples",
  "file_path": "core/assembly/MetadataLoadContext/Program.cs",
  "file_name": "Program.cs",
  "content": "ï»¿using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\n\nnamespace MetadataLoadContextSample\n{\n    class Program\n    {\n        static int Main(string[] args)\n        {\n            if (args.Length < 1)\n            {\n                Console.WriteLine(\"Usage: dotnet MetadataLoadContextSample.dll <assembly path>\");\n                return 0;\n            }\n\n            string inputFile = args[0];\n\n            try\n            {\n                // Get the array of runtime assemblies.\n                // This will allow us to at least inspect types depending only on BCL.\n                string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n\n                // Create the list of assembly paths consisting of runtime assemblies and the input file.\n                var paths = new List<string>(runtimeAssemblies);\n                paths.Add(inputFile);\n\n                // Create MetadataLoadContext that can resolve assemblies using the created list.\n                var resolver = new PathAssemblyResolver(paths);\n                var mlc = new MetadataLoadContext(resolver);\n\n                using (mlc)\n                {\n                    // Load assembly into MetadataLoadContext.\n                    Assembly assembly = mlc.LoadFromAssemblyPath(inputFile);\n                    AssemblyName name = assembly.GetName();\n\n                    // Print assembly attribute information.\n                    Console.WriteLine(name.Name + \" has following attributes: \");\n\n                    foreach (CustomAttributeData attr in assembly.GetCustomAttributesData())\n                    {\n                        try\n                        {\n                            Console.WriteLine(attr.AttributeType);\n                        }\n                        catch (FileNotFoundException ex)\n                        {\n                            // We are missing the required dependency assembly.\n                            Console.WriteLine(\"Error getting attribute type: \" + ex.Message);\n                        }\n                    }\n\n                    Console.WriteLine();\n\n                    // Print assembly type information.\n                    Console.WriteLine(name.Name + \" contains following types: \");\n\n                    foreach (TypeInfo t in assembly.GetTypes())\n                    {\n                        try\n                        {\n                            Type baseType = t.BaseType;\n\n                            if (t.IsClass)\n                            {\n                                Console.Write(\"class \");\n                            }\n                            else if (t.IsValueType)\n                            {\n                                if (String.Equals(baseType?.FullName, \"System.Enum\", StringComparison.InvariantCulture))\n                                {\n                                    Console.Write(\"enum \");\n                                }\n                                else\n                                {\n                                    Console.Write(\"struct \");\n                                }\n                            }\n                            else if (t.IsInterface)\n                            {\n                                Console.Write(\"interface \");\n                            }\n\n                            Console.Write(t.FullName);\n\n                            if (t.IsClass && !String.Equals(baseType.FullName, \"System.Object\", StringComparison.InvariantCulture))\n                            {\n                                Console.Write(\" : \" + baseType.FullName);\n                            }\n\n                            Console.WriteLine();\n                        }\n                        catch (System.IO.FileNotFoundException ex)\n                        {\n                            // We are missing the required dependency assembly.\n                            Console.WriteLine(\"Error: \" + ex.Message);\n                        }\n                    }\n                }\n\n                return 0;\n            }\n            catch (IOException ex)\n            {\n                Console.WriteLine(\"I/O error occured when trying to load assembly: \");\n                Console.WriteLine(ex.ToString());\n                return 1;\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                Console.WriteLine(\"Access denied when trying to load assembly: \");\n                Console.WriteLine(ex.ToString());\n                return 1;\n            }\n        }\n    }\n}\n",
  "analysis": {
    "lines": 122,
    "classes": 1,
    "methods": 0,
    "interfaces": 0,
    "usings": [
      "System.Collections.Generic",
      "System.Runtime.InteropServices",
      "System",
      "System.Reflection",
      "System.IO"
    ],
    "namespaces": [
      "MetadataLoadContextSample"
    ],
    "has_async": false,
    "has_linq": false,
    "has_generics": true,
    "complexity_estimate": 24,
    "quality_score": 0.7
  },
  "size": 4624,
  "url": "https://github.com/dotnet/samples/blob/main/core/assembly/MetadataLoadContext/Program.cs",
  "collected_at": "2025-06-27T01:19:24.753080"
}