{
  "topic": "Object pooling",
  "description": "Reuse objects instead of instantiating and destroying them repeatedly",
  "best_practices": [
    "Pre-instantiate objects at scene load",
    "Use generic pool implementation",
    "Reset object state when returning to pool"
  ],
  "common_mistakes": [],
  "code_examples": [
    {
      "title": "Generic Object Pool",
      "code": "public class ObjectPool<T> where T : MonoBehaviour\n{\n    private Queue<T> pool = new Queue<T>();\n    private T prefab;\n    private Transform parent;\n    \n    public ObjectPool(T prefab, int initialSize, Transform parent = null)\n    {\n        this.prefab = prefab;\n        this.parent = parent;\n        \n        for (int i = 0; i < initialSize; i++)\n        {\n            T obj = Object.Instantiate(prefab, parent);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        if (pool.Count > 0)\n        {\n            T obj = pool.Dequeue();\n            obj.gameObject.SetActive(true);\n            return obj;\n        }\n        else\n        {\n            return Object.Instantiate(prefab, parent);\n        }\n    }\n    \n    public void Return(T obj)\n    {\n        obj.gameObject.SetActive(false);\n        pool.Enqueue(obj);\n    }\n}"
    }
  ],
  "performance_tips": [],
  "unity_version": "2022.3 LTS",
  "collected_at": "2025-06-27T01:19:00.644665"
}