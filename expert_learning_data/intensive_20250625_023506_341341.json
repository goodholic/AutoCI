{
  "source": "intensive_collector",
  "type": "code_example",
  "template_name": "repository_pattern",
  "code": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n",
  "category": "implementation_patterns",
  "quality_score": 99,
  "collected_at": "2025-06-25T02:35:06.341320"
}