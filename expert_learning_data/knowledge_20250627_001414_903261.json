{
  "source": "github_patterns",
  "url": "https://github.com/ardalis/GuardClauses",
  "type": "project_documentation",
  "content": "![logo](media/logotype%201024.png)\n\n[![NuGet](https://img.shields.io/nuget/v/Ardalis.GuardClauses.svg)](https://www.nuget.org/packages/Ardalis.GuardClauses)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.GuardClauses.svg)](https://www.nuget.org/packages/Ardalis.GuardClauses)\n![publish Ardalis.GuardClauses to nuget](https://github.com/ardalis/GuardClauses/workflows/publish%20Ardalis.GuardClauses%20to%20nuget/badge.svg)\n\n[![Follow Ardalis](https://img.shields.io/twitter/follow/ardalis.svg?label=Follow%20@ardalis)](https://twitter.com/intent/follow?screen_name=ardalis)\n[![Follow NimblePros](https://img.shields.io/twitter/follow/nimblepros.svg?label=Follow%20@nimblepros)](https://twitter.com/intent/follow?screen_name=nimblepros)\n\n# Guard Clauses\n\nA simple extensible package with guard clause extensions.\n\nA [guard clause](https://deviq.com/design-patterns/guard-clause) is a software pattern that simplifies complex functions by \"failing fast\", checking for invalid inputs up front and immediately failing if any are found.\n\n## Give a Star! :star:\n\nIf you like or are using this project please give it a star. Thanks!\n\n## Usage\n\n```c#\npublic void ProcessOrder(Order order)\n{\n    Guard.Against.Null(order);\n\n    // process order here\n}\n\n// OR\n\npublic class Order\n{\n    private string _name;\n    private int _quantity;\n    private long _max;\n    private decimal _unitPrice;\n    private DateTime _dateCreated;\n\n    public Order(string name, int quantity, long max, decimal unitPrice, DateTime dateCreated)\n    {\n        _name = Guard.Against.NullOrWhiteSpace(name);\n        _quantity = Guard.Against.NegativeOrZero(quantity);\n        _max = Guard.Against.Zero(max);\n        _unitPrice = Guard.Against.Negative(unitPrice);\n        _dateCreated = Guard.Against.OutOfSQLDateRange(dateCreated, dateCreated);\n    }\n}\n```\n\n## Supported Guard Clauses\n\n- **Guard.Against.Null** (throws if input is null)\n- **Guard.Against.NullOrEmpty** (throws if string, guid or array input is null or empty)\n- **Guard.Against.NullOrWhiteSpace** (throws if string input is null, empty or whitespace)\n- **Guard.Against.OutOfRange** (throws if integer/DateTime/enum input is outside a provided range)\n- **Guard.Against.EnumOutOfRange** (throws if an enum value is outside a provided Enum range)\n- **Guard.Against.OutOfSQLDateRange** (throws if DateTime input is outside the valid range of SQL Server DateTime values)\n- **Guard.Against.Zero** (throws if number input is zero)\n- **Guard.Against.Expression** (use any expression you define)\n- **Guard.Against.InvalidFormat** (define allowed format with a regular expression or func)\n- **Guard.Against.NotFound** (similar to Null but for use with an id/key lookup; throws a `NotFoundException`)\n\n## Extending with your own Guard Clauses\n\nTo extend your own guards, you can do the following:\n\n```c#\n// Using the same namespace will make sure your code picks up your \n// extensions no matter where they are in your codebase.\nnamespace Ardalis.GuardClauses\n{\n    public static class FooGuard\n    {\n        public static void Foo(this IGuardClause guardClause,\n            string input, \n            [CallerArgumentExpression(\"input\")] string? parameterName = null)\n        {\n            if (input?.ToLower() == \"foo\")\n                throw new ArgumentException(\"Should not have been foo!\", parameterName);\n        }\n    }\n}\n\n// Usage\npublic void SomeMethod(string something)\n{\n    Guard.Against.Foo(something);\n    Guard.Against.Foo(something, nameof(something)); // optional - provide parameter name\n}\n```\n\n## YouTube Overview\n\n[![Ardalis.GuardClauses on YouTube](http://img.youtube.com/vi/OkE2VeRM4mE/0.jpg)](http://www.youtube.com/watch?v=OkE2VeRM4mE \"Improve Your Code with Ardalis.GuardClauses\")\n\n## Breaking Changes in v4\n\n- OutOfRange for Enums now uses `EnumOutOfRange`\n- Custom error messages now work more consistently, which may break some unit tests\n\n## Nice Visualization of Refactoring to use Guard Clauses\n\nhttps://user-images.githubusercontent.com/782127/234028498-96e206b0-9a70-4aa0-9c36-a62477ea0aa9.mp4\n\nvia [Nicolas Carlo](https://toot.legacycode.rocks/@nicoespeon/110226815487285845)\n\n## References\n\n- [Getting Started with Guard Clauses](https://blog.nimblepros.com/blogs/getting-started-with-guard-clauses/)\n- [How to write clean validation clauses in .NET](https://www.youtube.com/watch?v=Tvx6DNarqDM) (Nick Chapsas, YouTube, 9 minutes)\n- [Guard Clauses (podcast: 7 minutes)](http://www.weeklydevtips.com/004)\n- [Guard Clause](http://deviq.com/guard-clause/)\n\n## Commercial Support\n\nIf you require commercial support to include this library in your applications, contact [NimblePros](https://nimblepros.com/talk-to-us-1)\n\n## Build Notes (for maintainers)\n\n- Remember to update the PackageVersion in the csproj file and then a build on main should automatically publish the new package to nuget.org.\n- Add a release with form `1.3.2` to GitHub Releases in order for the package to actually be published to Nuget. Otherwise it will claim to have been successful but is lying to you.\n\n\n",
  "stars": 3200,
  "timestamp": "2025-06-27T00:14:14.903252",
  "category": "advanced_patterns"
}