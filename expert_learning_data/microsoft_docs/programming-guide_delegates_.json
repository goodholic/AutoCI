{
  "url": "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/",
  "title": "Delegates (C# Programming Guide)",
  "topic": "programming-guide/delegates/",
  "content": "Table of contents\nExit focus mode\nAsk Learn\nAsk Learn\nTable of contents\nRead in English\nAdd\nAdd to plan\nEdit\nShare via\nFacebook\nx.com\nLinkedIn\nEmail\nPrint\nNote\nAccess to this page requires authorization. You can try\nsigning in\nor\nchanging directories\n.\nAccess to this page requires authorization. You can try\nchanging directories\n.\nDelegates (C# Programming Guide)\n2025-03-13\nFeedback\nIn this article\nA\ndelegate\nis a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate the delegate instance with any method that has a compatible signature and return type. You can invoke (or call) the method through the delegate instance.\nDelegates are used to pass methods as arguments to other methods. Event handlers are essentially methods you invoke through delegates. When you create a custom method, a class such as a Windows control can call your method when a certain event occurs.\nThe following example shows a delegate declaration:\npublic delegate int PerformCalculation(int x, int y);\nYou can assign any method from any accessible class or struct that matches the delegate type to the delegate. The method can be either static or an instance method. The flexibility allows you to programmatically change method calls, or plug new code into existing classes.\nNote\nIn the context of method overloading, the signature of a method doesn't include the return value. However, in the context of delegates, the signature does include the return value. In other words, a method must have a compatible return type as the return type declared by the delegate.\nThe ability to refer to a method as a parameter makes delegates ideal for defining callback methods. You can write a method that compares two objects in your application. The method can then be used in a delegate for a sort algorithm. Because the comparison code is separate from the library, the sort method can be more general.\nFunction pointers\nsupport similar scenarios, where you need more control over the calling convention. The code associated with a delegate is invoked by using a virtual method added to a delegate type. When you work with function pointers, you can specify different conventions.\nExplore delegate characteristics\nDelegates have the following characteristics:\nDelegates allow methods to be passed as parameters.\nDelegates can be used to define callback methods.\nDelegates can be chained together, such as calling multiple methods on a single event.\nMethods don't have to match the delegate type exactly. For more information, see\nUsing Variance in Delegates\n.\nLambda expressions are a more concise way of writing inline code blocks. Lambda expressions (in certain contexts) are compiled to delegate types. For more information about lambda expressions, see\nLambda expressions\n.\nReview related articles\nFor more information about delegates, see the following articles:\nUsing delegates\nDelegates with named versus anonymous methods\nUsing variance in delegates\nHow to combine delegates (multicast delegates)\nHow to declare, instantiate, and use a delegate\nAccess the C# language specification\nThe language specification is the definitive source for C# syntax and usage. For more information, see\nDelegates\nin the\nC# Language Specification\n.\nRelated links\nDelegate\nEvents\nCollaborate with us on GitHub\nThe source for this content can be found on GitHub, where you can also create and review issues and pull requests. For more information, see\nour contributor guide\n.\n.NET\nOpen a documentation issue\nProvide product feedback\nAdditional resources",
  "code_samples": [
    {
      "language": "csharp",
      "code": "public delegate int PerformCalculation(int x, int y);",
      "lines": 1
    },
    {
      "language": "csharp",
      "code": "public delegate int PerformCalculation(int x, int y);",
      "lines": 1
    }
  ],
  "collected_at": "2025-06-25T19:28:51.182230"
}