{
  "url": "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/",
  "title": "Events (C# Programming Guide)",
  "topic": "programming-guide/events/",
  "content": "Table of contents\nExit focus mode\nAsk Learn\nAsk Learn\nTable of contents\nRead in English\nAdd\nAdd to plan\nEdit\nShare via\nFacebook\nx.com\nLinkedIn\nEmail\nPrint\nNote\nAccess to this page requires authorization. You can try\nsigning in\nor\nchanging directories\n.\nAccess to this page requires authorization. You can try\nchanging directories\n.\nEvents (C# Programming Guide)\n2025-03-11\nFeedback\nIn this article\nEvents enable a\nclass\nor object to notify other classes or objects when something of interest occurs. The class that sends (or\nraises\n) the event is called the\npublisher\nand the classes that receive (or\nhandle\n) the event are called\nsubscribers\n.\nIn a typical C# Windows Forms or Web application, you subscribe to events raised by controls such as buttons and list boxes. You can use the Visual C# integrated development environment (IDE) to browse the events that a control publishes and select the ones that you want to handle. The IDE provides an easy way to automatically add an empty event handler method and the code to subscribe to the event. For more information, see\nHow to subscribe to and unsubscribe from events\n.\nEvents Overview\nEvents have the following properties:\nThe publisher determines when an event is raised; the subscribers determine what action is taken in response to the event.\nAn event can have multiple subscribers. A subscriber can handle multiple events from multiple publishers.\nEvents that have no subscribers are never raised.\nEvents are typically used to signal user actions such as button clicks or menu selections in graphical user interfaces.\nWhen an event has multiple subscribers, the event handlers are invoked synchronously when an event is raised. To invoke events asynchronously, see\nCalling Synchronous Methods Asynchronously\n.\nIn the .NET class library, events are based on the\nEventHandler\ndelegate and the\nEventArgs\nbase class.\nRelated Sections\nFor more information, see:\nHow to subscribe to and unsubscribe from events\nHow to publish events that conform to .NET Guidelines\nHow to raise base class events in derived classes\nHow to implement interface events\nHow to implement custom event accessors\nC# Language Specification\nFor more information, see\nEvents\nin the\nC# Language Specification\n. The language specification is the definitive source for C# syntax and usage.\nSee also\nEventHandler\nDelegates\nCreating Event Handlers in Windows Forms\nCollaborate with us on GitHub\nThe source for this content can be found on GitHub, where you can also create and review issues and pull requests. For more information, see\nour contributor guide\n.\n.NET\nOpen a documentation issue\nProvide product feedback\nAdditional resources",
  "code_samples": [],
  "collected_at": "2025-06-27T01:19:05.607702"
}