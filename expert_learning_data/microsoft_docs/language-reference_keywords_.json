{
  "url": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/",
  "title": "C# Keywords",
  "topic": "language-reference/keywords/",
  "content": "Table of contents\nExit focus mode\nAsk Learn\nAsk Learn\nTable of contents\nRead in English\nAdd\nAdd to plan\nEdit\nShare via\nFacebook\nx.com\nLinkedIn\nEmail\nPrint\nNote\nAccess to this page requires authorization. You can try\nsigning in\nor\nchanging directories\n.\nAccess to this page requires authorization. You can try\nchanging directories\n.\nC# Keywords\n2025-04-17\nFeedback\nIn this article\nKeywords are predefined, reserved identifiers that have special meanings to the compiler. They can't be used as identifiers in your program unless they include\n@\nas a prefix. For example,\n@if\nis a valid identifier, but\nif\nisn't because\nif\nis a keyword.\nThe first table in this article lists keywords that are reserved identifiers in any part of a C# program. The second table in this article lists the contextual keywords in C#. Contextual keywords have special meaning only in a limited program context and can be used as identifiers outside that context. Generally, as new keywords are added to the C# language, they're added as contextual keywords in order to avoid breaking programs written in earlier versions.\nabstract\nas\nbase\nbool\nbreak\nbyte\ncase\ncatch\nchar\nchecked\nclass\nconst\ncontinue\ndecimal\ndefault\ndelegate\ndo\ndouble\nelse\nenum\nevent\nexplicit\nextern\nfalse\nfinally\nfixed\nfloat\nfor\nforeach\ngoto\nif\nimplicit\nin\nint\ninterface\ninternal\nis\nlock\nlong\nnamespace\nnew\nnull\nobject\noperator\nout\noverride\nparams\nprivate\nprotected\npublic\nreadonly\nref\nreturn\nsbyte\nsealed\nshort\nsizeof\nstackalloc\nstatic\nstring\nstruct\nswitch\nthis\nthrow\ntrue\ntry\ntypeof\nuint\nulong\nunchecked\nunsafe\nushort\nusing\nvirtual\nvoid\nvolatile\nwhile\nContextual keywords\nA contextual keyword is used to provide a specific meaning in the code, but it isn't a reserved word in C#. Some contextual keywords, such as\npartial\nand\nwhere\n, have special meanings in two or more contexts.\nadd\nallows\nalias\nand\nascending\nargs\nasync\nawait\nby\ndescending\ndynamic\nequals\nextension\nfield\nfile\nfrom\nget\nglobal\ngroup\ninit\ninto\njoin\nlet\nmanaged\n(function pointer calling convention)\nnameof\nnint\nnot\nnotnull\nnuint\non\nor\norderby\npartial\n(type)\npartial\n(member)\nrecord\nremove\nrequired\nscoped\nselect\nset\nunmanaged\n(function pointer calling convention)\nunmanaged\n(generic type constraint)\nvalue\nvar\nwhen\n(filter condition)\nwhere\n(generic type constraint)\nwhere\n(query clause)\nwith\nyield\nCollaborate with us on GitHub\nThe source for this content can be found on GitHub, where you can also create and review issues and pull requests. For more information, see\nour contributor guide\n.\n.NET\nOpen a documentation issue\nProvide product feedback\nAdditional resources",
  "code_samples": [],
  "collected_at": "2025-06-25T19:28:56.399470"
}