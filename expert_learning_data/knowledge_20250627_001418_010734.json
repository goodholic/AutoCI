{
  "source": "github_patterns",
  "url": "https://github.com/kgrzybek/sample-dotnet-core-cqrs-api",
  "type": "project_documentation",
  "content": "Sample .NET Core REST API CQRS implementation with raw SQL and DDD using Clean Architecture.\n==============================================================\n\n## CI\n\n![](https://github.com/kgrzybek/sample-dotnet-core-cqrs-api/workflows/Build%20Pipeline/badge.svg)\n\n## Give a Star! :star:\n\nIf you like this project, learn something or you are using it in your applications, please give it a star. Thanks!\n\n## Description\nSample .NET Core REST API application implemented with basic [CQRS](https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/cqrs) approach and Domain Driven Design.\n\n## Architecture [Clean Architecture](http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)\n\n![projects_dependencies](docs/clean_architecture.jpg)\n\n## CQRS\n\nRead Model - executing raw SQL scripts on database views objects (using [Dapper](https://github.com/StackExchange/Dapper)).\n\nWrite Model - Domain Driven Design approach (using Entity Framework Core).\n\nCommands/Queries/Domain Events handling using [MediatR](https://github.com/jbogard/MediatR) library.\n\n## Domain\n\n![projects_dependencies](docs/domain_model_diagram.png)\n\n## Validation\nData validation using [FluentValidation](https://github.com/JeremySkinner/FluentValidation)\n\nProblem Details for HTTP APIs standard implementation using [ProblemDetails](https://github.com/khellang/Middleware/tree/master/src/ProblemDetails)\n\n## Caching\nUsing Cache-Aside pattern and in-memory cache.\n\n## Integration\nOutbox Pattern implementation using [Quartz.NET](https://github.com/quartznet/quartznet)\n\n## Related blog articles\n\n[Simple CQRS implementation with raw SQL and DDD](http://www.kamilgrzybek.com/design/simple-cqrs-implementation-with-raw-sql-and-ddd/)\n\n[Domain Model Encapsulation and PI with Entity Framework 2.2](http://www.kamilgrzybek.com/design/domain-model-encapsulation-and-pi-with-entity-framework-2-2/)\n\n[REST API Data Validation](http://www.kamilgrzybek.com/design/rest-api-data-validation/)\n\n[Domain Model Validation](http://www.kamilgrzybek.com/design/domain-model-validation/)\n\n[How to publish and handle Domain Events](http://www.kamilgrzybek.com/design/how-to-publish-and-handle-domain-events/)\n\n[Handling Domain Events: Missing Part](http://www.kamilgrzybek.com/design/handling-domain-events-missing-part/)\n\n[Cache-Aside Pattern in .NET Core](http://www.kamilgrzybek.com/design/cache-aside-pattern-in-net-core/)\n\n[The Outbox Pattern](http://www.kamilgrzybek.com/design/the-outbox-pattern/)\n\n## How to run application\n1. Create empty database.\n2. Execute InitializeDatabase.sql script.\n2. Set connection string (in appsettings.json or by user secrets mechanism).\n3. Run!\n\n## How to run Integration Tests\n1. Create empty database.\n2. Execute InitializeDatabase.sql script.\n3. Set connection string using environment variable named `ASPNETCORE_SampleProject_IntegrationTests_ConnectionString`\n- Run tests from project [src/Tests/SampleProject.IntegrationTests](src/Tests/SampleProject.IntegrationTests)\n",
  "stars": 2989,
  "timestamp": "2025-06-27T00:14:18.010724",
  "category": "advanced_patterns"
}