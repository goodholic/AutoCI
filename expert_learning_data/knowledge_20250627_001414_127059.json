{
  "source": "stackoverflow_expert",
  "url": "https://stackoverflow.com/questions/43920942",
  "type": "expert_qa",
  "content": "Q: Unexpected outcome of node.js vs ASP.NET Core performance test\n\nA: <p>I am doing a quick stress test on two (kinda) hello world projects written in <a href=\"/questions/tagged/node.js\" class=\"post-tag\" title=\"show questions tagged &#39;node.js&#39;\" rel=\"tag\">node.js</a> and <a href=\"/questions/tagged/asp.net-core\" class=\"post-tag\" title=\"show questions tagged &#39;asp.net-core&#39;\" rel=\"tag\">asp.net-core</a>. Both of them are running in production mode and without a logger attached to them. The result is astonishing! ASP.NET core is outperforming node.js app even after doing some extra work whereas the node.js app is just rendering a view.</p>\n<h1>App 1: <code>http://localhost:3000/nodejs</code> <code>node.js</code></h1>\n<p><strong>Using</strong>: node.js, express and vash rendering engine.</p>\n<p><a href=\"https://i.sstatic.net/Wuxhh.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/Wuxhh.png\" alt=\"nodejs app\" /></a></p>\n<p>The code in this endpoint is</p>\n<pre><code>router.get('/', function(req, res, next) {\n  var vm = {\n    title: 'Express',\n    time: new Date()\n  }\n  res.render('index', vm);\n});\n</code></pre>\n<p>As you can see, it does nothing apart from sending current date via the <code>time</code> variable to the view.</p>\n<h1>App 2: <code>http://localhost:5000/aspnet-core</code> <code>asp.net core</code></h1>\n<p><strong>Using</strong>: ASP.NET Core, default template targeting <code>dnxcore50</code></p>\n<p>However this app does something other than just rendering a page with a date on it. It generates 5 paragraphs of various random texts. This should theoretically make this little bit heavier than the nodejs app.</p>\n<p><a href=\"https://i.sstatic.net/I5TnV.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/I5TnV.png\" alt=\"asp.net core app\" /></a></p>\n<p>Here is the action method that render this page</p>\n<pre><code>[ResponseCache(Location = ResponseCacheLocation.None, NoStore = true)]\n[Route(&quot;aspnet-core&quot;)]\npublic IActionResult Index()\n{\n    var sb = new StringBuilder(1024);\n    GenerateParagraphs(5, sb);\n\n    ViewData[&quot;Message&quot;] = sb.ToString();\n    return View();\n}\n</code></pre>\n<h1>Stress test result</h1>\n<h2>Node.js App stress test result</h2>\n<p>Update: <a href=\"https://stackoverflow.com/questions/43920942/unexpected-outcome-of-node-js-vs-asp-net-core-performance-test?noredirect=1#comment75157955_43920942\">Following suggestion by Gorgi Kosev</a></p>\n<p>Using <code>npm install -g recluster-cli &amp;&amp; NODE_ENV=production recluster-cli app.js 8</code></p>\n<p><a href=\"https://i.sstatic.net/zTLuH.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/zTLuH.png\" alt=\"nodejs test 2\" /></a></p>\n<h2>ASP.NET Core App stress test result</h2>\n<p><a href=\"https://i.sstatic.net/fajFZ.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/fajFZ.png\" alt=\"asp.net core stress test result\" /></a></p>\n<p>Can't believe my eyes! It can't be true that in this basic test asp.net core is way faster than nodejs. Off course this is not the only metric used to measure performance between these two web technologies, but I am wondering <strong>what am I doing wrong in the node.js side?</strong>.</p>\n<p>Being a professional asp.net developer and wishing to adapt node.js in personal projects, this is kind of putting me off - as I'm a little paranoid about performance. I thought node.js is faster than asp.net core (in general - as seen in various other benchmarks) I just want to prove it to myself (to encourage myself in adapting node.js).</p>\n<p>Please reply in comment if you want me to include more code snippets.</p>\n<p><strong>Update:</strong>\n<strong>Time distribution of .NET Core app</strong></p>\n<p><a href=\"https://i.sstatic.net/tlSDf.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/tlSDf.png\" alt=\"aspnetcore app time distribution\" /></a></p>\n<p><strong>Server response</strong></p>\n<pre><code>HTTP/1.1 200 OK\nCache-Control: no-store,no-cache\nDate: Fri, 12 May 2017 07:46:56 GMT\nPragma: no-cache\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=utf-8\nServer: Kestrel\n</code></pre>\n",
  "score": 200,
  "timestamp": "2025-06-27T00:14:14.127047",
  "category": "expert_solutions"
}