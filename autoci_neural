#!/bin/bash
# AutoCI Neural - 신경망 기반 AI 시스템 CLI

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# AutoCI 디렉토리 설정
AUTOCI_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$AUTOCI_DIR"

# 가상환경 경로 설정
VENV_PATH=""
if [ -d "neural_venv" ]; then
    VENV_PATH="neural_venv"
elif [ -d "llm_venv_wsl" ]; then
    VENV_PATH="llm_venv_wsl"
elif [ -d "llm_venv" ]; then
    VENV_PATH="llm_venv"
elif [ -d "venv" ]; then
    VENV_PATH="venv"
fi

# 가상환경 활성화
if [ -n "$VENV_PATH" ] && [ -f "$VENV_PATH/bin/activate" ]; then
    echo -e "${GREEN}✓ 가상환경 활성화: $VENV_PATH${NC}"
    source "$VENV_PATH/bin/activate"
else
    echo -e "${YELLOW}⚠️  가상환경을 찾을 수 없습니다. 시스템 Python을 사용합니다.${NC}"
fi

# 파이썬 환경 확인
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}❌ Python3가 설치되어 있지 않습니다.${NC}"
    exit 1
fi

# 배너 출력
print_banner() {
    echo -e "${PURPLE}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                                                               ║"
    echo "║      🧠 AutoCI Neural - ChatGPT 수준의 신경망 AI 🧠          ║"
    echo "║                                                               ║"
    echo "║    100% 순수 신경망 | 10억+ 파라미터 | 대규모 학습           ║"
    echo "║                                                               ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# 명령어 처리
case "$1" in
    # 기본 실행 - 통합 대화형 시스템
    "")
        print_banner
        echo -e "${CYAN}🚀 신경망 기반 대화형 AI를 시작합니다...${NC}"
        echo -e "${GREEN}✨ ChatGPT 수준의 자연스러운 대화${NC}"
        echo -e "${GREEN}🧠 실시간 학습 및 개선${NC}"
        echo -e "${GREEN}📊 1분마다 자동 모니터링${NC}"
        echo
        
        if [ -f "integrated_autoci_system.py" ]; then
            python3 integrated_autoci_system.py
        else
            echo -e "${RED}❌ 통합 시스템 파일을 찾을 수 없습니다.${NC}"
            exit 1
        fi
        ;;
    
    # 신경망 대화 모드
    chat|c)
        print_banner
        echo -e "${CYAN}💬 신경망 대화 모드${NC}"
        if [ -f "run_complete_neural_autoci.py" ]; then
            python3 run_complete_neural_autoci.py
        else
            echo -e "${RED}❌ 신경망 시스템을 찾을 수 없습니다.${NC}"
            exit 1
        fi
        ;;
    
    # 학습 명령
    train|t)
        print_banner
        echo -e "${GREEN}🔥 대규모 신경망 학습을 시작합니다...${NC}"
        echo -e "${YELLOW}⚡ 분산 학습 시스템 (Multi-GPU 지원)${NC}"
        
        if [ -f "distributed_training_system.py" ]; then
            python3 distributed_training_system.py
        else
            echo -e "${RED}❌ 분산 학습 시스템을 찾을 수 없습니다.${NC}"
            exit 1
        fi
        ;;
    
    # 데이터 생성
    data|d)
        print_banner
        echo -e "${CYAN}📚 대규모 학습 데이터를 생성합니다...${NC}"
        echo -e "${YELLOW}목표: 100,000개 고품질 Unity/C# 예제${NC}"
        
        if [ -f "large_scale_training_pipeline.py" ]; then
            python3 large_scale_training_pipeline.py
        else
            echo -e "${RED}❌ 데이터 파이프라인을 찾을 수 없습니다.${NC}"
            exit 1
        fi
        ;;
    
    # 테스트
    test)
        print_banner
        echo -e "${CYAN}🧪 신경망 시스템을 테스트합니다...${NC}"
        
        if [ -f "test_neural_system.py" ]; then
            python3 test_neural_system.py
        else
            echo -e "${RED}❌ 테스트 시스템을 찾을 수 없습니다.${NC}"
            exit 1
        fi
        ;;
    
    # 모니터링
    monitor|m)
        case "$2" in
            start)
                echo -e "${GREEN}📊 AI 학습 모니터링을 시작합니다...${NC}"
                if [ -f "ai_learning_monitor.py" ]; then
                    python3 ai_learning_monitor.py &
                    echo -e "${CYAN}🌐 웹 대시보드: http://localhost:8888${NC}"
                else
                    echo -e "${RED}❌ 모니터링 시스템을 찾을 수 없습니다.${NC}"
                fi
                ;;
            web)
                echo -e "${CYAN}🌐 웹 대시보드를 엽니다...${NC}"
                if [ -f "monitoring_dashboard.html" ]; then
                    # WSL에서 Windows 브라우저 열기
                    if command -v cmd.exe &> /dev/null; then
                        cmd.exe /c start http://localhost:8888
                    elif command -v xdg-open &> /dev/null; then
                        xdg-open "http://localhost:8888"
                    else
                        echo "브라우저에서 http://localhost:8888 을 열어주세요"
                    fi
                else
                    echo -e "${RED}❌ 대시보드 파일을 찾을 수 없습니다.${NC}"
                fi
                ;;
            *)
                echo -e "${YELLOW}사용법: autoci_neural monitor [start|web]${NC}"
                ;;
        esac
        ;;
    
    # 상태 확인
    status|s)
        print_banner
        echo -e "${CYAN}📊 시스템 상태를 확인합니다...${NC}"
        
        if [ -f "integrated_autoci_system.py" ]; then
            python3 -c "
from integrated_autoci_system import IntegratedAutoCI
ai = IntegratedAutoCI()
print(ai.show_status())
"
        else
            echo -e "${RED}❌ 상태 확인 시스템을 찾을 수 없습니다.${NC}"
        fi
        ;;
    
    # 24시간 연속 신경망 학습
    learn|l)
        case "$2" in
            start)
                echo -e "${GREEN}🧠 24시간 C# 신경망 학습을 시작합니다...${NC}"
                if [ -f "start_neural_learning.py" ]; then
                    python3 start_neural_learning.py start
                else
                    echo -e "${RED}❌ 신경망 학습 시스템을 찾을 수 없습니다.${NC}"
                fi
                ;;
            stop)
                echo -e "${YELLOW}🛑 신경망 학습을 중지합니다...${NC}"
                if [ -f "start_neural_learning.py" ]; then
                    python3 start_neural_learning.py stop
                else
                    echo -e "${RED}❌ 신경망 학습 시스템을 찾을 수 없습니다.${NC}"
                fi
                ;;
            status)
                echo -e "${CYAN}📊 신경망 학습 상태${NC}"
                if [ -f "start_neural_learning.py" ]; then
                    python3 start_neural_learning.py status
                else
                    echo -e "${RED}❌ 신경망 학습 시스템을 찾을 수 없습니다.${NC}"
                fi
                ;;
            logs)
                echo -e "${CYAN}📄 신경망 학습 로그${NC}"
                if [ -f "start_neural_learning.py" ]; then
                    python3 start_neural_learning.py logs "${3:-50}"
                else
                    echo -e "${RED}❌ 신경망 학습 시스템을 찾을 수 없습니다.${NC}"
                fi
                ;;
            monitor)
                echo -e "${CYAN}🔍 실시간 신경망 학습 모니터링${NC}"
                if [ -f "start_neural_learning.py" ]; then
                    python3 start_neural_learning.py monitor
                else
                    echo -e "${RED}❌ 신경망 학습 시스템을 찾을 수 없습니다.${NC}"
                fi
                ;;
            *)
                echo -e "${YELLOW}사용법: autoci_neural learn [start|stop|status|logs|monitor]${NC}"
                echo
                echo "  start   - 24시간 신경망 학습 시작"
                echo "  stop    - 학습 중지"
                echo "  status  - 학습 상태 확인"
                echo "  logs    - 학습 로그 확인 (기본 50줄)"
                echo "  monitor - 실시간 모니터링"
                ;;
        esac
        ;;
    
    # 프로젝트 분석
    analyze|a)
        if [ -z "$2" ]; then
            echo -e "${YELLOW}사용법: autoci_neural analyze <프로젝트_경로>${NC}"
            exit 1
        fi
        
        echo -e "${CYAN}🔍 프로젝트를 분석합니다: $2${NC}"
        if [ -f "integrated_autoci_system.py" ]; then
            python3 -c "
from integrated_autoci_system import IntegratedAutoCI
ai = IntegratedAutoCI()
ai.start()
response = ai.process_input('$2 프로젝트를 분석해주세요')
print(response)
"
        else
            echo -e "${RED}❌ 분석 시스템을 찾을 수 없습니다.${NC}"
        fi
        ;;
    
    # 코드 개선
    improve|i)
        if [ -z "$2" ]; then
            echo -e "${YELLOW}사용법: autoci_neural improve <파일_경로>${NC}"
            exit 1
        fi
        
        echo -e "${CYAN}💡 코드를 개선합니다: $2${NC}"
        if [ -f "integrated_autoci_system.py" ]; then
            python3 -c "
from integrated_autoci_system import IntegratedAutoCI
ai = IntegratedAutoCI()
ai.start()
response = ai.process_input('$2 파일의 코드를 개선해주세요')
print(response)
"
        else
            echo -e "${RED}❌ 개선 시스템을 찾을 수 없습니다.${NC}"
        fi
        ;;
    
    # 도움말
    help|h|--help)
        print_banner
        echo -e "${GREEN}AutoCI Neural - ChatGPT 수준의 순수 신경망 AI 시스템${NC}"
        echo
        echo -e "${CYAN}기본 명령어:${NC}"
        echo "  autoci_neural              - 통합 대화형 AI 시작 (기본)"
        echo "  autoci_neural chat         - 순수 신경망 대화 모드"
        echo "  autoci_neural status       - 시스템 상태 확인"
        echo
        echo -e "${CYAN}학습 명령어:${NC}"
        echo "  autoci_neural train        - 대규모 신경망 학습 (분산)"
        echo "  autoci_neural data         - 학습 데이터 생성 (100K+)"
        echo "  autoci_neural test         - 시스템 테스트"
        echo
        echo -e "${CYAN}고급 기능:${NC}"
        echo "  autoci_neural monitor start - AI 학습 모니터링 시작"
        echo "  autoci_neural monitor web   - 웹 대시보드 열기"
        echo "  autoci_neural analyze <경로> - 프로젝트 분석"
        echo "  autoci_neural improve <파일> - 코드 개선 제안"
        echo
        echo -e "${CYAN}24시간 신경망 학습:${NC}"
        echo "  autoci_neural learn start   - 24시간 C# 학습 시작 🔥"
        echo "  autoci_neural learn stop    - 학습 중지"
        echo "  autoci_neural learn status  - 학습 상태 확인"
        echo "  autoci_neural learn logs    - 학습 로그 확인"
        echo "  autoci_neural learn monitor - 실시간 모니터링"
        echo
        echo -e "${PURPLE}특징:${NC}"
        echo "  🧠 100% 순수 신경망 (규칙 기반 코드 없음)"
        echo "  🔥 10억+ 파라미터 트랜스포머 모델"
        echo "  📊 대규모 학습 데이터 (100,000+ 예제)"
        echo "  ⚡ 분산 학습 시스템 (Multi-GPU)"
        echo "  🎯 Unity/C# 전문 특화"
        echo "  💬 ChatGPT 수준 자연스러운 대화"
        echo "  🔄 실시간 학습 및 개선"
        echo
        echo -e "${YELLOW}예시:${NC}"
        echo "  autoci_neural                    # 대화형 AI 시작"
        echo "  autoci_neural train              # 신경망 학습"
        echo "  autoci_neural monitor start      # 모니터링 시작"
        echo "  autoci_neural analyze ./myproject # 프로젝트 분석"
        ;;
    
    *)
        echo -e "${RED}❌ 알 수 없는 명령어: $1${NC}"
        echo -e "${YELLOW}도움말을 보려면 'autoci_neural help'를 입력하세요.${NC}"
        exit 1
        ;;
esac