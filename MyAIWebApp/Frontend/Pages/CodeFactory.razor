@page "/codefactory"
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>🏭 24시간 코드 공장 - AutoCI</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-lg-12">
            <div class="d-flex align-items-center mb-4">
                <h1 class="h2 me-3">🏭 24시간 자동 코드 공장</h1>
                <span class="badge bg-success">Always Working</span>
                <button @onclick="RefreshStatus" class="btn btn-outline-primary btn-sm ms-auto">
                    <i class="bi bi-arrow-clockwise"></i> 새로고침
                </button>
            </div>
        </div>
    </div>

    <!-- 상태 대시보드 -->
    <!-- 학습 중 표시 -->
    @if (isLearning)
    {
        <div class="row mb-2">
            <div class="col-12">
                <div class="alert alert-info" role="alert">
                    <div class="d-flex align-items-center mb-2">
                        <div class="spinner-grow spinner-grow-sm text-info me-2" role="status">
                            <span class="visually-hidden">Learning...</span>
                        </div>
                        <strong>🤖 C# 코드 학습 중...</strong>
                    </div>
                    <div class="progress mb-2" style="height: 20px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
                             role="progressbar" 
                             style="width: @(learningProgress)%" 
                             aria-valuenow="@learningProgress" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                            @(learningProgress)%
                        </div>
                    </div>
                    <small class="d-block">
                        <i class="bi bi-file-code me-1"></i>@learningMessage
                        @if (!string.IsNullOrEmpty(currentLearningFile))
                        {
                            <span class="text-muted"> - @currentLearningFile</span>
                        }
                    </small>
                </div>
            </div>
        </div>
    }

    <div class="row mb-4">
        <div class="col-md-2">
            <div class="card bg-warning text-dark">
                <div class="card-body text-center">
                    <h4 class="card-title">📋 @currentStatus.Pending</h4>
                    <p class="card-text small">대기 중인 작업</p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <h4 class="card-title">🔧 @currentStatus.InProgress</h4>
                    <p class="card-text small">진행 중인 작업</p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <h4 class="card-title">✅ @currentStatus.Completed</h4>
                    <p class="card-text small">완료된 작업</p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-danger text-white">
                <div class="card-body text-center">
                    <h4 class="card-title">❌ @currentStatus.Failed</h4>
                    <p class="card-text small">실패한 작업</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            @if (ragStatus != null)
            {
                <div class="card bg-gradient" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="card-body text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">🧠 Enhanced RAG</h6>
                                <span class="badge bg-success bg-opacity-75 mb-2">활성화됨</span>
                            </div>
                            <i class="bi bi-database-check" style="font-size: 2rem; opacity: 0.7;"></i>
                        </div>
                        <div class="row text-center small">
                            <div class="col-4">
                                <div class="fw-bold fs-6">@ragStatus.TotalKnowledge</div>
                                <div style="font-size: 0.7rem;">지식 항목</div>
                            </div>
                            <div class="col-4">
                                <div class="fw-bold fs-6">@ragStatus.Categories</div>
                                <div style="font-size: 0.7rem;">카테고리</div>
                            </div>
                            <div class="col-4">
                                <div class="fw-bold fs-6">@ragStatus.Templates</div>
                                <div style="font-size: 0.7rem;">패턴</div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card bg-secondary text-white">
                    <div class="card-body text-center">
                        <div class="spinner-border spinner-border-sm mb-2" role="status"></div>
                        <h6 class="card-title">🧠 Enhanced RAG</h6>
                        <p class="card-text small">시스템 초기화 중...</p>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row g-4">
        <!-- 왼쪽: 작업 추가 -->
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-plus-circle me-2"></i>새 작업 추가</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">🎯 빠른 선택</label>
                        <div class="d-grid gap-2">
                            <button @onclick="@(() => SetQuickTask("unity_player"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-controller me-2"></i>Unity 플레이어 컨트롤러 생성
                            </button>
                            <button @onclick="@(() => SetQuickTask("unity_enemy"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-bug me-2"></i>Unity 적 AI 스크립트 생성
                            </button>
                            <button @onclick="@(() => SetQuickTask("game_manager"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-gear me-2"></i>Unity 게임 매니저 생성
                            </button>
                            <button @onclick="@(() => SetQuickTask("improve_all"))" class="btn btn-outline-warning btn-sm text-start">
                                <i class="bi bi-arrow-up-circle me-2"></i>모든 스크립트 개선
                            </button>
                        </div>
                    </div>
                    
                    <!-- AutoCI 터미널 명령 -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">🔧 AutoCI 터미널 명령</label>
                        <div class="row g-2">
                            <div class="col-6">
                                <button @onclick="ExecuteAutoCI_EnhanceStart" class="btn btn-success btn-sm w-100" disabled="@isExecutingCommand">
                                    <i class="bi bi-play-circle me-1"></i>24시간 시작
                                </button>
                            </div>
                            <div class="col-6">
                                <button @onclick="ExecuteAutoCI_DualStart" class="btn btn-info btn-sm w-100" disabled="@isExecutingCommand">
                                    <i class="bi bi-layers me-1"></i>Dual Phase
                                </button>
                            </div>
                            <div class="col-6">
                                <button @onclick="ExecuteAutoCI_DataCollect" class="btn btn-warning btn-sm w-100" disabled="@isExecutingCommand">
                                    <i class="bi bi-database me-1"></i>데이터 수집
                                </button>
                            </div>
                            <div class="col-6">
                                <button @onclick="ExecuteAutoCI_Index" class="btn btn-secondary btn-sm w-100" disabled="@isExecutingCommand">
                                    <i class="bi bi-search me-1"></i>인덱싱
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">�� 대상 폴더</label>
                        <input @bind="targetFolder" class="form-control" placeholder="../Assets/Scripts" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">�� 파일 패턴</label>
                        <input @bind="filePattern" class="form-control" placeholder="PlayerController.cs 또는 *.cs" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">🛠️ 작업 타입</label>
                        <select @bind="modificationType" class="form-select">
                            <option value="create">새 파일 생성</option>
                            <option value="modify">기존 파일 수정</option>
                            <option value="improve">코드 개선</option>
                            <option value="fix">버그 수정</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">📝 작업 설명</label>
                        <textarea @bind="description" @bind:event="oninput" @onkeyup="CheckKoreanCommand" class="form-control" rows="3" placeholder="어떤 작업을 수행할지 자세히 설명해주세요... (예: 플레이어 만들어, 적 AI 생성)"></textarea>
                        @if (detectedCommand != null)
                        {
                            <small class="text-success d-block mt-1">
                                <i class="bi bi-check-circle-fill me-1"></i>감지된 명령: "@detectedCommand"
                                <span class="badge bg-success ms-2">Enter키로 실행</span>
                            </small>
                        }
                        @if (!string.IsNullOrEmpty(description) && detectedCommand == null)
                        {
                            <small class="text-muted d-block mt-1">
                                💡 팁: "플레이어 만들어", "적 AI", "게임 매니저", "모두 개선" 등을 입력해보세요
                            </small>
                        }
                        @if (aiConfidence > 0 && aiConfidence < 0.5)
                        {
                            <small class="text-warning d-block mt-1">
                                <i class="bi bi-robot me-1"></i>AI가 명령을 이해하는 중... (신뢰도: @($"{aiConfidence:P0}"))
                            </small>
                        }
                    </div>

                    <div class="d-grid gap-2">
                        <button @onclick="AddTask" class="btn btn-primary" disabled="@isAddingTask">
                            @if (isAddingTask)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>작업 추가 중...</span>
                            }
                            else
                            {
                                <i class="bi bi-plus-circle me-2"></i>
                                <span>작업 추가하기</span>
                            }
                        </button>
                        <button @onclick="StartContinuous" class="btn btn-success" disabled="@isContinuousRunning">
                            <i class="bi bi-play-circle me-2"></i>
                            <span>24시간 연속 모드 시작</span>
                        </button>
                        <button @onclick="AddExamples" class="btn btn-outline-info">
                            <i class="bi bi-lightbulb me-2"></i>예시 작업 추가
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(addTaskMessage))
                    {
                        <div class="alert alert-info mt-3" role="alert">
                            @addTaskMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- 오른쪽: 최근 작업 현황 -->
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-list-task me-2"></i>최근 작업 현황</h5>
                </div>
                <div class="card-body">
                    <div class="text-center text-muted py-4">
                        <i class="bi bi-inbox" style="font-size: 3rem;"></i>
                        <p class="mt-2">아직 작업이 없습니다.</p>
                        <small>왼쪽에서 새 작업을 추가해보세요!</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- AutoCI Terminal Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow-sm border-primary">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="bi bi-terminal me-2"></i>AutoCI Terminal</h5>
                        <div>
                            <button @onclick="ClearTerminal" class="btn btn-sm btn-outline-light me-2">
                                <i class="bi bi-trash"></i> Clear
                            </button>
                            <button @onclick="ToggleAutoScroll" class="btn btn-sm btn-outline-light">
                                <i class="bi @(autoScroll ? "bi-arrow-down-square-fill" : "bi-arrow-down-square")"></i> Auto-scroll
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Quick Command Buttons -->
                    <div class="mb-3">
                        <div class="btn-group flex-wrap" role="group">
                            <button @onclick="@(() => ExecuteAutoCI("enhance", "start"))" class="btn btn-success" disabled="@isExecuting">
                                <i class="bi bi-play-circle me-1"></i>Enhance Start
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("enhance", "stop"))" class="btn btn-danger" disabled="@isExecuting">
                                <i class="bi bi-stop-circle me-1"></i>Enhance Stop
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("enhance", "status"))" class="btn btn-info" disabled="@isExecuting">
                                <i class="bi bi-info-circle me-1"></i>Status
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("create", "Unity PlayerController"))" class="btn btn-primary" disabled="@isExecuting">
                                <i class="bi bi-plus-circle me-1"></i>Create
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("improve", "*.cs"))" class="btn btn-warning" disabled="@isExecuting">
                                <i class="bi bi-arrow-up-circle me-1"></i>Improve
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("fix", ""))" class="btn btn-secondary" disabled="@isExecuting">
                                <i class="bi bi-wrench me-1"></i>Fix
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("dual", "start"))" class="btn btn-purple" disabled="@isExecuting">
                                <i class="bi bi-lightning me-1"></i>Dual Phase
                            </button>
                            <button @onclick="@(() => ExecuteAutoCI("rag", "start"))" class="btn btn-teal" disabled="@isExecuting">
                                <i class="bi bi-database me-1"></i>RAG Server
                            </button>
                        </div>
                    </div>

                    <!-- Custom Command Input -->
                    <div class="input-group mb-3">
                        <span class="input-group-text bg-dark text-white">$</span>
                        <input @bind="customCommand" @bind:event="oninput" @onkeypress="@(async (e) => await HandleCommandKeyPress(e))" 
                               class="form-control font-monospace" placeholder="autoci [command] [arguments]" 
                               disabled="@isExecuting" />
                        <button @onclick="ExecuteCustomCommand" class="btn btn-primary" disabled="@(isExecuting || string.IsNullOrWhiteSpace(customCommand))">
                            <i class="bi bi-send me-1"></i>Execute
                        </button>
                    </div>

                    <!-- Terminal Output -->
                    <div class="terminal-output" @ref="terminalElement">
                        @if (terminalLines.Count == 0)
                        {
                            <div class="text-muted text-center py-5">
                                <i class="bi bi-terminal" style="font-size: 3rem;"></i>
                                <p class="mt-2">Terminal ready. Execute a command to see output.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var line in terminalLines)
                            {
                                <div class="terminal-line @line.Type">
                                    <span class="timestamp">[@line.Timestamp:HH:mm:ss]</span>
                                    <span class="content">@line.Content</span>
                                </div>
                            }
                        }
                    </div>

                    <!-- Active Processes -->
                    @if (activeProcesses.Count > 0)
                    {
                        <div class="mt-3">
                            <h6 class="text-muted">Active Processes:</h6>
                            <div class="list-group">
                                @foreach (var process in activeProcesses)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@process.Command @process.Arguments</strong>
                                            <small class="text-muted d-block">ID: @process.Id</small>
                                        </div>
                                        <div>
                                            <span class="badge bg-@GetStatusColor(process.Status) me-2">@process.Status</span>
                                            @if (process.Status == "Running")
                                            {
                                                <button @onclick="@(() => StopProcess(process.Id))" class="btn btn-sm btn-danger">
                                                    <i class="bi bi-stop-circle"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- 사용 가이드 -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>🏭 코딩 공장 사용 가이드</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6 class="fw-bold">✨ 자동 코드 생성</h6>
                            <ul class="small">
                                <li>Unity 스크립트 자동 생성</li>
                                <li>ASP.NET 컨트롤러 생성</li>
                                <li>디자인 패턴 구현</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="fw-bold">�� 코드 자동 수정</h6>
                            <ul class="small">
                                <li>기존 코드 개선</li>
                                <li>버그 자동 수정</li>
                                <li>성능 최적화</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="fw-bold">🕒 24시간 연속 작업</h6>
                            <ul class="small">
                                <li>백그라운드 자동 실행</li>
                                <li>작업 큐 관리</li>
                                <li>실시간 상태 모니터링</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- AutoCI 터미널 출력 -->
    @if (!string.IsNullOrEmpty(commandOutput))
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card bg-dark text-white">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-terminal me-2"></i>AutoCI 터미널 출력</h6>
                    </div>
                    <div class="card-body" style="font-family: 'Consolas', 'Monaco', monospace; max-height: 300px; overflow-y: auto;">
                        <pre class="mb-0">@commandOutput</pre>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .terminal-output {
        background-color: #1e1e1e;
        color: #d4d4d4;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 14px;
        padding: 15px;
        height: 400px;
        overflow-y: auto;
        border-radius: 5px;
        margin-top: 10px;
    }

    .terminal-line {
        margin-bottom: 5px;
        word-wrap: break-word;
    }

    .terminal-line.command {
        color: #569cd6;
    }

    .terminal-line.output {
        color: #d4d4d4;
    }

    .terminal-line.error {
        color: #f48771;
    }

    .terminal-line.success {
        color: #4ec9b0;
    }

    .terminal-line.info {
        color: #dcdcaa;
    }

    .terminal-line .timestamp {
        color: #608b4e;
        margin-right: 10px;
    }

    .btn-purple {
        background-color: #6f42c1;
        border-color: #6f42c1;
        color: white;
    }

    .btn-purple:hover {
        background-color: #5a32a3;
        border-color: #5a32a3;
    }

    .btn-teal {
        background-color: #20c997;
        border-color: #20c997;
        color: white;
    }

    .btn-teal:hover {
        background-color: #1aa179;
        border-color: #1aa179;
    }
</style>

@code {
    // 상태 정보
    private StatusInfo currentStatus = new();
    private RAGStatus? ragStatus = null;

    // 입력 필드
    private string targetFolder = "../Assets/Scripts";
    private string filePattern = "PlayerController.cs";
    private string modificationType = "create";
    private string description = "Unity 플레이어 컨트롤러 스크립트 생성";

    // 상태 플래그
    private bool isAddingTask = false;
    private bool isContinuousRunning = false;
    private string addTaskMessage = "";
    
    // 한글 명령 인식 관련
    private string? detectedCommand = null;
    private Dictionary<string, Action> koreanCommands = new();
    private double aiConfidence = 0;
    
    // 학습 상태 관련
    private bool isLearning = false;
    private string learningMessage = "";
    private System.Threading.Timer? learningTimer;
    private int learningProgress = 0;
    private string currentLearningFile = "";

    protected override async Task OnInitializedAsync()
    {
        InitializeKoreanCommands();
        await RefreshStatus();
        await LoadRAGStatus();
        await CheckLearningStatus();
        
        // 초기 학습 상태 즉시 확인
        try
        {
            var response = await Http.GetFromJsonAsync<LearningStatusResponse>("https://localhost:7001/api/RAGStatus/learning-status");
            if (response?.Success == true)
            {
                isLearning = response.Data.IsLearning;
                learningMessage = response.Data.Message;
                learningProgress = response.Data.Progress;
                currentLearningFile = response.Data.CurrentFile;
            }
        }
        catch { }
    }
    
    private void InitializeKoreanCommands()
    {
        koreanCommands = new Dictionary<string, Action>
        {
            { "플레이어 만들어", () => SetQuickTask("unity_player") },
            { "플레이어 컨트롤러", () => SetQuickTask("unity_player") },
            { "플레이어 생성", () => SetQuickTask("unity_player") },
            { "적 만들어", () => SetQuickTask("unity_enemy") },
            { "적 AI", () => SetQuickTask("unity_enemy") },
            { "적 생성", () => SetQuickTask("unity_enemy") },
            { "게임 매니저", () => SetQuickTask("game_manager") },
            { "매니저 만들어", () => SetQuickTask("game_manager") },
            { "매니저 생성", () => SetQuickTask("game_manager") },
            { "모두 개선", () => SetQuickTask("improve_all") },
            { "전체 최적화", () => SetQuickTask("improve_all") },
            { "성능 개선", () => SetQuickTask("improve_all") },
            { "코드 개선", () => SetQuickTask("improve_all") }
        };
    }
    
    private async void CheckKoreanCommandOnInput()
    {
        detectedCommand = null;
        aiConfidence = 0;
        
        if (string.IsNullOrEmpty(description))
        {
            await InvokeAsync(StateHasChanged);
            return;
        }
            
        // AI 기반 한글 명령 분석
        try
        {
            var response = await Http.PostAsJsonAsync("/api/KoreanCommand/analyze", new { text = description });
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<KoreanCommandAnalysisResult>();
                if (result?.Success == true)
                {
                    aiConfidence = result.Confidence;
                    
                    if (result.Confidence > 0.5)
                    {
                        // AI가 인식한 명령 타입에 따라 적절한 한글 명령 설정
                        switch (result.CommandType)
                        {
                            case "unity_player":
                                detectedCommand = "플레이어 만들어";
                                break;
                            case "unity_enemy":
                                detectedCommand = "적 AI";
                                break;
                            case "game_manager":
                                detectedCommand = "게임 매니저";
                                break;
                            case "improve_all":
                                detectedCommand = "모두 개선";
                                break;
                        }
                        
                        // 신뢰도가 높으면 자동으로 필드 설정
                        if (result.Confidence > 0.8 && detectedCommand != null)
                        {
                            var cmdKey = koreanCommands.Keys.FirstOrDefault(k => k == detectedCommand);
                            if (cmdKey != null)
                            {
                                koreanCommands[cmdKey].Invoke();
                            }
                        }
                    }
                }
                else if (result != null && !string.IsNullOrEmpty(result.Suggestion))
                {
                    // AI가 명령을 이해하지 못한 경우
                    addTaskMessage = $"💡 {result.Suggestion}";
                }
            }
        }
        catch
        {
            // AI 분석 실패시 기존 룰 기반 방식 사용
            CheckKoreanCommandFallback();
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    private void CheckKoreanCommandFallback()
    {
        var desc = description.Trim().ToLower();
        
        // 기존 룰 기반 매칭 (폴백)
        if (desc.Contains("플레이어") || desc.Contains("player") || desc.Contains("캐릭터"))
        {
            detectedCommand = "플레이어 만들어";
        }
        else if ((desc.Contains("적") && desc.Contains("ai")) || desc.Contains("몬스터"))
        {
            detectedCommand = "적 AI";
        }
        else if (desc.Contains("매니저") || desc.Contains("manager"))
        {
            detectedCommand = "게임 매니저";
        }
        else if (desc.Contains("개선") || desc.Contains("최적화"))
        {
            detectedCommand = "모두 개선";
        }
    }
    
    private async void CheckKoreanCommand(KeyboardEventArgs e)
    {
        // 먼저 한글 명령 검사
        CheckKoreanCommandOnInput();
        
        // Enter 키를 눌렀고 감지된 명령이 있으면 실행
        if (e.Key == "Enter" && detectedCommand != null)
        {
            // 해당 명령 실행
            if (koreanCommands.ContainsKey(detectedCommand))
            {
                koreanCommands[detectedCommand].Invoke();
                await InvokeAsync(StateHasChanged);
                
                // 작업 추가 자동 실행
                await Task.Delay(100); // UI 업데이트 대기
                await AddTask();
            }
        }
    }
    
    private async Task CheckLearningStatus()
    {
        // 주기적으로 학습 상태 확인
        learningTimer = new System.Threading.Timer(async _ =>
        {
            try
            {
                var response = await Http.GetFromJsonAsync<LearningStatusResponse>("https://localhost:7001/api/RAGStatus/learning-status");
                if (response?.Success == true)
                {
                    isLearning = response.Data.IsLearning;
                    learningMessage = response.Data.Message;
                    learningProgress = response.Data.Progress;
                    currentLearningFile = response.Data.CurrentFile;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch
            {
                // 에러 무시
            }
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1)); // 1분마다 업데이트
    }
    
    private async Task LoadRAGStatus()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<RAGStatusResponse>("https://localhost:7001/api/RAGStatus/status");
            if (response?.Success == true)
            {
                ragStatus = response.Data;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"RAG 상태 로드 실패: {ex.Message}");
        }
    }

    private void SetQuickTask(string taskType)
    {
        // 이전 감지된 명령 초기화
        detectedCommand = null;
        
        switch (taskType)
        {
            case "unity_player":
                targetFolder = "../Assets/Scripts";
                filePattern = "PlayerController.cs";
                modificationType = "create";
                description = "Unity 플레이어 컨트롤러 스크립트 생성 (WASD 이동, 점프, 달리기 포함)";
                break;
            case "unity_enemy":
                targetFolder = "../Assets/Scripts";
                filePattern = "EnemyAI.cs";
                modificationType = "create";
                description = "Unity 적 AI 스크립트 생성 (플레이어 추적, NavMesh 사용)";
                break;
            case "game_manager":
                targetFolder = "../Assets/Scripts";
                filePattern = "GameManager.cs";
                modificationType = "create";
                description = "Unity 게임 매니저 스크립트 생성 (점수, 일시정지, 씬 관리)";
                break;
            case "improve_all":
                targetFolder = "../Assets/Scripts";
                filePattern = "*.cs";
                modificationType = "improve";
                description = "모든 Unity 스크립트에 성능 최적화 및 주석 추가";
                break;
        }
        
        // 빠른 선택 후 명령 다시 확인
        CheckKoreanCommandOnInput();
        StateHasChanged();
    }

    private async Task AddTask()
    {
        try
        {
            isAddingTask = true;
            addTaskMessage = "";
            
            // 작업 설명이 비어있으면 중단
            if (string.IsNullOrWhiteSpace(description))
            {
                addTaskMessage = "⚠️ 작업 설명을 입력해주세요.";
                return;
            }
            
            var request = new
            {
                targetFolder,
                filePattern,
                modificationType,
                description
            };

            var response = await Http.PostAsJsonAsync("/api/CodeModifier/add-task", request);
            
            if (response.IsSuccessStatusCode)
            {
                addTaskMessage = "✅ 작업이 성공적으로 추가되었습니다!";
                await RefreshStatus();
                
                // 성공 후 입력 필드 초기화
                description = "";
                detectedCommand = null;
            }
            else
            {
                addTaskMessage = "❌ 작업 추가에 실패했습니다.";
            }
        }
        catch (Exception ex)
        {
            addTaskMessage = $"❌ 오류: {ex.Message}";
        }
        finally
        {
            isAddingTask = false;
            StateHasChanged();
        }
    }

    private async Task StartContinuous()
    {
        try
        {
            isContinuousRunning = true;
            
            var response = await Http.PostAsync("/api/CodeModifier/start-continuous", null);
            
            if (response.IsSuccessStatusCode)
            {
                addTaskMessage = "🚀 24시간 연속 모드가 시작되었습니다!";
            }
            else
            {
                addTaskMessage = "❌ 연속 모드 시작에 실패했습니다.";
            }
        }
        catch (Exception ex)
        {
            addTaskMessage = $"❌ 오류: {ex.Message}";
        }
        finally
        {
            isContinuousRunning = false;
        }
    }

    private async Task AddExamples()
    {
        try
        {
            var response = await Http.PostAsync("/api/CodeModifier/add-examples", null);
            
            if (response.IsSuccessStatusCode)
            {
                addTaskMessage = "🎯 3개의 예시 작업이 추가되었습니다!";
                await RefreshStatus();
            }
            else
            {
                addTaskMessage = "❌ 예시 작업 추가에 실패했습니다.";
            }
        }
        catch (Exception ex)
        {
            addTaskMessage = $"❌ 오류: {ex.Message}";
        }
    }

    private async Task RefreshStatus()
    {
        try
        {
            var response = await Http.GetAsync("/api/CodeModifier/status");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                // 간단한 상태 업데이트
                currentStatus.Pending = 0;
                currentStatus.InProgress = 0;
                currentStatus.Completed = 0;
                currentStatus.Failed = 0;
            }
        }
        catch (Exception)
        {
            // 로깅 또는 오류 처리
        }
    }

    // 데이터 모델
    public class StatusInfo
    {
        public int Pending { get; set; }
        public int InProgress { get; set; }
        public int Completed { get; set; }
        public int Failed { get; set; }
    }
    
    public class RAGStatus
    {
        public int TotalKnowledge { get; set; }
        public int Categories { get; set; }
        public int Templates { get; set; }
        public bool RAGEnabled { get; set; }
    }
    
    public class RAGStatusResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
        public RAGStatus Data { get; set; } = new();
    }
    
    public class LearningStatusData
    {
        public bool IsLearning { get; set; }
        public string Message { get; set; } = "";
        public int Progress { get; set; }
        public string CurrentFile { get; set; } = "";
    }
    
    public class LearningStatusResponse
    {
        public bool Success { get; set; }
        public LearningStatusData Data { get; set; } = new();
    }
    
    public class KoreanCommandAnalysisResult
    {
        public bool Success { get; set; }
        public string? CommandType { get; set; }
        public string? Intent { get; set; }
        public double Confidence { get; set; }
        public List<string> Entities { get; set; } = new();
        public string? Message { get; set; }
        public string? Suggestion { get; set; }
    }
    
    // AutoCI Terminal related fields
    private HubConnection? hubConnection;
    private List<TerminalLine> terminalLines = new();
    private List<ProcessInfo> activeProcesses = new();
    private bool isExecuting = false;
    private string customCommand = "";
    private bool autoScroll = true;
    private ElementReference terminalElement;
    private string? currentProcessId;


    private async Task InitializeSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hubs/autoci"))
                .Build();

            hubConnection.On<dynamic>("ProcessOutput", async (data) =>
            {
                var output = data.output.ToString();
                var processId = data.processId.ToString();
                
                AddTerminalLine(output, "output");
                await InvokeAsync(StateHasChanged);
                if (autoScroll)
                {
                    await ScrollToBottom();
                }
            });

            hubConnection.On<dynamic>("ProcessError", async (data) =>
            {
                var error = data.error.ToString();
                var processId = data.processId.ToString();
                
                AddTerminalLine(error, "error");
                await InvokeAsync(StateHasChanged);
                if (autoScroll)
                {
                    await ScrollToBottom();
                }
            });

            hubConnection.On<dynamic>("ProcessComplete", async (data) =>
            {
                var processId = data.processId.ToString();
                var status = data.status.ToString();
                var duration = Convert.ToDouble(data.duration);
                
                AddTerminalLine($"Process completed with status: {status} (Duration: {duration:F2}s)", status == "Completed" ? "success" : "error");
                await RefreshActiveProcesses();
                isExecuting = false;
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<dynamic>("SystemStatus", async (status) =>
            {
                // Update system status indicators
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<dynamic>("PythonProcesses", async (processes) =>
            {
                // Update Python process list if needed
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            AddTerminalLine("Connected to AutoCI terminal", "info");
        }
        catch (Exception ex)
        {
            AddTerminalLine($"Failed to connect to terminal: {ex.Message}", "error");
        }
    }

    private async Task ExecuteAutoCI(string command, string arguments)
    {
        isExecuting = true;
        AddTerminalLine($"$ autoci {command} {arguments}", "command");
        
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7001/api/AutoCI/execute", new
            {
                command,
                arguments
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                currentProcessId = result?.processId?.ToString();
                AddTerminalLine($"Process started with ID: {currentProcessId}", "info");
                await RefreshActiveProcesses();
            }
            else
            {
                AddTerminalLine($"Failed to execute command: {response.StatusCode}", "error");
                isExecuting = false;
            }
        }
        catch (Exception ex)
        {
            AddTerminalLine($"Error: {ex.Message}", "error");
            isExecuting = false;
        }
    }

    private async Task ExecuteCustomCommand()
    {
        if (string.IsNullOrWhiteSpace(customCommand))
            return;

        var parts = customCommand.Split(' ', 2);
        var command = parts.Length > 0 ? parts[0] : "";
        var arguments = parts.Length > 1 ? parts[1] : "";

        // Remove "autoci" prefix if present
        if (command.ToLower() == "autoci" && arguments.Length > 0)
        {
            var subParts = arguments.Split(' ', 2);
            command = subParts[0];
            arguments = subParts.Length > 1 ? subParts[1] : "";
        }

        await ExecuteAutoCI(command, arguments);
        customCommand = "";
    }

    private async Task HandleCommandKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(customCommand))
        {
            await ExecuteCustomCommand();
        }
    }

    private async Task StopProcess(string processId)
    {
        try
        {
            var response = await Http.PostAsync($"https://localhost:7001/api/AutoCI/stop/{processId}", null);
            if (response.IsSuccessStatusCode)
            {
                AddTerminalLine($"Stopping process {processId}...", "info");
                await RefreshActiveProcesses();
            }
        }
        catch (Exception ex)
        {
            AddTerminalLine($"Error stopping process: {ex.Message}", "error");
        }
    }

    private async Task RefreshActiveProcesses()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ProcessInfo>>("https://localhost:7001/api/AutoCI/active");
            activeProcesses = response ?? new List<ProcessInfo>();
        }
        catch
        {
            activeProcesses = new List<ProcessInfo>();
        }
    }

    private void AddTerminalLine(string content, string type)
    {
        // Split content by newlines and add each as a separate line
        var lines = content.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        foreach (var line in lines)
        {
            if (!string.IsNullOrWhiteSpace(line))
            {
                terminalLines.Add(new TerminalLine
                {
                    Content = line,
                    Type = type,
                    Timestamp = DateTime.Now
                });
            }
        }

        // Keep only last 1000 lines
        if (terminalLines.Count > 1000)
        {
            terminalLines = terminalLines.Skip(terminalLines.Count - 1000).ToList();
        }
    }

    private void ClearTerminal()
    {
        terminalLines.Clear();
        AddTerminalLine("Terminal cleared", "info");
    }

    private void ToggleAutoScroll()
    {
        autoScroll = !autoScroll;
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", terminalElement);
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Running" => "info",
            "Completed" => "success",
            "Failed" => "danger",
            "Stopped" => "warning",
            _ => "secondary"
        };
    }

    // Terminal data models
    public class TerminalLine
    {
        public string Content { get; set; } = "";
        public string Type { get; set; } = "output";
        public DateTime Timestamp { get; set; }
    }

    public class ProcessInfo
    {
        public string Id { get; set; } = "";
        public string Command { get; set; } = "";
        public string Arguments { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
    }

    private async Task ExecuteAutoCI_EnhanceStart()
    {
        isExecutingCommand = true;
        commandOutput = "🚀 24시간 자동 코드 수정 시스템 시작 중...\n";
        StateHasChanged();
        
        try
        {
            var response = await Http.PostAsync("/api/AutoCI/execute", 
                JsonContent.Create(new { command = "enhance start" }));
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                commandOutput += $"✅ 성공: {result}\n";
                addTaskMessage = "🎯 24시간 자동 시스템이 시작되었습니다!";
            }
            else
            {
                commandOutput += $"❌ 실패: {response.StatusCode}\n";
            }
        }
        catch (Exception ex)
        {
            commandOutput += $"❌ 오류: {ex.Message}\n";
        }
        finally
        {
            isExecutingCommand = false;
            StateHasChanged();
        }
    }
    
    private async Task ExecuteAutoCI_DualStart()
    {
        isExecutingCommand = true;
        commandOutput = "🔄 Dual Phase System (RAG + Fine-tuning) 시작 중...\n";
        StateHasChanged();
        
        try
        {
            var response = await Http.PostAsync("/api/AutoCI/execute", 
                JsonContent.Create(new { command = "dual start" }));
            
            if (response.IsSuccessStatusCode)
            {
                commandOutput += "✅ RAG 시스템: http://localhost:8000/rag\n";
                commandOutput += "✅ 모니터링: http://localhost:8080\n";
                addTaskMessage = "🎯 Dual Phase 시스템이 시작되었습니다!";
            }
        }
        catch (Exception ex)
        {
            commandOutput += $"❌ 오류: {ex.Message}\n";
        }
        finally
        {
            isExecutingCommand = false;
            StateHasChanged();
        }
    }
    
    private async Task ExecuteAutoCI_DataCollect()
    {
        isExecutingCommand = true;
        commandOutput = "📚 전문가 데이터 수집 중 (GitHub Stars 10,000+, Stack Overflow Score 50+)...\n";
        StateHasChanged();
        
        try
        {
            var response = await Http.PostAsync("/api/AutoCI/execute", 
                JsonContent.Create(new { command = "enhance collect" }));
            
            if (response.IsSuccessStatusCode)
            {
                commandOutput += "✅ GitHub 프로젝트 수집 완료\n";
                commandOutput += "✅ Stack Overflow 질문 수집 완료\n";
                commandOutput += "✅ Microsoft Docs 수집 완료\n";
                addTaskMessage = "🎯 전문가 데이터 수집이 완료되었습니다!";
            }
        }
        catch (Exception ex)
        {
            commandOutput += $"❌ 오류: {ex.Message}\n";
        }
        finally
        {
            isExecutingCommand = false;
            StateHasChanged();
        }
    }
    
    private async Task ExecuteAutoCI_Index()
    {
        isExecutingCommand = true;
        commandOutput = "🔍 벡터 기반 인덱싱 (FAISS + Sentence Transformers) 실행 중...\n";
        StateHasChanged();
        
        try
        {
            var response = await Http.PostAsync("/api/AutoCI/execute", 
                JsonContent.Create(new { command = "data index" }));
            
            if (response.IsSuccessStatusCode)
            {
                commandOutput += "✅ 코드 패턴 분석 완료\n";
                commandOutput += "✅ 벡터 임베딩 생성 완료\n";
                commandOutput += "✅ FAISS 인덱스 구축 완료\n";
                addTaskMessage = "🎯 고속 검색을 위한 인덱싱이 완료되었습니다!";
            }
        }
        catch (Exception ex)
        {
            commandOutput += $"❌ 오류: {ex.Message}\n";
        }
        finally
        {
            isExecutingCommand = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        learningTimer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
