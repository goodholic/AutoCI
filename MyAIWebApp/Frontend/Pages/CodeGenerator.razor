@page "/codegen"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>AI 코드 생성 - AutoCI</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-lg-12">
            <div class="d-flex align-items-center mb-4">
                <h1 class="h2 me-3">🤖 AI 코드 생성기</h1>
                <span class="badge bg-primary">Code Llama 7B-Instruct</span>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- 왼쪽: 입력 영역 -->
        <div class="col-lg-5">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-pencil-square me-2"></i>코드 요청사항</h5>
                </div>
                <div class="card-body">
                    <!-- 빠른 템플릿 선택 -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">🚀 빠른 템플릿</label>
                        <div class="d-grid gap-2">
                            <button @onclick="@(() => SetTemplate("unity_player"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-controller me-2"></i>Unity 플레이어 컨트롤러
                            </button>
                            <button @onclick="@(() => SetTemplate("unity_enemy"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-bug me-2"></i>Unity 적 AI 스크립트
                            </button>
                            <button @onclick="@(() => SetTemplate("aspnet_controller"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-server me-2"></i>ASP.NET API 컨트롤러
                            </button>
                            <button @onclick="@(() => SetTemplate("singleton"))" class="btn btn-outline-primary btn-sm text-start">
                                <i class="bi bi-box me-2"></i>싱글톤 패턴 클래스
                            </button>
                        </div>
                    </div>

                    <!-- 프롬프트 입력 -->
                    <div class="mb-3">
                        <label for="prompt" class="form-label fw-bold">📝 어떤 코드를 만들어드릴까요?</label>
                        <textarea @bind="prompt" 
                                  class="form-control" 
                                  id="prompt" 
                                  rows="8" 
                                  placeholder="예시: Unity에서 3인칭 카메라를 따라다니는 플레이어 이동 스크립트를 만들어줘. WASD로 이동하고 Space로 점프할 수 있게 해줘.">
                        </textarea>
                        <small class="text-muted">자세히 설명할수록 더 정확한 코드를 생성합니다.</small>
                    </div>

                    <!-- 옵션 설정 -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">⚙️ 생성 옵션</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="addComments" id="addComments">
                            <label class="form-check-label" for="addComments">
                                주석 포함
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="addExamples" id="addExamples">
                            <label class="form-check-label" for="addExamples">
                                사용 예시 포함
                            </label>
                        </div>
                    </div>

                    <!-- 생성 버튼 -->
                    <div class="d-grid">
                        <button @onclick="GenerateCode" 
                                class="btn btn-primary btn-lg" 
                                disabled="@isGenerating">
                            @if (isGenerating)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>코드 생성 중...</span>
                            }
                            else
                            {
                                <i class="bi bi-magic me-2"></i>
                                <span>코드 생성하기</span>
                            }
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 mb-0" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- 오른쪽: 결과 영역 -->
        <div class="col-lg-7">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-code-slash me-2"></i>생성된 코드</h5>
                    @if (!string.IsNullOrEmpty(generatedCode))
                    {
                        <button @onclick="CopyToClipboard" class="btn btn-sm btn-light">
                            <i class="bi bi-clipboard"></i> 복사
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (string.IsNullOrEmpty(generatedCode))
                    {
                        <div class="text-center text-muted py-5">
                            <i class="bi bi-code-square" style="font-size: 4rem;"></i>
                            <p class="mt-3">왼쪽에서 원하는 기능을 설명하고 '코드 생성하기' 버튼을 클릭하세요.</p>
                            <small>생성된 코드가 여기에 표시됩니다.</small>
                        </div>
                    }
                    else
                    {
                        <pre class="language-csharp"><code>@generatedCode</code></pre>
                        
                        <!-- 추가 작업 버튼들 -->
                        <div class="mt-3 d-flex gap-2 flex-wrap">
                            <button @onclick="ImproveCode" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-arrow-clockwise me-1"></i>코드 개선하기
                            </button>
                            <button @onclick="AddTests" class="btn btn-outline-secondary btn-sm">
                                <i class="bi bi-check2-square me-1"></i>테스트 코드 추가
                            </button>
                            <button @onclick="ExplainCode" class="btn btn-outline-info btn-sm">
                                <i class="bi bi-question-circle me-1"></i>코드 설명
                            </button>
                            <button @onclick="SaveFeedback" class="btn btn-outline-success btn-sm">
                                <i class="bi bi-hand-thumbs-up me-1"></i>학습 데이터로 저장
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- 사용 팁 -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0"><i class="bi bi-lightbulb me-2"></i>사용 팁</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6 class="fw-bold">✅ 좋은 프롬프트 예시</h6>
                            <ul class="small">
                                <li>구체적인 기능 설명</li>
                                <li>사용할 Unity 컴포넌트 명시</li>
                                <li>원하는 디자인 패턴 언급</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="fw-bold">🎯 지원하는 코드 유형</h6>
                            <ul class="small">
                                <li>Unity MonoBehaviour 스크립트</li>
                                <li>ASP.NET Core 컨트롤러/서비스</li>
                                <li>일반 C# 클래스 및 인터페이스</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="fw-bold">💡 추가 기능</h6>
                            <ul class="small">
                                <li>생성된 코드 즉시 개선 가능</li>
                                <li>자동으로 학습 데이터 수집</li>
                                <li>피드백으로 모델 성능 향상</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string prompt = "";
    private string generatedCode = "";
    private bool isGenerating = false;
    private string errorMessage = "";
    private bool addComments = true;
    private bool addExamples = false;

    private Dictionary<string, string> templates = new Dictionary<string, string>
    {
        ["unity_player"] = "Unity에서 3인칭 플레이어 컨트롤러 스크립트를 만들어줘. WASD로 이동, 마우스로 회전, Space로 점프, Shift로 달리기 기능을 포함해줘.",
        ["unity_enemy"] = "Unity에서 플레이어를 추적하는 적 AI 스크립트를 만들어줘. 일정 거리 내에서 플레이어를 감지하고, NavMeshAgent를 사용해서 추적하도록 해줘.",
        ["aspnet_controller"] = "ASP.NET Core에서 RESTful API 컨트롤러를 만들어줘. CRUD 작업을 위한 GET, POST, PUT, DELETE 엔드포인트를 포함하고, 비동기 처리와 에러 핸들링을 추가해줘.",
        ["singleton"] = "C#으로 스레드 안전한 싱글톤 패턴 클래스를 만들어줘. Lazy<T>를 사용한 지연 초기화와 함께 구현해줘."
    };

    private void SetTemplate(string templateKey)
    {
        if (templates.TryGetValue(templateKey, out var template))
        {
            prompt = template;
        }
    }

    private async Task GenerateCode()
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            errorMessage = "코드 설명을 입력해주세요.";
            return;
        }

        isGenerating = true;
        errorMessage = "";
        generatedCode = "";

        try
        {
            var enhancedPrompt = prompt;
            if (addComments)
            {
                enhancedPrompt += "\n\n주석을 포함해서 코드를 작성해주세요.";
            }
            if (addExamples)
            {
                enhancedPrompt += "\n\n사용 예시도 함께 포함해주세요.";
            }

            var response = await Http.PostAsJsonAsync("api/ai/generate", 
                new { prompt = enhancedPrompt });
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<GenerateResponse>();
                generatedCode = result?.Code ?? "// 코드 생성 실패";
            }
            else
            {
                errorMessage = "서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"오류 발생: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task ImproveCode()
    {
        if (string.IsNullOrEmpty(generatedCode)) return;

        var improvePrompt = $"다음 코드를 개선해줘. 성능 최적화, 에러 처리, 코드 가독성을 향상시켜줘:\n\n{generatedCode}";
        prompt = improvePrompt;
        await GenerateCode();
    }

    private async Task AddTests()
    {
        if (string.IsNullOrEmpty(generatedCode)) return;

        var testPrompt = $"다음 코드에 대한 단위 테스트를 작성해줘:\n\n{generatedCode}";
        prompt = testPrompt;
        await GenerateCode();
    }

    private async Task ExplainCode()
    {
        if (string.IsNullOrEmpty(generatedCode)) return;

        var explainPrompt = $"다음 코드를 한글로 자세히 설명해줘:\n\n{generatedCode}";
        prompt = explainPrompt;
        await GenerateCode();
    }

    private async Task SaveFeedback()
    {
        if (string.IsNullOrEmpty(generatedCode)) return;

        try
        {
            var feedback = new
            {
                prompt = prompt,
                code = generatedCode,
                rating = "positive"
            };

            await Http.PostAsJsonAsync("api/ai/feedback", feedback);
            await JSRuntime.InvokeVoidAsync("alert", "학습 데이터로 저장되었습니다! 모델 성능 향상에 도움이 됩니다.");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("alert", "저장 중 오류가 발생했습니다.");
        }
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedCode);
        await JSRuntime.InvokeVoidAsync("alert", "코드가 클립보드에 복사되었습니다!");
    }

    public class GenerateResponse
    {
        public string Code { get; set; } = "";
        public string Explanation { get; set; } = "";
    }
}