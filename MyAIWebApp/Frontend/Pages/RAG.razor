@page "/rag"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>ÌîÑÎ°úÏ†ùÌä∏ Q&A - AutoCI</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-lg-12">
            <div class="d-flex align-items-center mb-4">
                <h1 class="h2 me-3">üí¨ ÌîÑÎ°úÏ†ùÌä∏ Q&A</h1>
                <span class="badge bg-info">RAG ÏãúÏä§ÌÖú</span>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- ÏôºÏ™Ω: Î¨∏ÏÑú Í¥ÄÎ¶¨ Î∞è ÏßàÎ¨∏ -->
        <div class="col-lg-4">
            <!-- README Ïù∏Îç±Ïã± Ïπ¥Îìú -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="bi bi-file-text me-2"></i>Î¨∏ÏÑú Ïù∏Îç±Ïã±</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">üìÑ README ÌååÏùº Í≤ΩÎ°ú</label>
                        <div class="input-group">
                            <input type="text" 
                                   class="form-control" 
                                   @bind="readmePath" 
                                   placeholder="README.md Í≤ΩÎ°ú" />
                            <button class="btn btn-outline-secondary" 
                                    @onclick="LoadCurrentProjectReadme"
                                    title="ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ README ÏûêÎèô ÏûÖÎ†•">
                                <i class="bi bi-folder2-open"></i>
                            </button>
                        </div>
                        <small class="text-muted">ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Ïùò READMEÎ•º ÏûêÎèôÏúºÎ°ú Ï∞æÏäµÎãàÎã§</small>
                    </div>
                    
                    <button class="btn btn-info text-white w-100" 
                            @onclick="IndexReadme" 
                            disabled="@isIndexing">
                        @if (isIndexing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Ïù∏Îç±Ïã± Ï§ë...</span>
                        }
                        else
                        {
                            <i class="bi bi-database-add me-2"></i>
                            <span>Î¨∏ÏÑú Ïù∏Îç±Ïã± ÏãúÏûë</span>
                        }
                    </button>

                    @if (isDocumentIndexed)
                    {
                        <div class="alert alert-success mt-3 mb-0" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            Î¨∏ÏÑúÍ∞Ä Ïù∏Îç±Ïã±ÎêòÏñ¥ ÏßàÎ¨∏Ìï† Ïàò ÏûàÏäµÎãàÎã§!
                        </div>
                    }
                </div>
            </div>

            <!-- Ïù∏Îç±Ïã±Îêú Î¨∏ÏÑú Î™©Î°ù -->
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h6 class="mb-0"><i class="bi bi-collection me-2"></i>Ïù∏Îç±Ïã±Îêú Î¨∏ÏÑú</h6>
                </div>
                <div class="card-body">
                    @if (indexedDocuments.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var doc in indexedDocuments)
                            {
                                <div class="list-group-item px-0">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1 text-truncate">@doc.Title</h6>
                                        <small class="text-success">
                                            <i class="bi bi-check-circle"></i>
                                        </small>
                                    </div>
                                    <small class="text-muted text-truncate d-block">@doc.FilePath</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center mb-0">
                            <i class="bi bi-inbox" style="font-size: 2rem;"></i><br>
                            ÏïÑÏßÅ Ïù∏Îç±Ïã±Îêú Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§
                        </p>
                    }
                </div>
            </div>
        </div>

        <!-- Ïò§Î•∏Ï™Ω: Ï±ÑÌåÖ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ -->
        <div class="col-lg-8">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-chat-dots me-2"></i>ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎåÄÌï¥ Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî</h5>
                </div>
                <div class="card-body d-flex flex-column" style="height: 600px;">
                    <!-- ÎåÄÌôî ÎÇ¥Ïö© -->
                    <div class="chat-container flex-grow-1 overflow-auto mb-3 p-3 bg-light rounded">
                        @if (!conversations.Any())
                        {
                            <div class="text-center text-muted py-5">
                                <i class="bi bi-chat-left-text" style="font-size: 3rem;"></i>
                                <p class="mt-3">ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎåÄÌï¥ Í∂ÅÍ∏àÌïú Ï†êÏùÑ Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî!</p>
                                <div class="mt-3">
                                    <small class="d-block mb-2">üí° ÏòàÏãú ÏßàÎ¨∏:</small>
                                    <button @onclick='() => SetSampleQuestion("Ïù¥ ÌîÑÎ°úÏ†ùÌä∏Ïùò Ï£ºÏöî Í∏∞Îä•ÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?")' 
                                            class="btn btn-sm btn-outline-secondary m-1">
                                        Ï£ºÏöî Í∏∞Îä• ÏÑ§Î™Ö
                                    </button>
                                    <button @onclick='() => SetSampleQuestion("ÌîÑÎ°úÏ†ùÌä∏ Ïã§Ìñâ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî")' 
                                            class="btn btn-sm btn-outline-secondary m-1">
                                        Ïã§Ìñâ Î∞©Î≤ï
                                    </button>
                                    <button @onclick='() => SetSampleQuestion("ÌïÑÏöîÌïú ÌôòÍ≤Ω ÏÑ§Ï†ïÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?")' 
                                            class="btn btn-sm btn-outline-secondary m-1">
                                        ÌôòÍ≤Ω ÏÑ§Ï†ï
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var conv in conversations)
                            {
                                <!-- ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ -->
                                <div class="d-flex justify-content-end mb-3">
                                    <div class="chat-bubble chat-bubble-user">
                                        <div class="d-flex align-items-start">
                                            <div class="me-2">
                                                <strong>ÎÇò</strong>
                                                <p class="mb-0">@conv.Question</p>
                                            </div>
                                            <i class="bi bi-person-circle fs-4"></i>
                                        </div>
                                        <small class="text-muted">@conv.Timestamp.ToString("HH:mm")</small>
                                    </div>
                                </div>

                                <!-- AI ÎãµÎ≥Ä -->
                                <div class="d-flex justify-content-start mb-3">
                                    <div class="chat-bubble chat-bubble-ai">
                                        <div class="d-flex align-items-start">
                                            <i class="bi bi-robot fs-4 me-2"></i>
                                            <div>
                                                <strong>AutoCI</strong>
                                                <p class="mb-0 white-space-pre-wrap">@conv.Answer</p>
                                            </div>
                                        </div>
                                        <small class="text-muted">@conv.Timestamp.ToString("HH:mm")</small>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <!-- ÏßàÎ¨∏ ÏûÖÎ†• -->
                    <div class="chat-input">
                        <div class="input-group">
                            <textarea @bind="question" 
                                      @bind:event="oninput"
                                      @onkeydown="@(async (e) => { if (e.Key == "Enter" && !e.ShiftKey) { await HandleEnterKey(e); } })"
                                      class="form-control" 
                                      placeholder="ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî... (Shift+EnterÎ°ú Ï§ÑÎ∞îÍøà)"
                                      rows="2"
                                      disabled="@(!isDocumentIndexed)">
                            </textarea>
                            <button class="btn btn-primary" 
                                    @onclick="AskQuestion" 
                                    disabled="@(isQuerying || !isDocumentIndexed || string.IsNullOrWhiteSpace(question))">
                                @if (isQuerying)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                }
                                else
                                {
                                    <i class="bi bi-send-fill"></i>
                                }
                            </button>
                        </div>
                        @if (!isDocumentIndexed)
                        {
                            <small class="text-danger mt-1">Î®ºÏ†Ä README ÌååÏùºÏùÑ Ïù∏Îç±Ïã±Ìï¥Ï£ºÏÑ∏Ïöî.</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- ÏóêÎü¨/ÏÑ±Í≥µ Î©îÏãúÏßÄ -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    <!-- ÏÇ¨Ïö© ÏïàÎÇ¥ -->
    <div class="row mt-5">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>RAG ÏãúÏä§ÌÖú ÏÇ¨Ïö© ÏïàÎÇ¥</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6 class="fw-bold">üìö RAGÎûÄ?</h6>
                            <p class="small mb-0">
                                Retrieval-Augmented GenerationÏùò ÏïΩÏûêÎ°ú, Î¨∏ÏÑúÎ•º Í∏∞Î∞òÏúºÎ°ú Ï†ïÌôïÌïú ÎãµÎ≥ÄÏùÑ ÏÉùÏÑ±ÌïòÎäî AI ÏãúÏä§ÌÖúÏûÖÎãàÎã§.
                            </p>
                        </div>
                        <div class="col-md-4">
                            <h6 class="fw-bold">üéØ ÌôúÏö© Î∞©Î≤ï</h6>
                            <ul class="small mb-0">
                                <li>ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Ïù¥Ìï¥</li>
                                <li>ÏÑ§Ïπò Î∞è Ïã§Ìñâ Î∞©Î≤ï ÌôïÏù∏</li>
                                <li>API ÏÇ¨Ïö©Î≤ï Î¨∏Ïùò</li>
                                <li>Ìä∏Îü¨Î∏îÏäàÌåÖ Í∞ÄÏù¥Îìú</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="fw-bold">üí° ÌåÅ</h6>
                            <ul class="small mb-0">
                                <li>Íµ¨Ï≤¥Ï†ÅÏù∏ ÏßàÎ¨∏Ïù¥ Îçî Ï†ïÌôïÌïú ÎãµÎ≥ÄÏùÑ Î∞õÏäµÎãàÎã§</li>
                                <li>Í∏∞Ïà†Ï†ÅÏù∏ Ïö©Ïñ¥Î•º ÏÇ¨Ïö©Ìï¥ÎèÑ Îê©ÎãàÎã§</li>
                                <li>Ïó¨Îü¨ Î≤à ÏßàÎ¨∏ÌïòÏó¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÏñªÏúºÏÑ∏Ïöî</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-container {
        min-height: 400px;
        max-height: 500px;
    }
    
    .chat-bubble {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 16px;
        margin-bottom: 4px;
    }
    
    .chat-bubble-user {
        background-color: #007bff;
        color: white;
        border-bottom-right-radius: 4px;
    }
    
    .chat-bubble-ai {
        background-color: #e9ecef;
        color: #212529;
        border-bottom-left-radius: 4px;
    }
    
    .chat-bubble-user small {
        color: rgba(255, 255, 255, 0.7);
    }
    
    .white-space-pre-wrap {
        white-space: pre-wrap;
    }
    
    .chat-input textarea {
        resize: none;
        border-right: none;
    }
    
    .chat-input button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        width: 60px;
    }
</style>

@code {
    private string readmePath = "";
    private string question = "";
    private bool isIndexing = false;
    private bool isQuerying = false;
    private bool isDocumentIndexed = false;
    
    private List<Conversation> conversations = new();
    private List<Document> indexedDocuments = new();
    
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    private void LoadCurrentProjectReadme()
    {
        readmePath = "/mnt/c/Users/super/Desktop/Unity Project(25ÎÖÑÎèÑ Ï†úÏûë)/26.AutoCI/AutoCI/README.md";
        successMessage = "ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Ïùò README Í≤ΩÎ°úÍ∞Ä ÏûêÎèôÏúºÎ°ú ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§.";
    }

    private void SetSampleQuestion(string sampleQuestion)
    {
        question = sampleQuestion;
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await AskQuestion();
        }
    }

    private async Task IndexReadme()
    {
        if (string.IsNullOrWhiteSpace(readmePath))
        {
            errorMessage = "README ÌååÏùº Í≤ΩÎ°úÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";
            return;
        }

        isIndexing = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var request = new IndexReadmeRequest { ReadmePath = readmePath };
            var response = await Http.PostAsJsonAsync("api/rag/index-readme", request);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = "README ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïù∏Îç±Ïã±ÎêòÏóàÏäµÎãàÎã§! Ïù¥Ï†ú ÏßàÎ¨∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.";
                isDocumentIndexed = true;
                await LoadDocuments();
            }
            else
            {
                errorMessage = "README ÌååÏùº Ïù∏Îç±Ïã±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌååÏùº Í≤ΩÎ°úÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ïù∏Îç±Ïã± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isIndexing = false;
        }
    }

    private async Task AskQuestion()
    {
        if (string.IsNullOrWhiteSpace(question)) return;

        isQuerying = true;
        errorMessage = "";
        
        // ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ÏùÑ Î®ºÏ†Ä ÎåÄÌôîÏóê Ï∂îÍ∞Ä (ÏûÑÏãú ÎãµÎ≥ÄÍ≥º Ìï®Íªò)
        var newConversation = new Conversation
        {
            Question = question,
            Answer = "ÎãµÎ≥ÄÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...",
            Timestamp = DateTime.Now
        };
        conversations.Add(newConversation);
        
        var currentQuestion = question;
        question = ""; // ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
        
        try
        {
            var request = new QueryRequest { Question = currentQuestion };
            var response = await Http.PostAsJsonAsync("api/rag/query", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<QueryResponse>();
                if (result != null)
                {
                    // Ïã§Ï†ú ÎãµÎ≥ÄÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                    newConversation.Answer = result.Answer;
                }
            }
            else
            {
                newConversation.Answer = "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏßàÎ¨∏ÏùÑ Ï≤òÎ¶¨ÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.";
                errorMessage = "ÏßàÎ¨∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.";
            }
        }
        catch (Exception ex)
        {
            newConversation.Answer = "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏÑúÎ≤ÑÏôÄ ÌÜµÏã† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.";
            errorMessage = $"ÏßàÎ¨∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isQuerying = false;
            StateHasChanged();
        }
    }

    private async Task LoadDocuments()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Document>>("api/rag/documents");
            indexedDocuments = response ?? new();
            isDocumentIndexed = indexedDocuments.Any();
        }
        catch
        {
            // Ïò§Î•ò Î¨¥Ïãú
        }
    }

    public class IndexReadmeRequest
    {
        public string ReadmePath { get; set; } = "";
    }

    public class QueryRequest
    {
        public string Question { get; set; } = "";
    }

    public class QueryResponse
    {
        public string Question { get; set; } = "";
        public string Answer { get; set; } = "";
    }

    public class Conversation
    {
        public string Question { get; set; } = "";
        public string Answer { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    public class Document
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public string FilePath { get; set; } = "";
    }
}