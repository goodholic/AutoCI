{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 91}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 86}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 86}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 89}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 86}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 86}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 89}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 91}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 88}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 91}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 86}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 98}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 91}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 91}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 89}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 96}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 97}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 88}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 86}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 93}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 87}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult>\n{\n    Task<TResult> ExecuteAsync();\n}\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CommandBus\n{\n    private readonly IServiceProvider _serviceProvider;\n    \n    public CommandBus(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    \n    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command)\n    {\n        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(command.GetType(), typeof(TResult));\n        var handler = _serviceProvider.GetService(handlerType);\n        \n        if (handler == null)\n            throw new InvalidOperationException($\"Handler not found for {command.GetType().Name}\");\n        \n        var method = handlerType.GetMethod(\"HandleAsync\");\n        var task = (Task<TResult>)method.Invoke(handler, new[] { command });\n        \n        return await task;\n    }\n}\n\n// 사용 예제\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class CreateUserCommandHandler : ICommandHandler<CreateUserCommand, User>\n{\n    private readonly IUserRepository _userRepository;\n    \n    public CreateUserCommandHandler(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> HandleAsync(CreateUserCommand command)\n    {\n        var user = new User\n        {\n            Name = command.Name,\n            Email = command.Email,\n            CreatedAt = DateTime.UtcNow\n        };\n        \n        return await _userRepository.AddAsync(user);\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 91}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 99}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 85}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 90}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 94}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 88}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 100}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface IRepository<T> where T : class\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class Repository<T> : IRepository<T> where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public Repository(DbContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n        _dbSet = context.Set<T>();\n    }\n\n    public async Task<T> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<T> AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var entity = await GetByIdAsync(id);\n        if (entity != null)\n        {\n            _dbSet.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 95}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\n// Span<T>를 이용한 고성능 문자열 처리\npublic static class StringProcessor\n{\n    public static void ProcessWithSpan(ReadOnlySpan<char> input)\n    {\n        // 할당 없이 문자열 조작\n        foreach (var c in input)\n        {\n            // 문자 처리\n        }\n    }\n    \n    public static string[] SplitOptimized(string input, char separator)\n    {\n        Span<Range> ranges = stackalloc Range[100]; // 스택 할당\n        int count = input.AsSpan().Split(ranges, separator);\n        \n        var result = new string[count];\n        for (int i = 0; i < count; i++)\n        {\n            result[i] = input[ranges[i]];\n        }\n        \n        return result;\n    }\n}\n\n// ArrayPool을 이용한 메모리 재사용\npublic class BufferProcessor\n{\n    private readonly ArrayPool<byte> _arrayPool = ArrayPool<byte>.Shared;\n    \n    public async Task ProcessDataAsync(Stream stream)\n    {\n        var buffer = _arrayPool.Rent(4096);\n        try\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            // 버퍼 처리\n        }\n        finally\n        {\n            _arrayPool.Return(buffer);\n        }\n    }\n}\n", "category": "implementation_patterns", "quality_score": 92}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 89}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool<T> : MonoBehaviour where T : MonoBehaviour\n{\n    [SerializeField] private T prefab;\n    [SerializeField] private int poolSize = 10;\n    [SerializeField] private bool allowExpansion = true;\n    \n    private Queue<T> pool = new Queue<T>();\n    private HashSet<T> activeObjects = new HashSet<T>();\n    \n    private void Awake()\n    {\n        InitializePool();\n    }\n    \n    private void InitializePool()\n    {\n        for (int i = 0; i < poolSize; i++)\n        {\n            T obj = Instantiate(prefab);\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public T Get()\n    {\n        T obj = null;\n        \n        if (pool.Count > 0)\n        {\n            obj = pool.Dequeue();\n        }\n        else if (allowExpansion)\n        {\n            obj = Instantiate(prefab);\n        }\n        \n        if (obj != null)\n        {\n            obj.gameObject.SetActive(true);\n            activeObjects.Add(obj);\n        }\n        \n        return obj;\n    }\n    \n    public void Return(T obj)\n    {\n        if (activeObjects.Remove(obj))\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n    }\n    \n    public void ReturnAll()\n    {\n        foreach (var obj in activeObjects)\n        {\n            obj.gameObject.SetActive(false);\n            pool.Enqueue(obj);\n        }\n        activeObjects.Clear();\n    }\n}\n", "category": "implementation_patterns", "quality_score": 88}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic interface ICommand<TResult> { }\npublic interface IQuery<TResult> { }\n\npublic interface ICommandHandler<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    Task<TResult> HandleAsync(TCommand command);\n}\n\npublic class CreateUserCommand : ICommand<User>\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n", "category": "advanced_architecture", "quality_score": 80}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic abstract class DomainEvent\n{\n    public Guid Id { get; protected set; } = Guid.NewGuid();\n    public DateTime OccurredAt { get; protected set; } = DateTime.UtcNow;\n}\n\npublic class EventStore\n{\n    public async Task SaveEventsAsync(string aggregateId, IEnumerable<DomainEvent> events)\n    {\n        // 이벤트 저장 로직\n    }\n}\n", "category": "advanced_architecture", "quality_score": 80}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\nusing Unity.Entities;\nusing Unity.Jobs;\n\n[UpdateInGroup(typeof(SimulationSystemGroup))]\npublic partial class MovementSystem : SystemBase\n{\n    protected override void OnUpdate()\n    {\n        float deltaTime = Time.DeltaTime;\n        \n        Entities\n            .ForEach((ref Translation translation, in VelocityComponent velocity) =>\n            {\n                translation.Value += velocity.Value * deltaTime;\n            })\n            .ScheduleParallel();\n    }\n}\n", "category": "unity_expert", "quality_score": 80}
{"instruction": "다음 요구사항에 맞는 C# 코드를 생성해주세요: C# 코드 예제", "input": "", "output": "\npublic class AdvancedObjectPool<T> : MonoBehaviour where T : Component\n{\n    private Queue<T> available = new Queue<T>();\n    private HashSet<T> inUse = new HashSet<T>();\n    \n    public T Get()\n    {\n        if (available.Count > 0)\n        {\n            T obj = available.Dequeue();\n            inUse.Add(obj);\n            obj.gameObject.SetActive(true);\n            return obj;\n        }\n        return CreateNewObject();\n    }\n}\n", "category": "unity_expert", "quality_score": 80}
