[
  {
    "instruction": "What is the difference between String and string in C#?",
    "context": "What are the differences between these two, and which one should I use?\n\n```csharp\nstring s = \"Hello world!\";\nString s = \"Hello world!\";\n\n```",
    "output": "```csharp\nstring\n```\n is an alias in C# for \n```csharp\nSystem.String\n```\n.\nSo technically, there is no difference.  It's like \n```csharp\nint\n```\n vs. \n```csharp\nSystem.Int32\n```\n.\nAs far as guidelines, it's generally recommended to use \n```csharp\nstring\n```\n any time you're referring to an object.\ne.g.\n\n```csharp\nstring place = \"world\";\n\n```\n\nLikewise, I think it's generally recommended to use \n```csharp\nString\n```\n if you need to refer specifically to the class.\ne.g.\n\n```csharp\nstring greet = String.Format(\"Hello {0}!\", place);\n\n```\n\nThis is the style that Microsoft tends to use in their examples.\nIt appears that the guidance in this area may have changed, as StyleCop now enforces the use of the C# specific aliases.",
    "score": 7114,
    "tags": [
      "c#",
      ".net",
      "string",
      "types",
      "alias"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:17.033768"
  },
  {
    "instruction": "How can I enumerate an enum?",
    "context": "How can you enumerate an \n```csharp\nenum\n```\n in C#?\nE.g., the following code does not compile:\n\n```csharp\npublic enum Suit\n{\n    Spades,\n    Hearts,\n    Clubs,\n    Diamonds\n}\n\npublic void EnumerateAllSuitsDemoMethod()\n{\n    foreach (Suit suit in Suit)\n    {\n        DoSomething(suit);\n    }\n}\n\n```\n\nAnd it gives the following compile-time error:\n\n'Suit' is a 'type' but is used like a 'variable'\n\nIt fails on the \n```csharp\nSuit\n```\n keyword, the second one.",
    "output": "Update: If you're using .NET 5 or newer, use this solution.\n\n```csharp\nforeach (Suit suit in (Suit[]) Enum.GetValues(typeof(Suit)))\n{\n}\n\n```\n\nNote: The cast to \n```csharp\n(Suit[])\n```\n is not strictly necessary, but it does make the code 0.5 ns faster.",
    "score": 5323,
    "tags": [
      "c#",
      ".net",
      "loops",
      "enums",
      "enumeration"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:17.366278"
  },
  {
    "instruction": "How do I cast int to enum in C#?",
    "context": "How do I cast an \n```csharp\nint\n```\n to an \n```csharp\nenum\n```\n in C#?",
    "output": "From an int:\n\n```csharp\nYourEnum foo = (YourEnum)yourInt;\n\n```\n\nFrom a string:\n\n```csharp\nYourEnum foo = (YourEnum) Enum.Parse(typeof(YourEnum), yourString);\n\n// The foo.ToString().Contains(\",\") check is necessary for \n// enumerations marked with a [Flags] attribute.\nif (!Enum.IsDefined(typeof(YourEnum), foo) && !foo.ToString().Contains(\",\"))\n{\n    throw new InvalidOperationException(\n        $\"{yourString} is not an underlying value of the YourEnum enumeration.\"\n    );\n}\n\n```\n\nDynamically (type not known at compile-time):\n\n```csharp\nType enumType = ...;\n\n// NB: Enums can specify a base type other than 'int'\nint numericValue = ...;\n\nobject boxedEnumValue = Enum.ToObject(enumType, numericValue);\n\n```",
    "score": 4730,
    "tags": [
      "c#",
      "enums",
      "casting",
      "integer"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:17.694764"
  },
  {
    "instruction": "Case insensitive 'Contains(string)'",
    "context": "Is there a way to make the following return true?\n\n```csharp\nstring title = \"ASTRINGTOTEST\";\ntitle.Contains(\"string\");\n\n```\n\nThere doesn't seem to be an overload that allows me to set the case sensitivity. Currently I UPPERCASE them both, but that's just silly (by which I am referring to the i18n issues that come with up- and down casing).\nUPDATE\nThis question is ancient and since then I have realized I asked for a simple answer for a really vast and difficult topic if you care to investigate it fully.\nFor most cases, in mono-lingual, English code bases this answer will suffice. I'm suspecting because most people coming here fall in this category this is the most popular answer.\nThis answer however brings up the inherent problem that we can't compare text case insensitive until we know both texts are the same culture and we know  what that culture is. This is maybe a less popular answer, but I think it is more correct and that's why I marked it as such.",
    "output": "You could use the \n```csharp\nString.IndexOf\n```\n Method and pass \n```csharp\nStringComparison.OrdinalIgnoreCase\n```\n as the type of search to use:\n\n```csharp\nstring title = \"STRING\";\nbool contains = title.IndexOf(\"string\", StringComparison.OrdinalIgnoreCase) >= 0;\n\n```\n\nEven better is defining a new extension method for string:\n\n```csharp\npublic static class StringExtensions\n{\n    public static bool Contains(this string source, string toCheck, StringComparison comp)\n    {\n        return source?.IndexOf(toCheck, comp) >= 0;\n    }\n}\n\n```\n\nNote, that null propagation \n```csharp\n?.\n```\n is available since C# 6.0 (VS 2015), for older versions use\n\n```csharp\nif (source == null) return false;\nreturn source.IndexOf(toCheck, comp) >= 0;\n\n```\n\nUSAGE:\n\n```csharp\nstring title = \"STRING\";\nbool contains = title.Contains(\"string\", StringComparison.OrdinalIgnoreCase);\n\n```",
    "score": 3169,
    "tags": [
      "c#",
      "string",
      "contains",
      "case-insensitive"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:18.066692"
  },
  {
    "instruction": "How to iterate over a dictionary?",
    "context": "I've seen a few different ways to iterate over a dictionary in C#.  Is there a standard way?",
    "output": "```csharp\nforeach(KeyValuePair<string, string> entry in myDictionary)\n{\n    // do something with entry.Value or entry.Key\n}\n\n```",
    "score": 4589,
    "tags": [
      "c#",
      "dictionary",
      "loops"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:18.439420"
  },
  {
    "instruction": "What are the correct version numbers for C#?",
    "context": "What are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?\nThis question is primarily to aid those who are searching for an answer using an incorrect version number, e.g. C# 3.5. The hope is that anyone failing to find an answer with the wrong version number will find this question and then search again with the right version number.",
    "output": "C# language version history:\nThese are the versions of C# known about at the time of this writing:\n\nC# 1.0 released with .NET 1.0 and VS2002 (January 2002)\nC# 1.2 (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call \n```csharp\nDispose\n```\n on \n```csharp\nIEnumerator\n```\ns which implemented \n```csharp\nIDisposable\n```\n. A few other small features.\nC# 2.0 released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, and iterator blocks\nC# 3.0 released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (\n```csharp\nvar\n```\n), and query expressions\nC# 4.0 released with .NET 4 and VS2010 (April 2010). Major new features: late binding (\n```csharp\ndynamic\n```\n), delegate and interface generic variance, more COM support, named arguments, tuple data type and optional parameters\nC# 5.0 released with .NET 4.5 and VS2012 (August 2012). Major features: async programming, and caller info attributes. Breaking change: loop variable closure.\nC# 6.0 released with .NET 4.6 and VS2015 (July 2015). Implemented by Roslyn. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, \n```csharp\nawait\n```\n in \n```csharp\ncatch\n```\n and \n```csharp\nfinally\n```\n, extension \n```csharp\nAdd\n```\n methods in collection initializers.\nC# 7.0 released with .NET 4.7 and VS2017 (March 2017). Major new features: tuples, ref locals and ref return, pattern matching (including pattern-based switch statements), inline \n```csharp\nout\n```\n parameter declarations, local functions, binary literals, digit separators, and arbitrary async returns.\nC# 7.1 released with VS2017 v15.3 (August 2017). New features: async main, tuple member name inference, default expression, and pattern matching with generics.\nC# 7.2 released with VS2017 v15.5 (November 2017). New features: private protected access modifier, Span<T>, aka interior pointer, aka stackonly struct, and everything else.\nC# 7.3 released with VS2017 v15.7 (May 2018). New features: enum, delegate and \n```csharp\nunmanaged\n```\n generic type constraints. \n```csharp\nref\n```\n reassignment. Unsafe improvements: \n```csharp\nstackalloc\n```\n initialization, unpinned indexed \n```csharp\nfixed\n```\n buffers, custom \n```csharp\nfixed\n```\n statements. Improved overloading resolution. Expression variables in initializers and queries. \n```csharp\n==\n```\n and \n```csharp\n!=\n```\n defined for tuples. Auto-properties' backing fields can now be targeted by attributes.\nC# 8.0 released with .NET Core 3.0 and VS2019 v16.3 (September 2019). Major new features: nullable reference-types, asynchronous streams, indices and ranges, readonly members, using declarations, default interface methods, static local functions, and enhancement of interpolated verbatim strings.\nC# 9 released with .NET 5.0 and VS2019 v16.8 (November 2020). Major new features: init-only properties, records, with-expressions, data classes, positional records, top-level programs, improved pattern matching (simple type patterns, relational patterns, logical patterns), improved target typing (target-type \n```csharp\nnew\n```\n expressions, target typed \n```csharp\n??\n```\n and \n```csharp\n?\n```\n), and covariant returns. Minor features: relax ordering of \n```csharp\nref\n```\n and \n```csharp\npartial\n```\n modifiers, parameter null checking, lambda discard parameters, native \n```csharp\nint\n```\ns, attributes on local functions, function pointers, static lambdas, extension \n```csharp\nGetEnumerator\n```\n, module initializers, and extending partial.\nC# 10 released with .NET 6.0 (November 2021). Major new features: record structs, struct parameterless constructors, interpolated string handlers, global \n```csharp\nusing\n```\n directives, file-scoped namespace declarations, extended property patterns, const interpolated strings, mixed assignment and declaration in deconstruction, async method builders (via attributes) for individual methods, the \n```csharp\nCallerArgumentExpression\n```\n attribute for parameters, enhanced \n```csharp\n#line\n```\n pragmas.\nC# 11 released with .NET 7.0 (November 2022). Major new features: file-scoped types, generic math support, auto-default structs, pattern match \n```csharp\nSpan<char>\n```\n on a constant string, extended nameof scope, numeric \n```csharp\nIntPtr\n```\n, UTF-8 string literals, required members, \n```csharp\nref\n```\n fields and \n```csharp\nscoped ref\n```\n, raw string literals, improved method group conversion to delegate, warning wave 7, generic attributes, newlines in string interpolation expressions, list patterns\nC# 12 released with .NET 8.0 (November 2023). Major new features: primary constructors, collection expressions, inline arrays, optional parameters in lambda expressions, \n```csharp\nref readonly\n```\n parameters, alias any type, \n```csharp\nExperimental\n```\n attribute, interceptors\nC# 13 releasing with .NET 9.0 (November 2024). Major new features: params collections, new \n```csharp\nLock\n```\n type and semantics, new Escape sequence \n```csharp\n\\e\n```\n, method group natural type improvements, implicit indexer access in object initializers, ref locals and unsafe contexts in iterators and async methods, ref struct types to can implement interfaces, partial properties and indexers, ref struct types, overload resolution priority\n\nIn response to the OP's question:\n\nWhat are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?\n\nThere is no such thing as C# 3.5 - the cause of confusion here is that the C# 3.0 is present in .NET 3.5. The language and framework are versioned independently, however - as is the CLR, which is at version 2.0 for .NET 2.0 through 3.5, .NET 4 introducing CLR 4.0, service packs notwithstanding. The CLR in .NET 4.5 has various improvements, but the versioning is unclear: in some places it may be referred to as CLR 4.5 (this MSDN page used to refer to it that way, for example), but the \n```csharp\nEnvironment.Version\n```\n property still reports 4.0.xxx.\nAs of May 3, 2017, the C# Language Team created a history of C# versions and features on their GitHub repository: Features Added in C# Language Versions. There is also a page that tracks upcoming and recently implemented language features.",
    "score": 3230,
    "tags": [
      "c#",
      ".net",
      "visual-studio",
      ".net-core",
      ".net-framework-version"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:18.747435"
  },
  {
    "instruction": "Deep cloning objects",
    "context": "I want to do something like:\n\n```csharp\nMyObject myObj = GetMyObj(); // Create and fill a new object\nMyObject newObj = myObj.Clone();\n\n```\n\nAnd then make changes to the new object that are not reflected in the original object.\nI don't often need this functionality, so when it's been necessary, I've resorted to creating a new object and then copying each property individually, but it always leaves me with the feeling that there is a better or more elegant way of handling the situation.\nHow can I clone or deep copy an object so that the cloned object can be modified without any changes being reflected in the original object?",
    "output": "Whereas one approach is to implement the \n```csharp\nICloneable\n```\n interface (described here, so I won't regurgitate), here's a nice deep clone object copier I found on The Code Project a while ago and incorporated it into our code.\nAs mentioned elsewhere, it requires your objects to be serializable.\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n/// <summary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// </summary>\npublic static class ObjectCopier\n{\n    /// <summary>\n    /// Perform a deep copy of the object via serialization.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of object being copied.</typeparam>\n    /// <param name=\"source\">The object instance to copy.</param>\n    /// <returns>A deep copy of the object.</returns>\n    public static T Clone<T>(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", nameof(source));\n        }\n\n        // Don't serialize a null object, simply return the default for that object\n        if (ReferenceEquals(source, null)) return default;\n\n        using var stream = new MemoryStream();\n        IFormatter formatter = new BinaryFormatter();\n        formatter.Serialize(stream, source);\n        stream.Seek(0, SeekOrigin.Begin);\n        return (T)formatter.Deserialize(stream);\n    }\n}\n\n```\n\nThe idea is that it serializes your object and then deserializes it into a fresh object. The benefit is that you don't have to concern yourself about cloning everything when an object gets too complex.\nIn case of you prefer to use the new extension methods of C# 3.0, change the method to have the following signature:\n\n```csharp\npublic static T Clone<T>(this T source)\n{\n   // ...\n}\n\n```\n\nNow the method call simply becomes \n```csharp\nobjectBeingCloned.Clone();\n```\n.\nEDIT (January 10 2015) Thought I'd revisit this, to mention I recently started using (Newtonsoft) Json to do this, it should be lighter, and avoids the overhead of [Serializable] tags. (NB @atconway has pointed out in the comments that private members are not cloned using the JSON method)\n\n```csharp\n/// <summary>\n/// Perform a deep Copy of the object, using Json as a serialization method. NOTE: Private members are not cloned using this method.\n/// </summary>\n/// <typeparam name=\"T\">The type of object being copied.</typeparam>\n/// <param name=\"source\">The object instance to copy.</param>\n/// <returns>The copied object.</returns>\npublic static T CloneJson<T>(this T source)\n{            \n    // Don't serialize a null object, simply return the default for that object\n    if (ReferenceEquals(source, null)) return default;\n\n    // initialize inner objects individually\n    // for example in default constructor some list property initialized with some values,\n    // but in 'source' these items are cleaned -\n    // without ObjectCreationHandling.Replace default constructor values will be added to result\n    var deserializeSettings = new JsonSerializerSettings {ObjectCreationHandling = ObjectCreationHandling.Replace};\n\n    return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(source), deserializeSettings);\n}\n\n```",
    "score": 1934,
    "tags": [
      "c#",
      ".net",
      "clone",
      "deep-copy"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:19.081237"
  },
  {
    "instruction": "Catch multiple exceptions at once?",
    "context": "It is discouraged to catch \n```csharp\nSystem.Exception\n```\n errors. Instead, only the \"known\" exceptions should be caught.\nThis sometimes leads to unnecessary repetitive code, for example:\n\n```csharp\ntry\n{\n    WebId = new Guid(queryString[\"web\"]);\n}\ncatch (FormatException)\n{\n    WebId = Guid.Empty;\n}\ncatch (OverflowException)\n{\n    WebId = Guid.Empty;\n}\n\n```\n\nIs there a way to catch both exceptions and only set \n```csharp\nWebId = Guid.Empty\n```\n once?\nThe given example is rather simple, as it's only a \n```csharp\nGUID\n```\n, but imagine code where you modify an object multiple times, and if one of the manipulations fails as expected, you want to \"reset\" the object. However, if there is an unexpected exception, I still want to throw that higher.",
    "output": "Catch \n```csharp\nSystem.Exception\n```\n and switch on the types\n\n```csharp\ncatch (Exception ex)            \n{                \n    if (ex is FormatException || ex is OverflowException)\n    {\n        WebId = Guid.Empty;\n    }\n    else\n        throw;\n}\n\n```",
    "score": 2486,
    "tags": [
      "c#",
      ".net",
      "exception"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:19.407642"
  },
  {
    "instruction": "How do I generate a random integer in C#?",
    "context": "How do I generate a random integer in C#?",
    "output": "The \n```csharp\nRandom\n```\n class is used to create random numbers. (Pseudo-random that is of course.).\nExample:\n\n```csharp\nRandom rnd = new Random();\nint month  = rnd.Next(1, 13);  // creates a number between 1 and 12\nint dice   = rnd.Next(1, 7);   // creates a number between 1 and 6\nint card   = rnd.Next(52);     // creates a number between 0 and 51\n\n```\n\nIf you are going to create more than one random number, you should keep the \n```csharp\nRandom\n```\n instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.",
    "score": 3123,
    "tags": [
      "c#",
      "random"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:19.716388"
  },
  {
    "instruction": "Should 'using' directives be inside or outside the namespace in C#?",
    "context": "I have been running StyleCop over some C# code, and it keeps reporting that my \n```csharp\nusing\n```\n directives should be inside the namespace.\nIs there a technical reason for putting the \n```csharp\nusing\n```\n directives inside instead of outside the namespace?",
    "output": "There is actually a (subtle) difference between the two. Imagine you have the following code in File1.cs:\n\n```csharp\n// File1.cs\nusing System;\nnamespace Outer.Inner\n{\n    class Foo\n    {\n        static void Bar()\n        {\n            double d = Math.PI;\n        }\n    }\n}\n\n```\n\nNow imagine that someone adds another file (File2.cs) to the project that looks like this:\n\n```csharp\n// File2.cs\nnamespace Outer\n{\n    class Math\n    {\n    }\n}\n\n```\n\nThe compiler searches \n```csharp\nOuter\n```\n before looking at those \n```csharp\nusing\n```\n directives outside the namespace, so it finds \n```csharp\nOuter.Math\n```\n instead of \n```csharp\nSystem.Math\n```\n. Unfortunately (or perhaps fortunately?), \n```csharp\nOuter.Math\n```\n has no \n```csharp\nPI\n```\n member, so File1 is now broken.\nThis changes if you put the \n```csharp\nusing\n```\n inside your namespace declaration, as follows:\n\n```csharp\n// File1b.cs\nnamespace Outer.Inner\n{\n    using System;\n    class Foo\n    {\n        static void Bar()\n        {\n            double d = Math.PI;\n        }\n    }\n}\n\n```\n\nNow the compiler searches \n```csharp\nSystem\n```\n before searching \n```csharp\nOuter\n```\n, finds \n```csharp\nSystem.Math\n```\n, and all is well.\nSome would argue that \n```csharp\nMath\n```\n might be a bad name for a user-defined class, since there's already one in \n```csharp\nSystem\n```\n; the point here is just that there is a difference, and it affects the maintainability of your code.\nIt's also interesting to note what happens if \n```csharp\nFoo\n```\n is in namespace \n```csharp\nOuter\n```\n, rather than \n```csharp\nOuter.Inner\n```\n. In that case, adding \n```csharp\nOuter.Math\n```\n in File2 breaks File1 regardless of where the \n```csharp\nusing\n```\n goes. This implies that the compiler searches the innermost enclosing namespace before it looks at any \n```csharp\nusing\n```\n directive.",
    "score": 2418,
    "tags": [
      "c#",
      ".net",
      "namespaces",
      "stylecop",
      "code-organization"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:20.044757"
  },
  {
    "instruction": "Get int value from enum in C#",
    "context": "I have a class called \n```csharp\nQuestions\n```\n (plural). In this class there is an enum called \n```csharp\nQuestion\n```\n (singular) which looks like this.\n\n```csharp\npublic enum Question\n{\n    Role = 2,\n    ProjectFunding = 3,\n    TotalEmployee = 4,\n    NumberOfServers = 5,\n    TopBusinessConcern = 6\n}\n\n```\n\nIn the \n```csharp\nQuestions\n```\n class I have a \n```csharp\nget(int foo)\n```\n function that returns a \n```csharp\nQuestions\n```\n object for that \n```csharp\nfoo\n```\n. Is there an easy way to get the integer value off the enum so I can do something like this \n```csharp\nQuestions.Get(Question.Role)\n```\n?",
    "output": "Just cast the enum, e.g.\n\n```csharp\nint something = (int) Question.Role;\n\n```\n\nThe above will work for the vast majority of enums you see in the wild, as the default underlying type for an enum is \n```csharp\nint\n```\n.\nHowever, as cecilphillip points out, enums can have different underlying types.\nIf an enum is declared as a \n```csharp\nuint\n```\n, \n```csharp\nlong\n```\n, or \n```csharp\nulong\n```\n, it should be cast to the type of the enum; e.g. for\n\n```csharp\nenum StarsInMilkyWay:long {Sun = 1, V645Centauri = 2 .. Wolf424B = 2147483649};\n\n```\n\nyou should use\n\n```csharp\nlong something = (long)StarsInMilkyWay.Wolf424B;\n\n```",
    "score": 3019,
    "tags": [
      "c#",
      "enums",
      "casting",
      "int"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:20.374721"
  },
  {
    "instruction": "How do I get a consistent byte representation of strings in C# without manually specifying an encoding?",
    "context": "How do I convert a \n```csharp\nstring\n```\n to a \n```csharp\nbyte[]\n```\n in .NET (C#) without manually specifying a specific encoding?\nI'm going to encrypt the string. I can encrypt it without converting, but I'd still like to know why encoding comes to play here.\nAlso, why should encoding even be taken into consideration? Can't I simply get what bytes the string has been stored in? Why is there a dependency on character encodings?",
    "output": "Contrary to the answers here, you DON'T need to worry about encoding if the bytes don't need to be interpreted!\nLike you mentioned, your goal is, simply, to \"get what bytes the string has been stored in\".\n(And, of course, to be able to re-construct the string from the bytes.)\nFor those goals, I honestly do not understand why people keep telling you that you need the encodings. You certainly do NOT need to worry about encodings for this.\nJust do this instead:\n\n```csharp\nstatic byte[] GetBytes(string str)\n{\n    byte[] bytes = new byte[str.Length * sizeof(char)];\n    System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);\n    return bytes;\n}\n\n// Do NOT use on arbitrary bytes; only use on GetBytes's output on the SAME system\nstatic string GetString(byte[] bytes)\n{\n    char[] chars = new char[bytes.Length / sizeof(char)];\n    System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);\n    return new string(chars);\n}\n\n```\n\nAs long as your program (or other programs) don't try to interpret the bytes somehow, which you obviously didn't mention you intend to do, then there is nothing wrong with this approach! Worrying about encodings just makes your life more complicated for no real reason.\nAdditional benefit to this approach: It doesn't matter if the string contains invalid characters, because you can still get the data and reconstruct the original string anyway!\nIt will be encoded and decoded just the same, because you are just looking at the bytes.\nIf you used a specific encoding, though, it would've given you trouble with encoding/decoding invalid characters.",
    "score": 1947,
    "tags": [
      "c#",
      ".net",
      "string",
      "character-encoding"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:20.699846"
  },
  {
    "instruction": "What is the best way to give a C# auto-property an initial value?",
    "context": "How do you give a C# auto-property an initial value?\nI either use the constructor, or revert to the old syntax. \n Using the Constructor:\n\n```csharp\nclass Person \n{\n    public Person()\n    {\n        Name = \"Initial Name\";\n    }\n    public string Name { get; set; }\n}\n\n```\n\nUsing normal property syntax  (with an initial value)\n\n```csharp\nprivate string name = \"Initial Name\";\npublic string Name \n{\n    get \n    {\n        return name;\n    }\n    set\n    {\n        name = value;\n    }\n}\n\n```\n\nIs there a better way?",
    "output": "In C# 5 and earlier, to give auto implemented properties an initial value, you have to do it in a constructor.\nSince C# 6.0, you can specify initial value in-line. The syntax is:\n\n```csharp\npublic int X { get; set; } = x; // C# 6 or higher\n\n```\n\n\n```csharp\nDefaultValueAttribute\n```\n is intended to be used by the VS designer (or any other consumer) to specify a default value, not an initial value. (Even if in designed object, initial value is the default value).\nAt compile time \n```csharp\nDefaultValueAttribute\n```\n will not impact the generated IL and it will not be read to initialize the property to that value (see DefaultValue attribute is not working with my Auto Property).\nExample of attributes that impact the IL are \n```csharp\nThreadStaticAttribute\n```\n, \n```csharp\nCallerMemberNameAttribute\n```\n, ...",
    "score": 2975,
    "tags": [
      "c#",
      "constructor",
      "getter",
      "setter",
      "automatic-properties"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:20.998314"
  },
  {
    "instruction": "How do I calculate someone's age based on a DateTime type birthday?",
    "context": "Given a \n```csharp\nDateTime\n```\n representing a person's birthday, how do I calculate their age in years?",
    "output": "An easy to understand and simple solution.\n\n```csharp\n// Save today's date.\nvar today = DateTime.Today;\n\n// Calculate the age.\nvar age = today.Year - birthdate.Year;\n\n// If the birthdate hasn't arrived yet, subtract one year.\nif (birthdate.Date > today.AddYears(-age)) age--;\n\n```\n\nHowever, this assumes you are looking for the western idea of the age and not using East Asian reckoning.",
    "score": 2430,
    "tags": [
      "c#",
      ".net",
      "datetime"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:21.345316"
  },
  {
    "instruction": "How do I create an Excel (.XLS and .XLSX) file in C# without installing Microsoft Office?",
    "context": "How can I create an Excel spreadsheet with C# without requiring Excel to be installed on the machine that's running the code?",
    "output": "You can use a library called ExcelLibrary. It's a free, open source library posted on Google Code:\nExcelLibrary\nThis looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.\nIt's very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.\nExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats. \nYou can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files). There's also NPOI which works with both.\nThere are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.\nAlso, as noted by @АртёмЦарионов below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)\nHere are a couple links for quick reference:\nExcelLibrary - GNU Lesser GPL\nEPPlus - GNU (LGPL) - No longer maintained\nEPPlus 5 - Polyform Noncommercial - Starting May 2020\nNPOI - Apache License\nHere some example code for ExcelLibrary:\nHere is an example taking data from a database and creating a workbook from it. Note that the ExcelLibrary code is the single line at the bottom:\n\n```csharp\n//Create the data set and table\nDataSet ds = new DataSet(\"New_DataSet\");\nDataTable dt = new DataTable(\"New_DataTable\");\n\n//Set the locale for each\nds.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\ndt.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\n\n//Open a DB connection (in this example with OleDB)\nOleDbConnection con = new OleDbConnection(dbConnectionString);\ncon.Open();\n\n//Create a query and fill the data table with the data from the DB\nstring sql = \"SELECT Whatever FROM MyDBTable;\";\nOleDbCommand cmd = new OleDbCommand(sql, con);\nOleDbDataAdapter adptr = new OleDbDataAdapter();\n\nadptr.SelectCommand = cmd;\nadptr.Fill(dt);\ncon.Close();\n\n//Add the table to the data set\nds.Tables.Add(dt);\n\n//Here's the easy part. Create the Excel worksheet from the data set\nExcelLibrary.DataSetHelper.CreateWorkbook(\"MyExcelFile.xls\", ds);\n\n```\n\nCreating the Excel file is as easy as that. You can also manually create Excel files, but the above functionality is what really impressed me.",
    "score": 1198,
    "tags": [
      "c#",
      ".net",
      "excel",
      "file-io"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:21.658642"
  },
  {
    "instruction": "AddTransient, AddScoped and AddSingleton Services Differences",
    "context": "I want to implement dependency injection (DI) in ASP.NET Core. So after adding this code to \n```csharp\nConfigureServices\n```\n method, both ways work.\nWhat is the difference between the \n```csharp\nservices.AddTransient\n```\n and \n```csharp\nservice.AddScoped\n```\n methods in ASP.NET Core?\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add framework services.\n\n    // Add application services.\n    services.AddTransient<IEmailSender, AuthMessageSender>();\n    services.AddScoped<IEmailSender, AuthMessageSender>();\n}\n\n```",
    "output": "TL;DR\n\nTransient objects are always different; a new instance is provided to\nevery controller and every service.\nScoped objects are the same within a request, but different across\ndifferent requests.\nSingleton objects are the same for every object and every request.\n\nFor more clarification, this example from .NET documentation shows the difference:\nTo demonstrate the difference between these lifetime and registration options, consider a simple interface that represents one or more tasks as an operation with a unique identifier, \n```csharp\nOperationId\n```\n. Depending on how we configure the lifetime for this service, the container will provide either the same or different instances of the service to the requesting class. To make it clear which lifetime is being requested, we will create one type per lifetime option:\n\n```csharp\nusing System;\n\nnamespace DependencyInjectionSample.Interfaces\n{\n    public interface IOperation\n    {\n        Guid OperationId { get; }\n    }\n\n    public interface IOperationTransient : IOperation\n    {\n    }\n\n    public interface IOperationScoped : IOperation\n    {\n    }\n\n    public interface IOperationSingleton : IOperation\n    {\n    }\n\n    public interface IOperationSingletonInstance : IOperation\n    {\n    }\n}\n\n```\n\nWe implement these interfaces using a single class, \n```csharp\nOperation\n```\n, that accepts a GUID in its constructor, or uses a new GUID if none is provided:\n\n```csharp\nusing System;\nusing DependencyInjectionSample.Interfaces;\nnamespace DependencyInjectionSample.Classes\n{\n    public class Operation : IOperationTransient, IOperationScoped, IOperationSingleton, IOperationSingletonInstance\n    {\n        Guid _guid;\n        public Operation() : this(Guid.NewGuid())\n        {\n\n        }\n\n        public Operation(Guid guid)\n        {\n            _guid = guid;\n        }\n\n        public Guid OperationId => _guid;\n    }\n}\n\n```\n\nNext, in \n```csharp\nConfigureServices\n```\n, each type is added to the container according to its named lifetime:\n\n```csharp\nservices.AddTransient<IOperationTransient, Operation>();\nservices.AddScoped<IOperationScoped, Operation>();\nservices.AddSingleton<IOperationSingleton, Operation>();\nservices.AddSingleton<IOperationSingletonInstance>(new Operation(Guid.Empty));\nservices.AddTransient<OperationService, OperationService>();\n\n```\n\nNote that the \n```csharp\nIOperationSingletonInstance\n```\n service is using a specific instance with a known ID of \n```csharp\nGuid.Empty\n```\n, so it will be clear when this type is in use. We have also registered an \n```csharp\nOperationService\n```\n that depends on each of the other \n```csharp\nOperation\n```\n types, so that it will be clear within a request whether this service is getting the same instance as the controller, or a new one, for each operation type. All this service does is expose its dependencies as properties, so they can be displayed in the view.\n\n```csharp\nusing DependencyInjectionSample.Interfaces;\n\nnamespace DependencyInjectionSample.Services\n{\n    public class OperationService\n    {\n        public IOperationTransient TransientOperation { get; }\n        public IOperationScoped ScopedOperation { get; }\n        public IOperationSingleton SingletonOperation { get; }\n        public IOperationSingletonInstance SingletonInstanceOperation { get; }\n\n        public OperationService(IOperationTransient transientOperation,\n            IOperationScoped scopedOperation,\n            IOperationSingleton singletonOperation,\n            IOperationSingletonInstance instanceOperation)\n        {\n            TransientOperation = transientOperation;\n            ScopedOperation = scopedOperation;\n            SingletonOperation = singletonOperation;\n            SingletonInstanceOperation = instanceOperation;\n        }\n    }\n}\n\n```\n\nTo demonstrate the object lifetimes within and between separate individual requests to the application, the sample includes an \n```csharp\nOperationsController\n```\n that requests each kind of \n```csharp\nIOperation\n```\n type as well as an \n```csharp\nOperationService\n```\n. The \n```csharp\nIndex\n```\n action then displays all of the controller’s and service’s \n```csharp\nOperationId\n```\n values.\n\n```csharp\nusing DependencyInjectionSample.Interfaces;\nusing DependencyInjectionSample.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DependencyInjectionSample.Controllers\n{\n    public class OperationsController : Controller\n    {\n        private readonly OperationService _operationService;\n        private readonly IOperationTransient _transientOperation;\n        private readonly IOperationScoped _scopedOperation;\n        private readonly IOperationSingleton _singletonOperation;\n        private readonly IOperationSingletonInstance _singletonInstanceOperation;\n\n        public OperationsController(OperationService operationService,\n            IOperationTransient transientOperation,\n            IOperationScoped scopedOperation,\n            IOperationSingleton singletonOperation,\n            IOperationSingletonInstance singletonInstanceOperation)\n        {\n            _operationService = operationService;\n            _transientOperation = transientOperation;\n            _scopedOperation = scopedOperation;\n            _singletonOperation = singletonOperation;\n            _singletonInstanceOperation = singletonInstanceOperation;\n        }\n\n        public IActionResult Index()\n        {\n            // ViewBag contains controller-requested services\n            ViewBag.Transient = _transientOperation;\n            ViewBag.Scoped = _scopedOperation;\n            ViewBag.Singleton = _singletonOperation;\n            ViewBag.SingletonInstance = _singletonInstanceOperation;\n\n            // Operation service has its own requested services\n            ViewBag.Service = _operationService;\n            return View();\n        }\n    }\n}\n\n```\n\nNow two separate requests are made to this controller action:\n\n\nObserve which of the \n```csharp\nOperationId\n```\n values varies within a request, and between requests.\n\nTransient objects are always different; a new instance is provided to every controller and every service.\n\nScoped objects are the same within a request, but different across different requests\n\nSingleton objects are the same for every object and every request (regardless of whether an instance is provided in \n```csharp\nConfigureServices\n```\n)",
    "score": 3457,
    "tags": [
      "c#",
      "asp.net-core",
      ".net-core"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:21.961297"
  },
  {
    "instruction": "How do I remedy \"The breakpoint will not currently be hit. No symbols have been loaded for this document.\" warning?",
    "context": "A C# desktop application (on the Visual Studio Express edition) worked, but then it didn't work 5 seconds later.\nI tried the following:\n\nEnsure debug configuration, debug flag, and full debug information are set on all assemblies.\nDelete all bin and obj folders and all DLL files related to the project from my entire machine.\nRecreate projects causing the problem from scratch.\nReboot.\n\nI have two Windows Forms projects in the solution. One of them loads the debug information, one doesn't. They both refer to the assembly I'm trying to get debug information on in exactly the same way in the project file. Any ideas?\n\nI want to add here, mostly for myself when I come back to review this question, that symbols are not loaded until the assembly is loaded, and the assembly is not loaded until it is needed. If the breakpoint is in a library that is only used in one function in your main assembly, the symbols will not be loaded (and it will show the breakpoint as not being hit) until that function is called.",
    "output": "Start debugging, as soon as you've arrived at a breakpoint or used \n```csharp\nDebug > Break All\n```\n, use \n```csharp\nDebug > Windows > Modules\n```\n.  You'll see a list of all the assemblies that are loaded into the process.  Locate the one you want to get debug info for.  Right-click it and select Symbol Load Information.  You'll get a dialog that lists all the directories where it looked for the \n```csharp\n.pdb\n```\n file for the assembly.  Verify that list against the actual \n```csharp\n.pdb\n```\n location.  Make sure it doesn't find an old one.\nIn normal projects, the assembly and its \n```csharp\n.pdb\n```\n file should always have been copied by the IDE into the same folder as your \n```csharp\n.exe\n```\n, i.e. the \n```csharp\nbin\\Debug\n```\n folder of your project.  Make sure you remove one from the GAC if you've been playing with it.",
    "score": 1344,
    "tags": [
      "c#",
      ".net",
      "debugging",
      "breakpoints",
      "visual-studio-express"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:22.276952"
  },
  {
    "instruction": "What do two question marks together mean in C#?",
    "context": "Ran across this line of code:\n\n```csharp\nFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();\n\n```\n\nWhat do the two question marks mean, is it some kind of ternary operator?\nIt's hard to look up in Google.",
    "output": "It's the null coalescing operator, and quite like the ternary (immediate-if) operator. See also ?? Operator - MSDN.\n\n```csharp\nFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();\n\n```\n\nexpands to:\n\n```csharp\nFormsAuth = formsAuth != null ? formsAuth : new FormsAuthenticationWrapper();\n\n```\n\nwhich further expands to:\n\n```csharp\nif(formsAuth != null)\n    FormsAuth = formsAuth;\nelse\n    FormsAuth = new FormsAuthenticationWrapper();\n\n```\n\nIn English, it means \"If whatever is to the left is not null, use that, otherwise use what's to the right.\"\nNote that you can use any number of these in sequence. The following statement will assign the first non-null \n```csharp\nAnswer#\n```\n to \n```csharp\nAnswer\n```\n (if all Answers are null then the \n```csharp\nAnswer\n```\n is null):\n\n```csharp\nstring Answer = Answer1 ?? Answer2 ?? Answer3 ?? Answer4;\n\n```\n\n\nAlso it's worth mentioning while the expansion above is conceptually equivalent, the result of each expression is only evaluated once. This is important if for example an expression is a method call with side effects. (Credit to @Joey for pointing this out.)",
    "score": 2674,
    "tags": [
      "c#",
      "null-coalescing-operator"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:22.921094"
  },
  {
    "instruction": "Type Checking: typeof, GetType, or is?",
    "context": "I've seen many people use the following code:\n\n```csharp\nType t = typeof(SomeType);\nif (t == typeof(int))\n    // Some code here\n\n```\n\nBut I know you could also do this:\n\n```csharp\nif (obj1.GetType() == typeof(int))\n    // Some code here\n\n```\n\nOr this:\n\n```csharp\nif (obj1 is int)\n    // Some code here\n\n```\n\nPersonally, I feel the last one is the cleanest, but is there something I'm missing? Which one is the best to use, or is it personal preference?",
    "output": "All are different.\n\n\n```csharp\ntypeof\n```\n takes a type name (which you specify at compile time).\n\n```csharp\nGetType\n```\n gets the runtime type of an instance.\n\n```csharp\nis\n```\n returns true if an instance is in the inheritance tree.\n\nExample\n\n```csharp\nclass Animal { } \nclass Dog : Animal { }\n\nvoid PrintTypes(Animal a) { \n    Console.WriteLine(a.GetType() == typeof(Animal)); // false \n    Console.WriteLine(a is Animal);                   // true \n    Console.WriteLine(a.GetType() == typeof(Dog));    // true\n    Console.WriteLine(a is Dog);                      // true \n}\n\nDog spot = new Dog(); \nPrintTypes(spot);\n\n```\n\n\n\nWhat about \n```csharp\ntypeof(T)\n```\n? Is it also resolved at compile time?\n\nYes. T is always what the type of the expression is. Remember, a generic method is basically a whole bunch of methods with the appropriate type. Example:\n\n```csharp\nstring Foo<T>(T parameter) { return typeof(T).Name; }\n\nAnimal probably_a_dog = new Dog();\nDog    definitely_a_dog = new Dog();\n\nFoo(probably_a_dog); // this calls Foo<Animal> and returns \"Animal\"\nFoo<Animal>(probably_a_dog); // this is exactly the same as above\nFoo<Dog>(probably_a_dog); // !!! This will not compile. The parameter expects a Dog, you cannot pass in an Animal.\n\nFoo(definitely_a_dog); // this calls Foo<Dog> and returns \"Dog\"\nFoo<Dog>(definitely_a_dog); // this is exactly the same as above.\nFoo<Animal>(definitely_a_dog); // this calls Foo<Animal> and returns \"Animal\". \nFoo((Animal)definitely_a_dog); // this does the same as above, returns \"Animal\"\n\n```",
    "score": 2303,
    "tags": [
      "c#",
      "types",
      "typeof",
      "gettype"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:23.214567"
  },
  {
    "instruction": "Proper use of the IDisposable interface",
    "context": "I know from reading Microsoft documentation that the \"primary\" use of the \n```csharp\nIDisposable\n```\n interface is to clean up unmanaged resources.\nTo me, \"unmanaged\" means things like database connections, sockets, window handles, etc.  But, I've seen code where the \n```csharp\nDispose()\n```\n method is implemented to free managed resources, which seems redundant to me, since the garbage collector should take care of that for you.\nFor example:\n\n```csharp\npublic class MyCollection : IDisposable\n{\n    private List<String> _theList = new List<String>();\n    private Dictionary<String, Point> _theDict = new Dictionary<String, Point>();\n\n    // Die, clear it up! (free unmanaged resources)\n    public void Dispose()\n    {\n        _theList.clear();\n        _theDict.clear();\n        _theList = null;\n        _theDict = null;\n    }\n}\n\n```\n\nMy question is, does this make the garbage collector free memory used by \n```csharp\nMyCollection\n```\n any faster than it normally would?\n\nEdit:  So far people have posted some good examples of using \n```csharp\nIDisposable\n```\n to clean up unmanaged resources such as database connections and bitmaps.  But suppose that \n```csharp\n_theList\n```\n in the above code contained a million strings, and you wanted to free that memory now, rather than waiting for the garbage collector.  Would the above code accomplish that?",
    "output": "The point of Dispose is to free unmanaged resources. It needs to be done at some point, otherwise they will never be cleaned up. The garbage collector doesn't know how to call \n```csharp\nDeleteHandle()\n```\n on a variable of type \n```csharp\nIntPtr\n```\n, it doesn't know whether or not it needs to call \n```csharp\nDeleteHandle()\n```\n.\n\nNote: What is an unmanaged resource? If you found it in the Microsoft .NET Framework: it's managed. If you went poking around MSDN yourself, it's unmanaged. Anything you've used P/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framework is unmanaged – and you're now responsible for cleaning it up.\n\nThe object that you've created needs to expose some method, that the outside world can call, in order to clean up unmanaged resources. The method can be named whatever you like:\n\n```csharp\npublic void Cleanup()\n\n```\n\nor\n\n```csharp\npublic void Shutdown()\n\n```\n\nBut instead there is a standardized name for this method:\n\n```csharp\npublic void Dispose()\n\n```\n\nThere was even an interface created, \n```csharp\nIDisposable\n```\n, that has just that one method:\n\n```csharp\npublic interface IDisposable\n{\n   void Dispose();\n}\n\n```\n\nSo you make your object expose the \n```csharp\nIDisposable\n```\n interface, and that way you promise that you've written that single method to clean up your unmanaged resources:\n\n```csharp\npublic void Dispose()\n{\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n}\n\n```\n\nAnd you're done.\nExcept you can do better\nWhat if your object has allocated a 250MB System.Drawing.Bitmap (i.e. the .NET managed Bitmap class) as some sort of frame buffer? Sure, this is a managed .NET object, and the garbage collector will free it. But do you really want to leave 250MB of memory just sitting there – waiting for the garbage collector to eventually come along and free it? What if there's an open database connection? Surely we don't want that connection sitting open, waiting for the GC to finalize the object.\nIf the user has called \n```csharp\nDispose()\n```\n (meaning they no longer plan to use the object) why not get rid of those wasteful bitmaps and database connections?\nSo now we will:\n\nget rid of unmanaged resources (because we have to), and\nget rid of managed resources (because we want to be helpful)\n\nSo let's update our \n```csharp\nDispose()\n```\n method to get rid of those managed objects:\n\n```csharp\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose();\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose();\n      this.frameBufferImage = null;\n   }\n}\n\n```\n\nAnd all is good.\nExcept you can do better!\nWhat if the person forgot to call \n```csharp\nDispose()\n```\n on your object? Then they would leak some unmanaged resources!\n\nNote: They won't leak managed resources, because eventually the garbage collector is going to run, on a background thread, and free the memory associated with any unused objects. This will include your object, and any managed objects you use (e.g. the \n```csharp\nBitmap\n```\n and the \n```csharp\nDbConnection\n```\n).\n\nIf the person forgot to call \n```csharp\nDispose()\n```\n, we can still save their bacon! We still have a way to call it for them: when the garbage collector finally gets around to freeing (i.e. finalizing) our object.\n\nNote: The garbage collector will eventually free all managed objects.\nWhen it does, it calls the \n```csharp\nFinalize\n```\n\nmethod on the object. The GC doesn't know, or\ncare, about your Dispose method.\nThat was just a name we chose for\na method we call when we want to get\nrid of unmanaged stuff.\n\nThe destruction of our object by the Garbage collector is the perfect time to free those pesky unmanaged resources. We do this by overriding the \n```csharp\nFinalize()\n```\n method.\n\nNote: In C#, you don't explicitly override the \n```csharp\nFinalize()\n```\n method.\nYou write a method that looks like a C++ destructor, and the\ncompiler takes that to be your implementation of the \n```csharp\nFinalize()\n```\n method:\n\n\n```csharp\n~MyObject()\n{\n    //we're being finalized (i.e. destroyed), call Dispose in case the user forgot to\n    Dispose(); //<--Warning: subtle bug! Keep reading!\n}\n\n```\n\nBut there's a bug in that code. You see, the garbage collector runs on a background thread; you don't know the order in which two objects are destroyed. It is entirely possible that in your \n```csharp\nDispose()\n```\n code, the managed object you're trying to get rid of (because you wanted to be helpful) is no longer there:\n\n```csharp\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose(); //<-- crash, GC already destroyed it\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose(); //<-- crash, GC already destroyed it\n      this.frameBufferImage = null;\n   }\n}\n\n```\n\nSo what you need is a way for \n```csharp\nFinalize()\n```\n to tell \n```csharp\nDispose()\n```\n that it should not touch any managed resources (because they might not be there anymore), while still freeing unmanaged resources.\nThe standard pattern to do this is to have \n```csharp\nFinalize()\n```\n and \n```csharp\nDispose()\n```\n both call a third(!) method; where you pass a Boolean saying if you're calling it from \n```csharp\nDispose()\n```\n (as opposed to \n```csharp\nFinalize()\n```\n), meaning it's safe to free managed resources.\nThis internal method could be given some arbitrary name like \"CoreDispose\", or \"MyInternalDispose\", but is tradition to call it \n```csharp\nDispose(Boolean)\n```\n:\n\n```csharp\nprotected void Dispose(Boolean disposing)\n\n```\n\nBut a more helpful parameter name might be:\n\n```csharp\nprotected void Dispose(Boolean itIsSafeToAlsoFreeManagedObjects)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too, but only if I'm being called from Dispose\n   //(If I'm being called from Finalize then the objects might not exist\n   //anymore\n   if (itIsSafeToAlsoFreeManagedObjects)  \n   {    \n      if (this.databaseConnection != null)\n      {\n         this.databaseConnection.Dispose();\n         this.databaseConnection = null;\n      }\n      if (this.frameBufferImage != null)\n      {\n         this.frameBufferImage.Dispose();\n         this.frameBufferImage = null;\n      }\n   }\n}\n\n```\n\nAnd you change your implementation of the \n```csharp\nIDisposable.Dispose()\n```\n method to:\n\n```csharp\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it's safe\n}\n\n```\n\nand your finalizer to:\n\n```csharp\n~MyObject()\n{\n   Dispose(false); //I am *not* calling you from Dispose, it's *not* safe\n}\n\n```\n\n\nNote: If your object descends from an object that implements \n```csharp\nDispose\n```\n, then don't forget to call their base Dispose method when you override Dispose:\n\n\n```csharp\npublic override void Dispose()\n{\n    try\n    {\n        Dispose(true); //true: safe to free managed resources\n    }\n    finally\n    {\n        base.Dispose();\n    }\n}\n\n```\n\nAnd all is good.\nExcept you can do better!\nIf the user calls \n```csharp\nDispose()\n```\n on your object, then everything has been cleaned up. Later on, when the garbage collector comes along and calls Finalize, it will then call \n```csharp\nDispose\n```\n again.\nNot only is this wasteful, but if your object has junk references to objects you already disposed of from the last call to \n```csharp\nDispose()\n```\n, you'll try to dispose them again!\nYou'll notice in my code I was careful to remove references to objects that I've disposed, so I don't try to call \n```csharp\nDispose\n```\n on a junk object reference. But that didn't stop a subtle bug from creeping in.\nWhen the user calls \n```csharp\nDispose()\n```\n: the handle CursorFileBitmapIconServiceHandle is destroyed. Later when the garbage collector runs, it will try to destroy the same handle again.\n\n```csharp\nprotected void Dispose(Boolean iAmBeingCalledFromDisposeAndNotFinalize)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle); //<--double destroy \n   ...\n}\n\n```\n\nThe way you fix this is tell the garbage collector that it doesn't need to bother finalizing the object – its resources have already been cleaned up, and no more work is needed. You do this by calling \n```csharp\nGC.SuppressFinalize()\n```\n in the \n```csharp\nDispose()\n```\n method:\n\n```csharp\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it's safe\n   GC.SuppressFinalize(this); //Hey, GC: don't bother calling finalize later\n}\n\n```\n\nNow that the user has called \n```csharp\nDispose()\n```\n, we have:\n\nfreed unmanaged resources\nfreed managed resources\n\nThere's no point in the GC running the finalizer – everything's taken care of.\nCouldn't I use Finalize to cleanup unmanaged resources?\nThe documentation for \n```csharp\nObject.Finalize\n```\n says:\n\nThe Finalize method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.\n\nBut the MSDN documentation also says, for \n```csharp\nIDisposable.Dispose\n```\n:\n\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n\nSo which is it? Which one is the place for me to cleanup unmanaged resources? The answer is:\n\nIt's your choice! But choose \n```csharp\nDispose\n```\n.\n\nYou certainly could place your unmanaged cleanup in the finalizer:\n\n```csharp\n~MyObject()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //A C# destructor automatically calls the destructor of its base class.\n}\n\n```\n\nThe problem with that is you have no idea when the garbage collector will get around to finalizing your object. Your un-managed, un-needed, un-used native resources will stick around until the garbage collector eventually runs. Then it will call your finalizer method; cleaning up unmanaged resources. The documentation of Object.Finalize points this out:\n\nThe exact time when the finalizer executes is undefined. To ensure deterministic release of resources for instances of your class, implement a Close method or provide a \n```csharp\nIDisposable.Dispose\n```\n implementation.\n\nThis is the virtue of using \n```csharp\nDispose\n```\n to cleanup unmanaged resources; you get to know, and control, when unmanaged resource are cleaned up. Their destruction is \"deterministic\".\n\nTo answer your original question: Why not release memory now, rather than for when the GC decides to do it? I have a facial recognition software that needs to get rid of 530 MB of internal images now, since they're no longer needed. When we don't: the machine grinds to a swapping halt.\nBonus Reading\nFor anyone who likes the style of this answer (explaining the why, so the how becomes obvious), I suggest you read Chapter One of Don Box's Essential COM:\n\nDirect link: Chapter 1 sample by Pearson Publishing\nmagnet: 84bf0b960936d677190a2be355858e80ef7542c0\n\nIn 35 pages he explains the problems of using binary objects, and invents COM before your eyes. Once you realize the why of COM, the remaining 300 pages are obvious, and just detail Microsoft's implementation.\nI think every programmer who has ever dealt with objects or COM should, at the very least, read the first chapter. It is the best explanation of anything ever.\nExtra Bonus Reading\nWhen everything you know is wrong archiveby Eric Lippert\n\nIt is therefore very difficult indeed to write a correct finalizer,\nand the best advice I can give you is to not try.",
    "score": 2991,
    "tags": [
      "c#",
      ".net",
      "garbage-collection",
      "idisposable"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:23.540348"
  },
  {
    "instruction": "Calling the base constructor in C#",
    "context": "If I inherit from a base class and want to pass something from the constructor of the inherited class to the constructor of the base class, how do I do that?\nFor example, if I inherit from the Exception class I want to do something like this:\n\n```csharp\nclass MyExceptionClass : Exception\n{\n     public MyExceptionClass(string message, string extraInfo)\n     {\n         //This is where it's all falling apart\n         base(message);\n     }\n}\n\n```\n\nBasically what I want is to be able to pass the string message to the base Exception class.",
    "output": "Modify your constructor to the following so that it calls the base class constructor properly:\n\n```csharp\npublic class MyExceptionClass : Exception\n{\n    public MyExceptionClass(string message, string extrainfo) : base(message)\n    {\n        //other stuff here\n    }\n}\n\n```\n\nNote that a constructor is not something that you can call anytime within a method. That's the reason you're getting errors in your call in the constructor body.",
    "score": 2249,
    "tags": [
      "c#",
      ".net",
      "inheritance",
      "constructor"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:23.837216"
  },
  {
    "instruction": "Is there a reason for C#'s reuse of the variable in a foreach?",
    "context": "When using lambda expressions or anonymous methods in C#, we have to be wary of the access to modified closure pitfall. For example:\n\n```csharp\nforeach (var s in strings)\n{\n   query = query.Where(i => i.Prop == s); // access to modified closure\n   ...\n}\n\n```\n\nDue to the modified closure, the above code will cause all of the \n```csharp\nWhere\n```\n clauses on the query to be based on the final value of \n```csharp\ns\n```\n.\nAs explained here, this happens because the \n```csharp\ns\n```\n variable declared in \n```csharp\nforeach\n```\n loop above is translated like this in the compiler:\n\n```csharp\nstring s;\nwhile (enumerator.MoveNext())\n{\n   s = enumerator.Current;\n   ...\n}\n\n```\n\ninstead of like this:\n\n```csharp\nwhile (enumerator.MoveNext())\n{\n   string s;\n   s = enumerator.Current;\n   ...\n}\n\n```\n\nAs pointed out here, there are no performance advantages to declaring a variable outside the loop, and under normal circumstances the only reason I can think of for doing this is if you plan to use the variable outside the scope of the loop:\n\n```csharp\nstring s;\nwhile (enumerator.MoveNext())\n{\n   s = enumerator.Current;\n   ...\n}\nvar finalString = s;\n\n```\n\nHowever variables defined in a \n```csharp\nforeach\n```\n loop cannot be used outside the loop:\n\n```csharp\nforeach(string s in strings)\n{\n}\nvar finalString = s; // won't work: you're outside the scope.\n\n```\n\nSo the compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.\nIs there something you can do with \n```csharp\nforeach\n```\n loops this way that you couldn't if they were compiled with an inner-scoped variable, or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?",
    "output": "The compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.\n\nYour criticism is entirely justified.\nI discuss this problem in detail here:\nClosing over the loop variable considered harmful\n\nIs there something you can do with foreach loops this way that you couldn't if they were compiled with an inner-scoped variable? or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?\n\nThe latter. The C# 1.0 specification actually did not say whether the loop variable was inside or outside the loop body, as it made no observable difference. When closure semantics were introduced in C# 2.0, the choice was made to put the loop variable outside the loop, consistent with the \"for\" loop.\nI think it is fair to say that all regret that decision. This is one of the worst \"gotchas\" in C#, and we are going to take the breaking change to fix it. In C# 5 the foreach loop variable will be logically inside the body of the loop, and therefore closures will get a fresh copy every time.\nThe \n```csharp\nfor\n```\n loop will not be changed, and the change will not be \"back ported\" to previous versions of C#. You should therefore continue to be careful when using this idiom.",
    "score": 1528,
    "tags": [
      "c#",
      "foreach",
      "lambda",
      "scope",
      "anonymous-methods"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:24.118619"
  },
  {
    "instruction": "What is a NullReferenceException, and how do I fix it?",
    "context": "I have some code and when it executes, it throws a \n```csharp\nNullReferenceException\n```\n, saying:\n\nObject reference not set to an instance of an object.\n\nWhat does this mean, and what can I do to fix this error?",
    "output": "What is the cause?\nBottom Line\nYou are trying to use something that is \n```csharp\nnull\n```\n (or \n```csharp\nNothing\n```\n in VB.NET). This means you either set it to \n```csharp\nnull\n```\n, or you never set it to anything at all.\nLike anything else, \n```csharp\nnull\n```\n gets passed around. If it is \n```csharp\nnull\n```\n in method \"A\", it could be that method \"B\" passed a \n```csharp\nnull\n```\n to method \"A\".\n\n```csharp\nnull\n```\n can have different meanings:\n\nObject variables that are uninitialized and hence point to nothing. In this case, if you access members of such objects, it causes a \n```csharp\nNullReferenceException\n```\n.\nThe developer is using \n```csharp\nnull\n```\n intentionally to indicate there is no meaningful value available. Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign \n```csharp\nnull\n```\n to them to indicate there is no value stored in it, for example \n```csharp\nint? a = null;\n```\n (which is a shortcut for \n```csharp\nNullable<int> a = null;\n```\n) where the question mark indicates it is allowed to store \n```csharp\nnull\n```\n in variable \n```csharp\na\n```\n. You can check that either with \n```csharp\nif (a.HasValue) {...}\n```\n or with \n```csharp\nif (a==null) {...}\n```\n. Nullable variables, like \n```csharp\na\n```\n in this example, allow to access the value via \n```csharp\na.Value\n```\n explicitly, or just as normal via \n```csharp\na\n```\n. Note that accessing it via \n```csharp\na.Value\n```\n throws an \n```csharp\nInvalidOperationException\n```\n instead of a \n```csharp\nNullReferenceException\n```\n if \n```csharp\na\n```\n is \n```csharp\nnull\n```\n - you should do the check beforehand, i.e. if you have another non-nullable variable \n```csharp\nint b;\n```\n then you should do assignments like \n```csharp\nif (a.HasValue) { b = a.Value; }\n```\n or shorter \n```csharp\nif (a != null) { b = a; }\n```\n.\n\nThe rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a \n```csharp\nNullReferenceException\n```\n.\nMore Specifically\nThe \n```csharp\nruntime\n```\n throwing a \n```csharp\nNullReferenceException\n```\n always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).\nThis means the reference is \n```csharp\nnull\n```\n, and you cannot access members (such as methods) through a \n```csharp\nnull\n```\n reference. The simplest case:\n\n```csharp\nstring foo = null;\nfoo.ToUpper();\n\n```\n\nThis will throw a \n```csharp\nNullReferenceException\n```\n at the second line because you can't call the instance method \n```csharp\nToUpper()\n```\n on a \n```csharp\nstring\n```\n reference pointing to \n```csharp\nnull\n```\n.\nDebugging\nHow do you find the source of a \n```csharp\nNullReferenceException\n```\n? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.\nIf you want to find out where the reference is or isn't set, right-click its name and select \"Find All References\". You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.\nBy following the program flow this way, you can find the location where the instance should not be null, and why it isn't properly set.\nExamples\nSome common scenarios where the exception can be thrown:\nGeneric\n\n```csharp\nref1.ref2.ref3.member\n\n```\n\nIf ref1 or ref2 or ref3 is null, then you'll get a \n```csharp\nNullReferenceException\n```\n. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:\n\n```csharp\nvar r1 = ref1;\nvar r2 = r1.ref2;\nvar r3 = r2.ref3;\nr3.member\n\n```\n\nSpecifically, in \n```csharp\nHttpContext.Current.User.Identity.Name\n```\n, the \n```csharp\nHttpContext.Current\n```\n could be null, or the \n```csharp\nUser\n```\n property could be null, or the \n```csharp\nIdentity\n```\n property could be null.\nIndirect\n\n```csharp\npublic class Person \n{\n    public int Age { get; set; }\n}\npublic class Book \n{\n    public Person Author { get; set; }\n}\npublic class Example \n{\n    public void Foo() \n    {\n        Book b1 = new Book();\n        int authorAge = b1.Author.Age; // You never initialized the Author property.\n                                       // There is no Person to get an Age from.\n    }\n}\n\n```\n\nIf you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object's constructor.\nNested Object Initializers\nThe same applies to nested object initializers:\n\n```csharp\nBook b1 = new Book \n{ \n   Author = { Age = 45 } \n};\n\n```\n\nThis translates to:\n\n```csharp\nBook b1 = new Book();\nb1.Author.Age = 45;\n\n```\n\nWhile the \n```csharp\nnew\n```\n keyword is used, it only creates a new instance of \n```csharp\nBook\n```\n, but not a new instance of \n```csharp\nPerson\n```\n, so the \n```csharp\nAuthor\n```\n property is still \n```csharp\nnull\n```\n.\nNested Collection Initializers\n\n```csharp\npublic class Person \n{\n    public ICollection<Book> Books { get; set; }\n}\npublic class Book \n{\n    public string Title { get; set; }\n}\n\n```\n\nThe nested collection \n```csharp\nInitializers\n```\n behave the same:\n\n```csharp\nPerson p1 = new Person \n{\n    Books = {\n         new Book { Title = \"Title1\" },\n         new Book { Title = \"Title2\" },\n    }\n};\n\n```\n\nThis translates to:\n\n```csharp\nPerson p1 = new Person();\np1.Books.Add(new Book { Title = \"Title1\" });\np1.Books.Add(new Book { Title = \"Title2\" });\n\n```\n\nThe \n```csharp\nnew Person\n```\n only creates an instance of \n```csharp\nPerson\n```\n, but the \n```csharp\nBooks\n```\n collection is still \n```csharp\nnull\n```\n. The collection \n```csharp\nInitializer\n```\n syntax does not create a collection\nfor \n```csharp\np1.Books\n```\n, it only translates to the \n```csharp\np1.Books.Add(...)\n```\n statements.\nArray\n\n```csharp\nint[] numbers = null;\nint n = numbers[0]; // numbers is null. There is no array to index.\n\n```\n\nArray Elements\n\n```csharp\nPerson[] people = new Person[5];\npeople[0].Age = 20 // people[0] is null. The array was allocated but not\n                   // initialized. There is no Person to set the Age for.\n\n```\n\nJagged Arrays\n\n```csharp\nlong[][] array = new long[1][];\narray[0][0] = 3; // is null because only the first dimension is yet initialized.\n                 // Use array[0] = new long[2]; first.\n\n```\n\nCollection/List/Dictionary\n\n```csharp\nDictionary<string, int> agesForNames = null;\nint age = agesForNames[\"Bob\"]; // agesForNames is null.\n                               // There is no Dictionary to perform the lookup.\n\n```\n\nRange Variable (Indirect/Deferred)\n\n```csharp\npublic class Person \n{\n    public string Name { get; set; }\n}\nvar people = new List<Person>();\npeople.Add(null);\nvar names = from p in people select p.Name;\nstring firstName = names.First(); // Exception is thrown here, but actually occurs\n                                  // on the line above.  \"p\" is null because the\n                                  // first element we added to the list is null.\n\n```\n\nEvents (C#)\n\n```csharp\npublic class Demo\n{\n    public event EventHandler StateChanged;\n    \n    protected virtual void OnStateChanged(EventArgs e)\n    {        \n        StateChanged(this, e); // Exception is thrown here \n                               // if no event handlers have been attached\n                               // to StateChanged event\n    }\n}\n\n```\n\n(Note: The VB.NET compiler inserts null checks for event usage, so it's not necessary to check events for \n```csharp\nNothing\n```\n in VB.NET.)\nBad Naming Conventions:\nIf you named fields differently from locals, you might have realized that you never initialized the field.\n\n```csharp\npublic class Form1\n{\n    private Customer customer;\n    \n    private void Form1_Load(object sender, EventArgs e) \n    {\n        Customer customer = new Customer();\n        customer.Name = \"John\";\n    }\n    \n    private void Button_Click(object sender, EventArgs e)\n    {\n        MessageBox.Show(customer.Name);\n    }\n}\n\n```\n\nThis can be solved by following the convention to prefix fields with an underscore:\n\n```csharp\n    private Customer _customer;\n\n```\n\nASP.NET Page Life cycle:\n\n```csharp\npublic partial class Issues_Edit : System.Web.UI.Page\n{\n    protected TestIssue myIssue;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n             // Only called on first load, not when button clicked\n             myIssue = new TestIssue(); \n        }\n    }\n        \n    protected void SaveButton_Click(object sender, EventArgs e)\n    {\n        myIssue.Entry = \"NullReferenceException here!\";\n    }\n}\n\n```\n\nASP.NET Session Values\n\n```csharp\n// if the \"FirstName\" session value has not yet been set,\n// then this line will throw a NullReferenceException\nstring firstName = Session[\"FirstName\"].ToString();\n\n```\n\nASP.NET MVC empty view models\nIf the exception occurs when referencing a property of \n```csharp\n@Model\n```\n in an \n```csharp\nASP.NET MVC View\n```\n, you need to understand that the \n```csharp\nModel\n```\n gets set in your action method, when you \n```csharp\nreturn\n```\n a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:\n\n```csharp\n// Controller\npublic class Restaurant:Controller\n{\n    public ActionResult Search()\n    {\n        return View();  // Forgot the provide a Model here.\n    }\n}\n\n// Razor view \n@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.\n{\n}\n    \n<p>@Model.somePropertyName</p> <!-- Also throws -->\n\n```\n\nWPF Control Creation Order and Events\n\n```csharp\nWPF\n```\n controls are created during the call to \n```csharp\nInitializeComponent\n```\n in the order they appear in the visual tree.  A \n```csharp\nNullReferenceException\n```\n will be raised in the case of early-created controls with event handlers, etc., that fire during \n```csharp\nInitializeComponent\n```\n which reference late-created controls.\nFor example:\n\n```csharp\n<Grid>\n    <!-- Combobox declared first -->\n    <ComboBox Name=\"comboBox1\" \n              Margin=\"10\"\n              SelectedIndex=\"0\" \n              SelectionChanged=\"comboBox1_SelectionChanged\">\n       <ComboBoxItem Content=\"Item 1\" />\n       <ComboBoxItem Content=\"Item 2\" />\n       <ComboBoxItem Content=\"Item 3\" />\n    </ComboBox>\n        \n    <!-- Label declared later -->\n    <Label Name=\"label1\" \n           Content=\"Label\"\n           Margin=\"10\" />\n</Grid>\n\n```\n\nHere \n```csharp\ncomboBox1\n```\n is created before \n```csharp\nlabel1\n```\n. If \n```csharp\ncomboBox1_SelectionChanged\n```\n attempts to reference \n```csharp\nlabel1\n```\n, it will not yet have been created.\n\n```csharp\nprivate void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReferenceException here!!\n}\n\n```\n\nChanging the order of the declarations in the \n```csharp\nXAML\n```\n (i.e., listing \n```csharp\nlabel1\n```\n before \n```csharp\ncomboBox1\n```\n, ignoring issues of design philosophy) would at least resolve the \n```csharp\nNullReferenceException\n```\n here.\nCast with \n```csharp\nas\n```\n\n\n```csharp\nvar myThing = someObject as Thing;\n\n```\n\nThis doesn't throw an \n```csharp\nInvalidCastException\n```\n but returns a \n```csharp\nnull\n```\n when the cast fails (and when \n```csharp\nsomeObject\n```\n is itself null). So be aware of that.\nLINQ \n```csharp\nFirstOrDefault()\n```\n and \n```csharp\nSingleOrDefault()\n```\n\nThe plain versions \n```csharp\nFirst()\n```\n and \n```csharp\nSingle()\n```\n throw exceptions when there is nothing. The \"OrDefault\" versions return \n```csharp\nnull\n```\n in that case. So be aware of that.\nforeach\n\n```csharp\nforeach\n```\n throws when you try to iterate on a \n```csharp\nnull\n```\n collection. Usually caused by unexpected \n```csharp\nnull\n```\n result from methods that return collections.\n\n```csharp\nList<int> list = null;    \nforeach(var v in list) { } // NullReferenceException here\n\n```\n\nMore realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:\n\n```csharp\nforeach (var node in myData.MyXml.DocumentNode.SelectNodes(\"//Data\"))\n\n```\n\n\nWays to Avoid\nExplicitly check for \n```csharp\nnull\n```\n and ignore \n```csharp\nnull\n```\n values.\nIf you expect the reference sometimes to be \n```csharp\nnull\n```\n, you can check for it being \n```csharp\nnull\n```\n before accessing instance members:\n\n```csharp\nvoid PrintName(Person p)\n{\n    if (p != null) \n    {\n        Console.WriteLine(p.Name);\n    }\n}\n\n```\n\nExplicitly check for \n```csharp\nnull\n```\n and provide a default value.\nMethods you call expecting an instance can return \n```csharp\nnull\n```\n, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:\n\n```csharp\nstring GetCategory(Book b) \n{\n    if (b == null)\n        return \"Unknown\";\n    return b.Category;\n}\n\n```\n\nExplicitly check for \n```csharp\nnull\n```\n from method calls and throw a custom exception.\nYou can also throw a custom exception, only to catch it in the calling code:\n\n```csharp\nstring GetCategory(string bookTitle) \n{\n    var book = library.FindBook(bookTitle);  // This may return null\n    if (book == null)\n        throw new BookNotFoundException(bookTitle);  // Your custom exception\n    return book.Category;\n}\n\n```\n\nUse \n```csharp\nDebug.Assert\n```\n if a value should never be \n```csharp\nnull\n```\n, to catch the problem earlier than the exception occurs.\nWhen you know during development that a method could, but never should return \n```csharp\nnull\n```\n, you can use \n```csharp\nDebug.Assert()\n```\n to break as soon as possible when it does occur:\n\n```csharp\nstring GetTitle(int knownBookID) \n{\n    // You know this should never return null.\n    var book = library.GetBook(knownBookID);  \n\n    // Exception will occur on the next line instead of at the end of this method.\n    Debug.Assert(book != null, \"Library didn't return a book for known book ID.\");\n\n    // Some other code\n\n    return book.Title; // Will never throw NullReferenceException in Debug mode.\n}\n\n```\n\nThough this check will not end up in your release build, causing it to throw the \n```csharp\nNullReferenceException\n```\n again when \n```csharp\nbook == null\n```\n at runtime in release mode.\nUse \n```csharp\nGetValueOrDefault()\n```\n for \n```csharp\nnullable\n```\n value types to provide a default value when they are \n```csharp\nnull\n```\n.\n\n```csharp\nDateTime? appointment = null;\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the default value provided (DateTime.Now), because appointment is null.\n\nappointment = new DateTime(2022, 10, 20);\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the appointment date, not the default\n\n```\n\nUse the null coalescing operator: \n```csharp\n??\n```\n [C#] or \n```csharp\nIf()\n```\n [VB].\nThe shorthand to providing a default value when a \n```csharp\nnull\n```\n is encountered:\n\n```csharp\nIService CreateService(ILogger log, Int32? frobPowerLevel)\n{\n   var serviceImpl = new MyService(log ?? NullLog.Instance);\n \n   // Note that the above \"GetValueOrDefault()\" can also be rewritten to use\n   // the coalesce operator:\n   serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;\n}\n\n```\n\nUse the null condition operator: \n```csharp\n?.\n```\n or \n```csharp\n?[x]\n```\n for arrays (available in C# 6 and VB.NET 14):\nThis is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:\n\n```csharp\nvar title = person.Title.ToUpper();\n\n```\n\nIf the person does not have a title, this will throw an exception because it is trying to call \n```csharp\nToUpper\n```\n on a property with a null value.\nIn \n```csharp\nC# 5\n```\n and below, this can be guarded with:\n\n```csharp\nvar title = person.Title == null ? null : person.Title.ToUpper();\n\n```\n\nNow the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:\n\n```csharp\nvar title = person.Title?.ToUpper();\n\n```\n\nThis will result in the title variable being \n```csharp\nnull\n```\n, and the call to \n```csharp\nToUpper\n```\n is not made if \n```csharp\nperson.Title\n```\n is \n```csharp\nnull\n```\n.\nOf course, you still have to check \n```csharp\ntitle\n```\n for \n```csharp\nnull\n```\n or use the null condition operator together with the null coalescing operator (\n```csharp\n??\n```\n) to supply a default value:\n\n```csharp\n// regular null check\nint titleLength = 0;\nif (title != null)\n    titleLength = title.Length; // If title is null, this would throw NullReferenceException\n    \n// combining the `?` and the `??` operator\nint titleLength = title?.Length ?? 0;\n\n```\n\nLikewise, for arrays you can use \n```csharp\n?[i]\n```\n as follows:\n\n```csharp\nint[] myIntArray = null;\nvar i = 5;\nint? elem = myIntArray?[i];\nif (!elem.HasValue) Console.WriteLine(\"No value\");\n\n```\n\nThis will do the following: If \n```csharp\nmyIntArray\n```\n is \n```csharp\nnull\n```\n, the expression returns \n```csharp\nnull\n```\n and you can safely check it. If it contains an array, it will do the same as:\n\n```csharp\nelem = myIntArray[i];\n```\n and returns the ith element.\nUse null context (available in C# 8):\nIntroduced in \n```csharp\nC# 8\n```\n, null contexts and nullable reference types perform static analysis on variables and provide a compiler warning if a value can be potentially \n```csharp\nnull\n```\n or have been set to \n```csharp\nnull\n```\n. The nullable reference types allow types to be explicitly allowed to be \n```csharp\nnull\n```\n.\nThe nullable annotation context and nullable warning context can be set for a project using the \n```csharp\nNullable\n```\n element in your \n```csharp\ncsproj\n```\n file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:\n\n\n```csharp\nenable\n```\n: The nullable annotation context is enabled. The nullable warning context is enabled. Variables of a reference type, string, for example, are non-nullable. All nullability warnings are enabled.\n\n```csharp\ndisable\n```\n: The nullable annotation context is disabled. The nullable warning context is disabled. Variables of a reference type are oblivious, just like earlier versions of C#. All nullability warnings are disabled.\n\n```csharp\nsafeonly\n```\n: The nullable annotation context is enabled. The nullable warning context is safeonly. Variables of a reference type are non-nullable. All safety nullability warnings are enabled.\n\n```csharp\nwarnings\n```\n: The nullable annotation context is disabled. The nullable warning context is enabled. Variables of a reference type are oblivious. All nullability warnings are enabled.\n\n```csharp\nsafeonlywarnings\n```\n: The nullable annotation context is disabled. The nullable warning context is safeonly.\nVariables of a reference type are oblivious. All safety nullability warnings are enabled.\n\nA nullable reference type is noted using the same syntax as nullable value types: a \n```csharp\n?\n```\n is appended to the type of the variable.\nSpecial techniques for debugging and fixing null derefs in iterators\n\n```csharp\nC#\n```\n supports \"iterator blocks\" (called \"generators\" in some other popular languages). \n```csharp\nNullReferenceException\n```\n can be particularly tricky to debug in iterator blocks because of deferred execution:\n\n```csharp\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n    for (int i = 0; i < count; ++i)\n    yield return f.MakeFrob();\n}\n...\nFrobFactory factory = whatever;\nIEnumerable<Frobs> frobs = GetFrobs();\n...\nforeach(Frob frob in frobs) { ... }\n\n```\n\nIf \n```csharp\nwhatever\n```\n results in \n```csharp\nnull\n```\n then \n```csharp\nMakeFrob\n```\n will throw. Now, you might think that the right thing to do is this:\n\n```csharp\n// DON'T DO THIS\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n   if (f == null) \n      throw new ArgumentNullException(\"f\", \"factory must not be null\");\n   for (int i = 0; i < count; ++i)\n      yield return f.MakeFrob();\n}\n\n```\n\nWhy is this wrong?  Because the iterator block does not actually run until the \n```csharp\nforeach\n```\n!  The call to \n```csharp\nGetFrobs\n```\n simply returns an object which when iterated will run the iterator block.\nBy writing a \n```csharp\nnull\n```\n check like this you prevent the \n```csharp\nNullReferenceException\n```\n, but you move the \n```csharp\nNullArgumentException\n```\n to the point of the iteration, not to the point of the call, and that is very confusing to debug.\nThe correct fix is:\n\n```csharp\n// DO THIS\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n   // No yields in a public method that throws!\n   if (f == null) \n       throw new ArgumentNullException(\"f\", \"factory must not be null\");\n   return GetFrobsForReal(f, count);\n}\nprivate IEnumerable<Frob> GetFrobsForReal(FrobFactory f, int count)\n{\n   // Yields in a private method\n   Debug.Assert(f != null);\n   for (int i = 0; i < count; ++i)\n        yield return f.MakeFrob();\n}\n\n```\n\nThat is, make a private helper method that has the iterator block logic and a public surface method that does the \n```csharp\nnull\n```\n check and returns the iterator. Now when \n```csharp\nGetFrobs\n```\n is called, the \n```csharp\nnull\n```\n check happens immediately, and then \n```csharp\nGetFrobsForReal\n```\n executes when the sequence is iterated.\nIf you examine the reference source for \n```csharp\nLINQ\n```\n to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier. Optimize your code for the convenience of the caller, not the convenience of the author.\nA note on null dereferences in unsafe code\n\n```csharp\nC#\n```\n has an \"unsafe\" mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works.\nIn unsafe mode, you should be aware of two important facts:\n\ndereferencing a null pointer produces the same exception as dereferencing a null reference\ndereferencing an invalid non-null pointer can produce that exception in some circumstances\n\nTo understand why that is, it helps to understand how .NET produces \n```csharp\nNullReferenceException\n```\n in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)\nMemory is virtualized in \n```csharp\nWindows\n```\n; each process gets a virtual memory space of many \"pages\" of memory that are tracked by the operating system. Each page of memory has flags set on it that determine how it may be used: read from, written to, executed, and so on. The lowest page is marked as \"produce an error if ever used in any way\".\nBoth a null pointer and a null reference in \n```csharp\nC#\n```\n are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the \n```csharp\nNullReferenceException\n```\n.\nThat's why dereferencing both a null pointer and a null reference produces the same exception.\nWhat about the second point? Dereferencing any invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.\nWhy does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the \n```csharp\nCLR\n```\n will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address via the null.\nIf you are working with unsafe code and you get a \n```csharp\nNullReferenceException\n```\n, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.",
    "score": 2739,
    "tags": [
      "c#",
      ".net",
      "vb.net",
      "null",
      "nullreferenceexception"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:24.467230"
  },
  {
    "instruction": "What does the [Flags] Enum Attribute mean in C#?",
    "context": "From time to time I see an enum like the following:\n\n```csharp\n[Flags]\npublic enum Options \n{\n    None    = 0,\n    Option1 = 1,\n    Option2 = 2,\n    Option3 = 4,\n    Option4 = 8\n}\n\n```\n\nI don't understand what exactly the \n```csharp\n[Flags]\n```\n attribute does.\nAnyone have a good explanation or example they could post?",
    "output": "The \n```csharp\n[Flags]\n```\n attribute should be used whenever the enumerable represents a collection of possible values, rather than a single value. Such collections are often used with bitwise operators, for example:\n\n```csharp\nvar allowedColors = MyColor.Red | MyColor.Green | MyColor.Blue;\n\n```\n\nNote that the \n```csharp\n[Flags]\n```\n attribute doesn't enable this by itself - all it does is allow a nice representation by the \n```csharp\n.ToString()\n```\n method:\n\n```csharp\nenum Suits { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }\n[Flags] enum SuitsFlags { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }\n\n...\n\nvar str1 = (Suits.Spades | Suits.Diamonds).ToString();\n           // \"5\"\nvar str2 = (SuitsFlags.Spades | SuitsFlags.Diamonds).ToString();\n           // \"Spades, Diamonds\"\n\n```\n\nIt is also important to note that \n```csharp\n[Flags]\n```\n does not automatically make the enum values powers of two. If you omit the numeric values, the enum will not work as one might expect in bitwise operations, because by default the values start with 0 and increment. \nIncorrect declaration:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    Yellow,  // 0\n    Green,   // 1\n    Red,     // 2\n    Blue     // 3\n}\n\n```\n\nThe values, if declared this way, will be Yellow = 0, Green = 1, Red = 2, Blue = 3. This will render it useless as flags.\nHere's an example of a correct declaration:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    Yellow = 1,\n    Green = 2,\n    Red = 4,\n    Blue = 8\n}\n\n```\n\nTo retrieve the distinct values in your property, one can do this:\n\n```csharp\nif (myProperties.AllowedColors.HasFlag(MyColor.Yellow))\n{\n    // Yellow is allowed...\n}\n\n```\n\nor prior to .NET 4:\n\n```csharp\nif((myProperties.AllowedColors & MyColor.Yellow) == MyColor.Yellow)\n{\n    // Yellow is allowed...\n}\n\nif((myProperties.AllowedColors & MyColor.Green) == MyColor.Green)\n{\n    // Green is allowed...\n}    \n\n```\n\nUnder the covers\nThis works because you used powers of two in your enumeration. Under the covers, your enumeration values look like this in binary ones and zeros:\n\n```csharp\n Yellow: 00000001\n Green:  00000010\n Red:    00000100\n Blue:   00001000\n\n```\n\nSimilarly, after you've set your property AllowedColors to Red, Green and Blue using the binary bitwise OR \n```csharp\n|\n```\n operator, AllowedColors looks like this:\n\n```csharp\nmyProperties.AllowedColors: 00001110\n\n```\n\nSo when you retrieve the value you are actually performing bitwise AND \n```csharp\n&\n```\n on the values:\n\n```csharp\nmyProperties.AllowedColors: 00001110\n             MyColor.Green: 00000010\n             -----------------------\n                            00000010 // Hey, this is the same as MyColor.Green!\n\n```\n\nThe None = 0 value\nAnd regarding the use of \n```csharp\n0\n```\n in your enumeration, quoting from MSDN:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    None = 0,\n    ....\n}\n\n```\n\n\nUse None as the name of the flag enumerated constant whose value is zero. You cannot use the None enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the None enumerated constant to determine whether any bits in the numeric value are set. \n\nYou can find more info about the flags attribute and its usage at msdn and designing flags at msdn",
    "score": 2591,
    "tags": [
      "c#",
      "enums",
      "flags"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:24.757868"
  },
  {
    "instruction": "How to loop through all enum values in C#?",
    "context": "```csharp\npublic enum Foos\n{\n    A,\n    B,\n    C\n}\n\n```\n\nIs there a way to loop through the possible values of \n```csharp\nFoos\n```\n?\nBasically?\n\n```csharp\nforeach(Foo in Foos)\n\n```",
    "output": "Yes you can use the ‍\n```csharp\nGetValue‍‍‍s\n```\n method:\n\n```csharp\nvar values = Enum.GetValues(typeof(Foos));\n\n```\n\nOr the typed version:\n\n```csharp\nvar values = Enum.GetValues(typeof(Foos)).Cast<Foos>();\n\n```\n\nI long ago added a helper function to my private library for just such an occasion:\n\n```csharp\npublic static class EnumUtil {\n    public static IEnumerable<T> GetValues<T>() {\n        return Enum.GetValues(typeof(T)).Cast<T>();\n    }\n}\n\n```\n\nUsage:\n\n```csharp\nvar values = EnumUtil.GetValues<Foos>();\n\n```",
    "score": 2531,
    "tags": [
      "c#",
      ".net",
      "enums",
      "language-features"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:25.058311"
  },
  {
    "instruction": "Why not inherit from List<T>?",
    "context": "When planning out my programs, I often start with a chain of thought like so:\n\nA football team is just a list of football players. Therefore, I should represent it with:\n\n```csharp\nvar football_team = new List<FootballPlayer>();\n\n```\n\nThe ordering of this list represent the order in which the players are listed in the roster.\n\nBut I realize later that teams also have other properties, besides the mere list of players, that must be recorded. For example, the running total of scores this season, the current budget, the uniform colors, a \n```csharp\nstring\n```\n representing the name of the team, etc..\nSo then I think:\n\nOkay, a football team is just like a list of players, but additionally, it has a name (a \n```csharp\nstring\n```\n) and a running total of scores (an \n```csharp\nint\n```\n). .NET does not provide a class for storing football teams, so I will make my own class. The most similar and relevant existing structure is \n```csharp\nList<FootballPlayer>\n```\n, so I will inherit from it:\n\n```csharp\nclass FootballTeam : List<FootballPlayer> \n{ \n    public string TeamName; \n    public int RunningTotal \n}\n\n```\n\n\nBut it turns out that a guideline says you shouldn't inherit from \n```csharp\nList<T>\n```\n. I'm thoroughly confused by this guideline in two respects.\nWhy not?\nApparently \n```csharp\nList\n```\n is somehow optimized for performance. How so? What performance problems will I cause if I extend \n```csharp\nList\n```\n? What exactly will break?\nAnother reason I've seen is that \n```csharp\nList\n```\n is provided by Microsoft, and I have no control over it, so I cannot change it later, after exposing a \"public API\". But I struggle to understand this. What is a public API and why should I care? If my current project does not and is not likely to ever have this public API, can I safely ignore this guideline? If I do inherit from \n```csharp\nList\n```\n and it turns out I need a public API, what difficulties will I have?\nWhy does it even matter? A list is a list. What could possibly change? What could I possibly want to change?\nAnd lastly, if Microsoft did not want me to inherit from \n```csharp\nList\n```\n, why didn't they make the class \n```csharp\nsealed\n```\n?\nWhat else am I supposed to use?\nApparently, for custom collections, Microsoft has provided a \n```csharp\nCollection\n```\n class which should be extended instead of \n```csharp\nList\n```\n. But this class is very bare, and does not have many useful things, such as \n```csharp\nAddRange\n```\n, for instance. jvitor83's answer provides a performance rationale for that particular method, but how is a slow \n```csharp\nAddRange\n```\n not better than no \n```csharp\nAddRange\n```\n?\nInheriting from \n```csharp\nCollection\n```\n is way more work than inheriting from \n```csharp\nList\n```\n, and I see no benefit. Surely Microsoft wouldn't tell me to do extra work for no reason, so I can't help feeling like I am somehow misunderstanding something, and inheriting \n```csharp\nCollection\n```\n is actually not the right solution for my problem.\nI've seen suggestions such as implementing \n```csharp\nIList\n```\n. Just no. This is dozens of lines of boilerplate code which gains me nothing.\nLastly, some suggest wrapping the \n```csharp\nList\n```\n in something: \n\n```csharp\nclass FootballTeam \n{ \n    public List<FootballPlayer> Players; \n}\n\n```\n\nThere are two problems with this:\n\nIt makes my code needlessly verbose. I must now call \n```csharp\nmy_team.Players.Count\n```\n instead of just \n```csharp\nmy_team.Count\n```\n. Thankfully, with C# I can define indexers to make indexing transparent, and forward all the methods of the internal \n```csharp\nList\n```\n... But that's a lot of code! What do I get for all that work?\nIt just plain doesn't make any sense. A football team doesn't \"have\" a list of players. It is the list of players. You don't say \"John McFootballer has joined SomeTeam's players\". You say \"John has joined SomeTeam\". You don't add a letter to \"a string's characters\", you add a letter to a string. You don't add a book to a library's books, you add a book to a library.\n\nI realize that what happens \"under the hood\" can be said to be \"adding X to Y's internal list\", but this seems like a very counter-intuitive way of thinking about the world.\nMy question (summarized)\nWhat is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a \n```csharp\nlist\n```\n of \n```csharp\nthings\n```\n with a few bells and whistles?\nIs inheriting from \n```csharp\nList<T>\n```\n always unacceptable? When is it acceptable? Why/why not? What must a programmer consider, when deciding whether to inherit from \n```csharp\nList<T>\n```\n or not?",
    "output": "There are some good answers here. I would add to them the following points.\n\nWhat is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a list of things with a few bells and whistles?\n\nAsk any ten non-computer-programmer people who are familiar with the existence of football to fill in the blank:\n\nA football team is a particular kind of _____\n\nDid anyone say \"list of football players with a few bells and whistles\", or did they all say \"sports team\" or \"club\" or \"organization\"?  Your notion that a football team is a particular kind of list of players is in your human mind and your human mind alone.\n\n```csharp\nList<T>\n```\n is a mechanism.  Football team is a business object -- that is, an object that represents some concept that is in the business domain of the program. Don't mix those! A football team is a kind of team; it has a roster, a roster is a list of players. A roster is not a particular kind of list of players. A roster is a list of players. So make a property called \n```csharp\nRoster\n```\n that is a \n```csharp\nList<Player>\n```\n. And make it \n```csharp\nReadOnlyList<Player>\n```\n while you're at it, unless you believe that everyone who knows about a football team gets to delete players from the roster.\n\nIs inheriting from \n```csharp\nList<T>\n```\n always unacceptable?\n\nUnacceptable to whom? Me? No.\n\nWhen is it acceptable?\n\nWhen you're building a mechanism that extends the \n```csharp\nList<T>\n```\n mechanism.\n\nWhat must a programmer consider, when deciding whether to inherit from \n```csharp\nList<T>\n```\n or not?\n\nAm I building a mechanism or a business object?\n\nBut that's a lot of code! What do I get for all that work?\n\nYou spent more time typing up your question that it would have taken you to write forwarding methods for the relevant members of \n```csharp\nList<T>\n```\n fifty times over. You're clearly not afraid of verbosity, and we are talking about a very small amount of code here; this is a few minutes work.\nUPDATE\nI gave it some more thought and there is another reason to not model a football team as a list of players. In fact it might be a bad idea to model a football team as having a list of players too. The problem with a team as/having a list of players is that what you've got is a snapshot of the team at a moment in time. I don't know what your business case is for this class, but if I had a class that represented a football team I would want to ask it questions like \"how many Seahawks players missed games due to injury between 2003 and 2013?\" or \"What Denver player who previously played for another team had the largest year-over-year increase in yards ran?\" or \"Did the Piggers go all the way this year?\"\nThat is, a football team seems to me to be well modeled as a collection of historical facts such as when a player was recruited, injured, retired, etc. Obviously the current player roster is an important fact that should probably be front-and-center, but there may be other interesting things you want to do with this object that require a more historical perspective.",
    "score": 1848,
    "tags": [
      "c#",
      ".net",
      "list",
      "oop",
      "inheritance"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:25.411376"
  },
  {
    "instruction": "What is the difference between const and readonly in C#?",
    "context": "What is the difference between \n```csharp\nconst\n```\n and \n```csharp\nreadonly\n```\n in C#? \nWhen would you use one over the other?",
    "output": "Apart from the apparent difference of\n\nhaving to declare the value at the time of a definition for a \n```csharp\nconst\n```\n VS \n```csharp\nreadonly\n```\n values can be computed dynamically but need to be assigned before the constructor exits. After that it is frozen.\n\n```csharp\nconst\n```\n's are implicitly \n```csharp\nstatic\n```\n. You use a \n```csharp\nClassName.ConstantName\n```\n notation to access them.\n\nThere is a subtle difference. Consider a class defined in \n```csharp\nAssemblyA\n```\n.\n\n```csharp\npublic class Const_V_Readonly\n{\n  public const int I_CONST_VALUE = 2;\n  public readonly int I_RO_VALUE;\n  public Const_V_Readonly()\n  {\n     I_RO_VALUE = 3;\n  }\n}\n\n```\n\n\n```csharp\nAssemblyB\n```\n references \n```csharp\nAssemblyA\n```\n and uses these values in code. When this is compiled:\n\nin the case of the \n```csharp\nconst\n```\n value, it is like a find-replace.  The value 2 is 'baked into' the \n```csharp\nAssemblyB\n```\n's IL. This means that if tomorrow I update \n```csharp\nI_CONST_VALUE\n```\n to 20, \n```csharp\nAssemblyB\n```\n would still have 2 till I recompile it.\nin the case of the \n```csharp\nreadonly\n```\n value, it is like a \n```csharp\nref\n```\n to a memory location. The value is not baked into \n```csharp\nAssemblyB\n```\n's IL. This means that if the memory location is updated, \n```csharp\nAssemblyB\n```\n gets the new value without recompilation. So if \n```csharp\nI_RO_VALUE\n```\n is updated to 30, you only need to build \n```csharp\nAssemblyA\n```\n and all clients do not need to be recompiled.\n\nSo if you are confident that the value of the constant won't change, use a \n```csharp\nconst\n```\n.\n\n```csharp\npublic const int CM_IN_A_METER = 100;\n\n```\n\nBut if you have a constant that may change (e.g. w.r.t. precision) or when in doubt, use a \n```csharp\nreadonly\n```\n.\n\n```csharp\npublic readonly float PI = 3.14;\n\n```\n\nUpdate: Aku needs to get a mention because he pointed this out first. Also I need to plug where I learned this: Effective C# - Bill Wagner",
    "score": 1578,
    "tags": [
      "c#",
      ".net",
      "constants",
      "readonly"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:25.722160"
  },
  {
    "instruction": "How to Sort a List<T> by a property in the object",
    "context": "I have a class called \n```csharp\nOrder\n```\n which has properties such as \n```csharp\nOrderId\n```\n, \n```csharp\nOrderDate\n```\n, \n```csharp\nQuantity\n```\n, and \n```csharp\nTotal\n```\n. I have a list of this \n```csharp\nOrder\n```\n class:\n\n```csharp\nList<Order> objListOrder = new List<Order>();\nGetOrderList(objListOrder); // fill list of orders\n\n```\n\nI want to sort the list based on one property of the \n```csharp\nOrder\n```\n object; for example, either by \n```csharp\nOrderDate\n```\n or \n```csharp\nOrderID\n```\n.\nHow can I do this in C#?",
    "output": "The easiest way I can think of is to use Linq:\n\n```csharp\nList<Order> SortedList = objListOrder.OrderBy(o=>o.OrderDate).ToList();\n\n```",
    "score": 2340,
    "tags": [
      "c#",
      "generics",
      "list",
      "sorting"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:26.021763"
  },
  {
    "instruction": "Why is it important to override GetHashCode when Equals method is overridden?",
    "context": "Given the following class\n\n```csharp\npublic class Foo\n{\n    public int FooId { get; set; }\n    public string FooName { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        Foo fooItem = obj as Foo;\n\n        if (fooItem == null) \n        {\n           return false;\n        }\n\n        return fooItem.FooId == this.FooId;\n    }\n\n    public override int GetHashCode()\n    {\n        // Which is preferred?\n\n        return base.GetHashCode();\n\n        //return this.FooId.GetHashCode();\n    }\n}\n\n```\n\nI have overridden the \n```csharp\nEquals\n```\n method because \n```csharp\nFoo\n```\n represent a row for the \n```csharp\nFoo\n```\ns table.  Which is the preferred method for overriding the \n```csharp\nGetHashCode\n```\n?\nWhy is it important to override \n```csharp\nGetHashCode\n```\n?",
    "output": "Yes, it is important if your item will be used as a key in a dictionary, or \n```csharp\nHashSet<T>\n```\n, etc - since this is used (in the absence of a custom \n```csharp\nIEqualityComparer<T>\n```\n) to group items into buckets. If the hash-code for two items does not match, they may never be considered equal (Equals will simply never be called).\nThe GetHashCode() method should reflect the \n```csharp\nEquals\n```\n logic; the rules are:\n\nif two things are equal (\n```csharp\nEquals(...) == true\n```\n) then they must return the same value for \n```csharp\nGetHashCode()\n```\n\nif the \n```csharp\nGetHashCode()\n```\n is equal, it is not necessary for them to be the same; this is a collision, and \n```csharp\nEquals\n```\n will be called to see if it is a real equality or not.\n\nIn this case, it looks like \"\n```csharp\nreturn FooId;\n```\n\" is a suitable \n```csharp\nGetHashCode()\n```\n implementation. If you are testing multiple properties, it is common to combine them using code like below, to reduce diagonal collisions (i.e. so that \n```csharp\nnew Foo(3,5)\n```\n has a different hash-code to \n```csharp\nnew Foo(5,3)\n```\n):\nIn modern frameworks, the \n```csharp\nHashCode\n```\n type has methods to help you create a hashcode from multiple values; on older frameworks, you'd need to go without, so something like:\n\n```csharp\nunchecked // only needed if you're compiling with arithmetic checks enabled\n{ // (the default compiler behaviour is *disabled*, so most folks won't need this)\n    int hash = 13;\n    hash = (hash * 7) + field1.GetHashCode();\n    hash = (hash * 7) + field2.GetHashCode();\n    ...\n    return hash;\n}\n\n```\n\nOh - for convenience, you might also consider providing \n```csharp\n==\n```\n and \n```csharp\n!=\n```\n operators when overriding \n```csharp\nEquals\n```\n and \n```csharp\nGetHashCode\n```\n.\n\nA demonstration of what happens when you get this wrong is here.",
    "score": 1492,
    "tags": [
      "c#",
      "overriding",
      "hashcode"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:26.311886"
  },
  {
    "instruction": "How do you convert a byte array to a hexadecimal string, and vice versa?",
    "context": "How can you convert a byte array to a hexadecimal string and vice versa?",
    "output": "You can use \n```csharp\nConvert.ToHexString\n```\n starting with .NET 5. \nThere's also a method for the reverse operation: \n```csharp\nConvert.FromHexString\n```\n.\n\nFor older versions of .NET you can either use:\n\n```csharp\npublic static string ByteArrayToString(byte[] ba)\n{\n  StringBuilder hex = new StringBuilder(ba.Length * 2);\n  foreach (byte b in ba)\n    hex.AppendFormat(\"{0:x2}\", b);\n  return hex.ToString();\n}\n\n```\n\nor:\n\n```csharp\npublic static string ByteArrayToString(byte[] ba)\n{\n  return BitConverter.ToString(ba).Replace(\"-\",\"\");\n}\n\n```\n\nThere are even more variants of doing it, for example here.\nThe reverse conversion would go like this:\n\n```csharp\npublic static byte[] StringToByteArray(String hex)\n{\n  int NumberChars = hex.Length;\n  byte[] bytes = new byte[NumberChars / 2];\n  for (int i = 0; i < NumberChars; i += 2)\n    bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);\n  return bytes;\n}\n\n```\n\n\nUsing \n```csharp\nSubstring\n```\n is the best option in combination with \n```csharp\nConvert.ToByte\n```\n. See this answer for more information. If you need better performance, you must avoid \n```csharp\nConvert.ToByte\n```\n before you can drop \n```csharp\nSubString\n```\n.",
    "score": 1739,
    "tags": [
      "c#",
      "arrays",
      "hex"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:26.759072"
  },
  {
    "instruction": "Calculate relative time in C#",
    "context": "Given a specific \n```csharp\nDateTime\n```\n value, how do I display relative time, like:\n\n\n```csharp\n2 hours ago\n```\n\n\n```csharp\n3 days ago\n```\n\n\n```csharp\na month ago\n```",
    "output": "Jeff, your code is nice but could be clearer with constants (as suggested in Code Complete).\n\n```csharp\nconst int SECOND = 1;\nconst int MINUTE = 60 * SECOND;\nconst int HOUR = 60 * MINUTE;\nconst int DAY = 24 * HOUR;\nconst int MONTH = 30 * DAY;\n\nvar ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);\ndouble delta = Math.Abs(ts.TotalSeconds);\n\nif (delta < 1 * MINUTE)\n  return ts.Seconds == 1 ? \"one second ago\" : ts.Seconds + \" seconds ago\";\n\nif (delta < 2 * MINUTE)\n  return \"a minute ago\";\n\nif (delta < 45 * MINUTE)\n  return ts.Minutes + \" minutes ago\";\n\nif (delta < 90 * MINUTE)\n  return \"an hour ago\";\n\nif (delta < 24 * HOUR)\n  return ts.Hours + \" hours ago\";\n\nif (delta < 48 * HOUR)\n  return \"yesterday\";\n\nif (delta < 30 * DAY)\n  return ts.Days + \" days ago\";\n\nif (delta < 12 * MONTH)\n{\n  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));\n  return months <= 1 ? \"one month ago\" : months + \" months ago\";\n}\nelse\n{\n  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));\n  return years <= 1 ? \"one year ago\" : years + \" years ago\";\n}\n\n```",
    "score": 1071,
    "tags": [
      "c#",
      "datetime",
      "time",
      "datediff",
      "relative-time-span"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:27.573721"
  },
  {
    "instruction": "When should I use a struct rather than a class in C#?",
    "context": "When should you use struct and not class in C#? My conceptual model is that structs are used in times when the item is merely a collection of value types.  A way to logically hold them all together into a cohesive whole.\nI came across these rules here:\n\nA struct should represent a single\nvalue.\nA struct should have a memory\nfootprint less than 16 bytes.\nA struct should not be changed after\ncreation.\n\nDo these rules work? What does a struct mean semantically?",
    "output": "The source referenced by the OP has some credibility ...but what about Microsoft - what is the stance on struct usage? I sought some extra learning from Microsoft, and here is what I found:  \n\nConsider defining a structure instead of a class if instances of the\n  type are small and commonly short-lived or are commonly embedded in\n  other objects.\nDo not define a structure unless the type has all of the following characteristics: \n\nIt logically represents a single value, similar to primitive types (integer, double, and so on).\nIt has an instance size smaller than 16 bytes.\nIt is immutable.\nIt will not have to be boxed frequently.  \n\n\nMicrosoft consistently violates those rules\nOkay, #2 and #3 anyway. Our beloved dictionary has 2 internal structs:  \n\n```csharp\n[StructLayout(LayoutKind.Sequential)]  // default for structs\nprivate struct Entry  //<Tkey, TValue>\n{\n    //  View code at *Reference Source\n}\n\n[Serializable, StructLayout(LayoutKind.Sequential)]\npublic struct Enumerator : \n    IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, \n    IDictionaryEnumerator, IEnumerator\n{\n    //  View code at *Reference Source\n}\n\n```\n\n*Reference Source\nThe 'JonnyCantCode.com' source got 3 out of 4 - quite forgivable since #4 probably wouldn't be an issue. If you find yourself boxing a struct, rethink your architecture.  \nLet's look at why Microsoft would use these structs:\n\nEach struct, \n```csharp\nEntry\n```\n and \n```csharp\nEnumerator\n```\n, represent single values.\nSpeed\n\n```csharp\nEntry\n```\n is never passed as a parameter outside of the Dictionary class. Further investigation shows that in order to satisfy implementation of IEnumerable, Dictionary uses the \n```csharp\nEnumerator\n```\n struct which it copies every time an enumerator is requested ...makes sense.\nInternal to the Dictionary class. \n```csharp\nEnumerator\n```\n is public because Dictionary is enumerable and must have equal accessibility to the IEnumerator interface implementation - e.g. IEnumerator getter.  \n\nUpdate - In addition, realize that when a struct implements an interface - as Enumerator does - and is cast to that implemented type, the struct becomes a reference type and is moved to the heap. Internal to the Dictionary class, Enumerator is still a value type. However, as soon as a method calls \n```csharp\nGetEnumerator()\n```\n, a reference-type \n```csharp\nIEnumerator\n```\n is returned.\nWhat we don't see here is any attempt or proof of requirement to keep structs immutable or maintaining an instance size of only 16 bytes or less:  \n\nNothing in the structs above is declared \n```csharp\nreadonly\n```\n - not immutable\nSize of these struct could be well over 16 bytes\n\n```csharp\nEntry\n```\n has an undetermined lifetime (from \n```csharp\nAdd()\n```\n, to \n```csharp\nRemove()\n```\n, \n```csharp\nClear()\n```\n, or garbage collection);\n\nAnd ...\n 4. Both structs store TKey and TValue, which we all know are quite capable of being reference types (added bonus info)\nHashed keys notwithstanding, dictionaries are fast in part because instancing a struct is quicker than a reference type. Here, I have a \n```csharp\nDictionary<int, int>\n```\n that stores 300,000 random integers with sequentially incremented keys.\n\nCapacity: 312874\n  MemSize:  2660827 bytes\n  Completed Resize:  5ms\n  Total time to fill:  889ms\n\nCapacity:  number of elements available before the internal array must be resized.  \nMemSize:  determined by serializing the dictionary into a MemoryStream and getting a byte length (accurate enough for our purposes).  \nCompleted Resize:  the time it takes to resize the internal array from 150862 elements to 312874 elements. When you figure that each element is sequentially copied via \n```csharp\nArray.CopyTo()\n```\n, that ain't too shabby.  \nTotal time to fill: admittedly skewed due to logging and an \n```csharp\nOnResize\n```\n event I added to the source; however, still impressive to fill 300k integers while resizing 15 times during the operation. Just out of curiosity, what would the total time to fill be if I already knew the capacity? 13ms \nSo, now, what if \n```csharp\nEntry\n```\n were a class? Would these times or metrics really differ that much?  \n\nCapacity:  312874\n  MemSize:  2660827 bytes\n  Completed Resize:  26ms\n  Total time to fill:  964ms\n\nObviously, the big difference is in resizing. Any difference if Dictionary is initialized with the Capacity? Not enough to be concerned with ... 12ms.  \nWhat happens is, because \n```csharp\nEntry\n```\n is a struct, it does not require initialization like a reference type. This is both the beauty and the bane of the value type. In order to use \n```csharp\nEntry\n```\n as a reference type, I had to insert the following code:\n\n```csharp\n/*\n *  Added to satisfy initialization of entry elements --\n *  this is where the extra time is spent resizing the Entry array\n * **/\nfor (int i = 0 ; i < prime ; i++)\n{\n    destinationArray[i] = new Entry( );\n}\n/*  *********************************************** */  \n\n```\n\nThe reason I had to initialize each array element of \n```csharp\nEntry\n```\n as a reference type can be found at MSDN: Structure Design. In short:\n\nDo not provide a default constructor for a structure.\nIf a structure defines a default constructor, when arrays of the\n  structure are created, the common language runtime automatically\n  executes the default constructor on each array element.\nSome compilers, such as the C# compiler, do not allow structures to\n  have default constructors.\n\nIt is actually quite simple and we will borrow from Asimov's Three Laws of Robotics:\n\nThe struct must be safe to use\nThe struct must perform its function efficiently, unless this would violate rule #1\nThe struct must remain intact during its use unless its destruction is required to satisfy rule #1  \n\n...what do we take away from this: in short, be responsible with the use of value types. They are quick and efficient, but have the ability to cause many unexpected behaviors if not properly maintained (i.e. unintentional copies).",
    "score": 690,
    "tags": [
      "c#",
      "struct"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:27.907443"
  },
  {
    "instruction": "Try-catch speeding up my code?",
    "context": "I wrote some code for testing the impact of try-catch, but seeing some surprising results.\n\n```csharp\nstatic void Main(string[] args)\n{\n    Thread.CurrentThread.Priority = ThreadPriority.Highest;\n    Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.RealTime;\n\n    long start = 0, stop = 0, elapsed = 0;\n    double avg = 0.0;\n\n    long temp = Fibo(1);\n\n    for (int i = 1; i < 100000000; i++)\n    {\n        start = Stopwatch.GetTimestamp();\n        temp = Fibo(100);\n        stop = Stopwatch.GetTimestamp();\n\n        elapsed = stop - start;\n        avg = avg + ((double)elapsed - avg) / i;\n    }\n\n    Console.WriteLine(\"Elapsed: \" + avg);\n    Console.ReadKey();\n}\n\nstatic long Fibo(int n)\n{\n    long n1 = 0, n2 = 1, fibo = 0;\n    n++;\n\n    for (int i = 1; i < n; i++)\n    {\n        n1 = n2;\n        n2 = fibo;\n        fibo = n1 + n2;\n    }\n\n    return fibo;\n}\n\n```\n\nOn my computer, this consistently prints out a value around 0.96..\nWhen I wrap the for loop inside Fibo() with a try-catch block like this:\n\n```csharp\nstatic long Fibo(int n)\n{\n    long n1 = 0, n2 = 1, fibo = 0;\n    n++;\n\n    try\n    {\n        for (int i = 1; i < n; i++)\n        {\n            n1 = n2;\n            n2 = fibo;\n            fibo = n1 + n2;\n        }\n    }\n    catch {}\n\n    return fibo;\n}\n\n```\n\nNow it consistently prints out 0.69... -- it actually runs faster! But why?\nNote: I compiled this using the Release configuration and directly ran the EXE file (outside Visual Studio).\nEDIT: Jon Skeet's excellent analysis shows that try-catch is somehow causing the x86 CLR to use the CPU registers in a more favorable way in this specific case (and I think we're yet to understand why). I confirmed Jon's finding that x64 CLR doesn't have this difference, and that it was faster than the x86 CLR. I also tested using \n```csharp\nint\n```\n types inside the Fibo method instead of \n```csharp\nlong\n```\n types, and then the x86 CLR was as equally fast as the x64 CLR.\n\nUPDATE: It looks like this issue has been fixed by Roslyn. Same machine, same CLR version -- the issue remains as above when compiled with VS 2013, but the problem goes away when compiled with VS 2015.",
    "output": "One of the Roslyn engineers who specializes in understanding optimization of stack usage took a look at this and reports to me that there seems to be a problem in the interaction between the way the C# compiler generates local variable stores and the way the JIT compiler does register scheduling in the corresponding x86 code. The result is suboptimal code generation on the loads and stores of the locals.\nFor some reason unclear to all of us, the problematic code generation path is avoided when the JITter knows that the block is in a try-protected region. \nThis is pretty weird. We'll follow up with the JITter team and see whether we can get a bug entered so that they can fix this. \nAlso, we are working on improvements for Roslyn to the C# and VB compilers' algorithms for determining when locals can be made \"ephemeral\" -- that is, just pushed and popped on the stack, rather than allocated a specific location on the stack for the duration of the activation. We believe that the JITter will be able to do a better job of register allocation and whatnot if we give it better hints about when locals can be made \"dead\" earlier.\nThanks for bringing this to our attention, and apologies for the odd behaviour.",
    "score": 1142,
    "tags": [
      "c#",
      ".net",
      "clr",
      "try-catch",
      "performance-testing"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:28.221947"
  },
  {
    "instruction": "'Static readonly' vs. 'const'",
    "context": "I've read around about \n```csharp\nconst\n```\n and \n```csharp\nstatic readonly\n```\n fields. We have some classes which contain only constant values. They are used for various things around in our system. So I am wondering if my observation is correct:\nShould these kind of constant values always be \n```csharp\nstatic readonly\n```\n for everything that is public? And only use \n```csharp\nconst\n```\n for \n```csharp\ninternal\n```\n/\n```csharp\nprotected\n```\n/\n```csharp\nprivate\n```\n values?\nWhat do you recommend? Should I maybe even not use \n```csharp\nstatic readonly\n```\n fields, but rather use properties maybe?",
    "output": "```csharp\npublic static readonly\n```\n fields are a little unusual; \n```csharp\npublic static\n```\n properties (with only a \n```csharp\nget\n```\n) would be more common (perhaps backed by a \n```csharp\nprivate static readonly\n```\n field).\n\n```csharp\nconst\n```\n values are burned directly into the call-site; this is double edged:\n\nit is useless if the value is fetched at runtime, perhaps from config\nif you change the value of a const, you need to rebuild all the clients\nbut it can be faster, as it avoids a method call...\n...which might sometimes have been inlined by the JIT anyway\n\nIf the value will never change, then const is fine - \n```csharp\nZero\n```\n etc make reasonable consts ;p Other than that, \n```csharp\nstatic\n```\n properties are more common.",
    "score": 1089,
    "tags": [
      "c#",
      "constants"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:28.530051"
  },
  {
    "instruction": "How do I update the GUI from another thread?",
    "context": "Which is the simplest way to update a \n```csharp\nLabel\n```\n from another \n```csharp\nThread\n```\n?\n\nI have a \n```csharp\nForm\n```\n running on \n```csharp\nthread1\n```\n, and from that I'm starting another thread (\n```csharp\nthread2\n```\n). \nWhile \n```csharp\nthread2\n```\n is processing some files I would like to update a \n```csharp\nLabel\n```\n on the \n```csharp\nForm\n```\n with the current status of \n```csharp\nthread2\n```\n's work.\n\nHow could I do that?",
    "output": "The simplest way is an anonymous method passed into \n```csharp\nLabel.Invoke\n```\n:\n\n```csharp\n// Running on the worker thread\nstring newText = \"abc\";\nform.Label.Invoke((MethodInvoker)delegate {\n    // Running on the UI thread\n    form.Label.Text = newText;\n});\n// Back on the worker thread\n\n```\n\nNotice that \n```csharp\nInvoke\n```\n blocks execution until it completes--this is synchronous code. The question doesn't ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.",
    "score": 1230,
    "tags": [
      "c#",
      ".net",
      "multithreading",
      "winforms",
      "user-interface"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:28.853910"
  },
  {
    "instruction": "What is the difference between a field and a property?",
    "context": "In C#, what makes a field different from a property, and when should a field be used instead of a property?",
    "output": "Properties expose fields.  Fields should (almost always) be kept private to a class and accessed via get and set properties.  Properties provide a level of abstraction allowing you to change the fields while not affecting the external way they are accessed by the things that use your class.\n\n```csharp\npublic class MyClass\n{\n    // this is a field.  It is private to your class and stores the actual data.\n    private string _myField;\n\n    // this is a property. When accessed it uses the underlying field,\n    // but only exposes the contract, which will not be affected by the underlying field\n    public string MyProperty\n    {\n        get\n        {\n            return _myField;\n        }\n        set\n        {\n            _myField = value;\n        }\n    }\n\n    // This is an AutoProperty (C# 3.0 and higher) - which is a shorthand syntax\n    // used to generate a private field for you\n    public int AnotherProperty { get; set; } \n}\n\n```\n\n@Kent points out that Properties are not required to encapsulate fields, they could do a calculation on other fields, or serve other purposes.\n@GSS points out that you can also do other logic, such as validation, when a property is accessed, another useful feature.",
    "score": 1378,
    "tags": [
      "c#",
      "oop",
      "properties",
      "field"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:29.165014"
  },
  {
    "instruction": "Why is Dictionary preferred over Hashtable in C#?",
    "context": "In most programming languages, dictionaries are preferred over hashtables.\nWhat are the reasons behind that?",
    "output": "For what it's worth, a Dictionary is (conceptually) a hash table.\nIf you meant \"why do we use the \n```csharp\nDictionary<TKey, TValue>\n```\n class instead of the \n```csharp\nHashtable\n```\n class?\", then it's an easy answer: \n```csharp\nDictionary<TKey, TValue>\n```\n is a generic type, \n```csharp\nHashtable\n```\n is not. That means you get type safety with \n```csharp\nDictionary<TKey, TValue>\n```\n, because you can't insert any random object into it, and you don't have to cast the values you take out.\nInterestingly, the \n```csharp\nDictionary<TKey, TValue>\n```\n implementation in the .NET Framework is based on the \n```csharp\nHashtable\n```\n, as you can tell from this comment in its source code:\n\nThe generic Dictionary was copied from Hashtable's source\n\nSource",
    "score": 1732,
    "tags": [
      "c#",
      ".net",
      "vb.net",
      "data-structures"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:29.481331"
  },
  {
    "instruction": "Path.Combine for URLs?",
    "context": "Path.Combine is handy, but is there a similar function in the .NET framework for URLs?\nI'm looking for syntax like this:\n\n```csharp\nUrl.Combine(\"http://MyUrl.com/\", \"/Images/Image.jpg\")\n\n```\n\nwhich would return:\n\n```csharp\n\"http://MyUrl.com/Images/Image.jpg\"\n```",
    "output": "```csharp\nUri\n```\n has a constructor that should do this for you: \n```csharp\nnew Uri(Uri baseUri, string relativeUri)\n```\n\nHere's an example:\n\n```csharp\nUri baseUri = new Uri(\"http://www.contoso.com\");\nUri myUri = new Uri(baseUri, \"catalog/shownew.htm\");\n\n```\n\nNote from editor: Beware, this method does not work as expected. It can cut part of baseUri in some cases. See comments and other answers.",
    "score": 1355,
    "tags": [
      "c#",
      ".net",
      "url"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:29.792741"
  },
  {
    "instruction": "LINQ's Distinct() on a particular property",
    "context": "I am playing with LINQ to learn about it, but I can't figure out how to use \n```csharp\nDistinct\n```\n when I do not have a simple list (a simple list of integers is pretty easy to do, this is not the question). What I if want to use \n```csharp\nDistinct\n```\n on a \n```csharp\nList<TElement>\n```\n on one or more properties of the \n```csharp\nTElement\n```\n?\nExample: If an object is \n```csharp\nPerson\n```\n, with property \n```csharp\nId\n```\n. How can I get all \n```csharp\nPerson\n```\n and use \n```csharp\nDistinct\n```\n on them with the property \n```csharp\nId\n```\n of the object?\n\n```csharp\nPerson1: Id=1, Name=\"Test1\"\nPerson2: Id=1, Name=\"Test1\"\nPerson3: Id=2, Name=\"Test2\"\n\n```\n\nHow can I get just \n```csharp\nPerson1\n```\n and \n```csharp\nPerson3\n```\n? Is that possible?\nIf it's not possible with LINQ, what would be the best way to have a list of \n```csharp\nPerson\n```\n depending on some of its properties?",
    "output": "What if I want to obtain a distinct list based on one or more properties?\n\nSimple! You want to group them and pick a winner out of the group.\n\n```csharp\nList<Person> distinctPeople = allPeople\n  .GroupBy(p => p.PersonId)\n  .Select(g => g.First())\n  .ToList();\n\n```\n\nIf you want to define groups on multiple properties, here's how:\n\n```csharp\nList<Person> distinctPeople = allPeople\n  .GroupBy(p => new {p.PersonId, p.FavoriteColor} )\n  .Select(g => g.First())\n  .ToList();\n\n```\n\nNote: Certain query providers are unable to resolve that each group must have at least one element, and that First is the appropriate method to call in that situation. If you find yourself working with such a query provider, FirstOrDefault may help get your query through the query provider.\nNote2: Consider this answer for an EF Core (prior to EF Core 6) compatible approach. https://stackoverflow.com/a/66529949/8155",
    "score": 2458,
    "tags": [
      "c#",
      "linq",
      "duplicates",
      "unique",
      "distinct"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:30.087169"
  },
  {
    "instruction": "Virtual member call in a constructor",
    "context": "I'm getting a warning from ReSharper about a call to a virtual member from my objects constructor. \nWhy would this be something not to do?",
    "output": "When an object written in C# is constructed, what happens is that the initializers run in order from the most derived class to the base class, and then constructors run in order from the base class to the most derived class (see Eric Lippert's blog for details as to why this is).\nAlso in .NET objects do not change type as they are constructed, but start out as the most derived type, with the method table being for the most derived type. This means that virtual method calls always run on the most derived type.\nWhen you combine these two facts you are left with the problem that if you make a virtual method call in a constructor, and it is not the most derived type in its inheritance hierarchy, that it will be called on a class whose constructor has not been run, and therefore may not be in a suitable state to have that method called. \nThis problem is, of course, mitigated if you mark your class as sealed to ensure that it is the most derived type in the inheritance hierarchy - in which case it is perfectly safe to call the virtual method.",
    "score": 1298,
    "tags": [
      "c#",
      "constructor",
      "warnings",
      "resharper",
      "virtual-functions"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:30.374747"
  },
  {
    "instruction": "Send HTTP POST request in .NET",
    "context": "How can I make an HTTP POST request and send data in the body?",
    "output": "There are several ways to perform HTTP GET and POST requests:\n\nMethod A: HttpClient (Preferred)\nAvailable in: .NET Framework 4.5+, .NET Standard 1.1+, and .NET Core 1.0+.\nIt is currently the preferred approach, and is asynchronous and high performance. Use the built-in version in most cases, but for very old platforms there is a NuGet package.\n\n```csharp\nusing System.Net.Http;\n\n```\n\nSetup\nIt is recommended to instantiate one \n```csharp\nHttpClient\n```\n for your application's lifetime and share it unless you have a specific reason not to.\n\n```csharp\nprivate static readonly HttpClient client = new HttpClient();\n\n```\n\nSee \n```csharp\nHttpClientFactory\n```\n for a dependency injection solution.\n\n\nPOST\n\n```csharp\n  var values = new Dictionary<string, string>\n  {\n      { \"thing1\", \"hello\" },\n      { \"thing2\", \"world\" }\n  };\n\n  var content = new FormUrlEncodedContent(values);\n\n  var response = await client.PostAsync(\"http://www.example.com/recepticle.aspx\", content);\n\n  var responseString = await response.Content.ReadAsStringAsync();\n\n```\n\n\nGET\n\n```csharp\n  var responseString = await client.GetStringAsync(\"http://www.example.com/recepticle.aspx\");\n\n```\n\n\n\n\nMethod B: Third-Party Libraries\nRestSharp\n\nPOST\n\n```csharp\n   var client = new RestClient(\"http://example.com\");\n   // client.Authenticator = new HttpBasicAuthenticator(username, password);\n   var request = new RestRequest(\"resource/{id}\");\n   request.AddParameter(\"thing1\", \"Hello\");\n   request.AddParameter(\"thing2\", \"world\");\n   request.AddHeader(\"header\", \"value\");\n   request.AddFile(\"file\", path);\n   var response = client.Post(request);\n   var content = response.Content; // Raw content as string\n   var response2 = client.Post<Person>(request);\n   var name = response2.Data.Name;\n\n```\n\n\n\nFlurl.Http\nIt is a newer library sporting a fluent API, testing helpers, uses HttpClient under the hood, and is portable. It is available via NuGet.\n\n```csharp\n    using Flurl.Http;\n\n```\n\n\n\nPOST\n\n```csharp\n  var responseString = await \"http://www.example.com/recepticle.aspx\"\n      .PostUrlEncodedAsync(new { thing1 = \"hello\", thing2 = \"world\" })\n      .ReceiveString();\n\n```\n\n\n\n```csharp\nGET\n```\n\n\n```csharp\n  var responseString = await \"http://www.example.com/recepticle.aspx\"\n      .GetStringAsync();\n\n```\n\n\n\n\nMethod C: HttpWebRequest (not recommended for new work)\nAvailable in: .NET Framework 1.1+, .NET Standard 2.0+, .NET Core 1.0+. In .NET Core, it is mostly for compatibility -- it wraps \n```csharp\nHttpClient\n```\n, is less performant, and won't get new features.\n\n```csharp\nusing System.Net;\nusing System.Text;  // For class Encoding\nusing System.IO;    // For StreamReader\n\n```\n\n\n\nPOST\n\n```csharp\n  var request = (HttpWebRequest)WebRequest.Create(\"http://www.example.com/recepticle.aspx\");\n\n  var postData = \"thing1=\" + Uri.EscapeDataString(\"hello\");\n      postData += \"&thing2=\" + Uri.EscapeDataString(\"world\");\n  var data = Encoding.ASCII.GetBytes(postData);\n\n  request.Method = \"POST\";\n  request.ContentType = \"application/x-www-form-urlencoded\";\n  request.ContentLength = data.Length;\n\n  using (var stream = request.GetRequestStream())\n  {\n      stream.Write(data, 0, data.Length);\n  }\n\n  var response = (HttpWebResponse)request.GetResponse();\n\n  var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n```\n\n\nGET\n\n```csharp\n  var request = (HttpWebRequest)WebRequest.Create(\"http://www.example.com/recepticle.aspx\");\n\n  var response = (HttpWebResponse)request.GetResponse();\n\n  var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n```\n\n\n\n\nMethod D: WebClient (Not recommended for new work)\nThis is a wrapper around \n```csharp\nHttpWebRequest\n```\n. Compare with \n```csharp\nHttpClient\n```\n.\nAvailable in: .NET Framework 1.1+, NET Standard 2.0+, and .NET Core 2.0+.\nIn some circumstances (.NET Framework 4.5-4.8), if you need to do a HTTP request synchronously, \n```csharp\nWebClient\n```\n can still be used.\n\n```csharp\nusing System.Net;\nusing System.Collections.Specialized;\n\n```\n\n\n\nPOST\n\n```csharp\n  using (var client = new WebClient())\n  {\n      var values = new NameValueCollection();\n      values[\"thing1\"] = \"hello\";\n      values[\"thing2\"] = \"world\";\n\n      var response = client.UploadValues(\"http://www.example.com/recepticle.aspx\", values);\n\n      var responseString = Encoding.Default.GetString(response);\n  }\n\n```\n\n\nGET\n\n```csharp\n  using (var client = new WebClient())\n  {\n      var responseString = client.DownloadString(\"http://www.example.com/recepticle.aspx\");\n  }\n\n```",
    "score": 2729,
    "tags": [
      "c#",
      ".net",
      "post",
      "httpwebrequest",
      "httprequest"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:30.673695"
  },
  {
    "instruction": "How to calculate difference between two dates (number of days)?",
    "context": "How can one calculate the number of days between two dates in C#?",
    "output": "Assuming \n```csharp\nStartDate\n```\n and \n```csharp\nEndDate\n```\n are of type \n```csharp\nDateTime\n```\n:\n\n```csharp\n(EndDate - StartDate).TotalDays\n\n```",
    "score": 2649,
    "tags": [
      "c#",
      "date"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:30.963069"
  },
  {
    "instruction": "Hidden Features of C#?",
    "context": "This came to my mind after I learned the following from this question:\n\n```csharp\nwhere T : struct\n\n```\n\nWe, C# developers, all know the basics of C#. I mean declarations, conditionals, loops, operators, etc.\nSome of us even mastered the stuff like Generics, anonymous types, lambdas, LINQ, ...\nBut what are the most hidden features or tricks of C# that even C# fans, addicts, experts barely know?\nHere are the revealed features so far:\n\nKeywords\n\n\n```csharp\nyield\n```\n by Michael Stum\n\n```csharp\nvar\n```\n by Michael Stum\n\n```csharp\nusing()\n```\n statement by kokos\n\n```csharp\nreadonly\n```\n by kokos\n\n```csharp\nas\n```\n by Mike Stone\n\n```csharp\nas\n```\n / \n```csharp\nis\n```\n by Ed Swangren\n\n```csharp\nas\n```\n / \n```csharp\nis\n```\n (improved) by Rocketpants\n\n```csharp\ndefault\n```\n by deathofrats\n\n```csharp\nglobal::\n```\n by pzycoman\n\n```csharp\nusing()\n```\n blocks by AlexCuse\n\n```csharp\nvolatile\n```\n by Jakub Šturc\n\n```csharp\nextern alias\n```\n by Jakub Šturc\n\nAttributes\n\n\n```csharp\nDefaultValueAttribute\n```\n by Michael Stum\n\n```csharp\nObsoleteAttribute\n```\n by DannySmurf\n\n```csharp\nDebuggerDisplayAttribute\n```\n by Stu\n\n```csharp\nDebuggerBrowsable\n```\n and \n```csharp\nDebuggerStepThrough\n```\n by bdukes\n\n```csharp\nThreadStaticAttribute\n```\n by marxidad\n\n```csharp\nFlagsAttribute\n```\n by Martin Clarke\n\n```csharp\nConditionalAttribute\n```\n by AndrewBurns\n\nSyntax\n\n\n```csharp\n??\n```\n (coalesce nulls) operator by kokos\nNumber flaggings by Nick Berardi\n\n```csharp\nwhere T:new\n```\n by Lars Mæhlum\nImplicit generics by Keith\nOne-parameter lambdas by Keith\nAuto properties by Keith\nNamespace aliases by Keith\nVerbatim string literals with @ by Patrick\n\n```csharp\nenum\n```\n values by lfoust\n@variablenames by marxidad\n\n```csharp\nevent\n```\n operators by marxidad\nFormat string brackets by Portman\nProperty accessor accessibility modifiers by xanadont\nConditional (ternary) operator (\n```csharp\n?:\n```\n) by JasonS\n\n```csharp\nchecked\n```\n and \n```csharp\nunchecked\n```\n operators by Binoj Antony\n\n```csharp\nimplicit and explicit\n```\n operators by Flory\n\nLanguage Features\n\nNullable types by Brad Barker\nAnonymous types by Keith\n\n```csharp\n__makeref __reftype __refvalue\n```\n by Judah Himango\nObject initializers by lomaxx\nFormat strings by David in Dakota\nExtension Methods by marxidad\n\n```csharp\npartial\n```\n methods by Jon Erickson\nPreprocessor directives by John Asbeck\n\n```csharp\nDEBUG\n```\n pre-processor directive by Robert Durgin\nOperator overloading by SefBkn\nType inferrence by chakrit\nBoolean operators taken to next level by Rob Gough\nPass value-type variable as interface without boxing by Roman Boiko\nProgrammatically determine declared variable type by Roman Boiko\nStatic Constructors by Chris\nEasier-on-the-eyes / condensed ORM-mapping using LINQ by roosteronacid\n\n```csharp\n__arglist\n```\n by Zac Bowling\n\nVisual Studio Features\n\nSelect block of text in editor by Himadri\nSnippets by DannySmurf \n\nFramework\n\n\n```csharp\nTransactionScope\n```\n by KiwiBastard\n\n```csharp\nDependantTransaction\n```\n by KiwiBastard\n\n```csharp\nNullable<T>\n```\n by IainMH\n\n```csharp\nMutex\n```\n by Diago\n\n```csharp\nSystem.IO.Path\n```\n by ageektrapped\n\n```csharp\nWeakReference\n```\n by Juan Manuel\n\nMethods and Properties\n\n\n```csharp\nString.IsNullOrEmpty()\n```\n method by KiwiBastard\n\n```csharp\nList.ForEach()\n```\n method by KiwiBastard\n\n```csharp\nBeginInvoke()\n```\n, \n```csharp\nEndInvoke()\n```\n methods by Will Dean\n\n```csharp\nNullable<T>.HasValue\n```\n and \n```csharp\nNullable<T>.Value\n```\n properties by Rismo\n\n```csharp\nGetValueOrDefault\n```\n method by John Sheehan\n\nTips & Tricks\n\nNice method for event handlers by Andreas H.R. Nilsson\nUppercase comparisons by John\nAccess anonymous types without reflection by dp\nA quick way to lazily instantiate collection properties by Will\nJavaScript-like anonymous inline-functions by roosteronacid\n\nOther\n\nnetmodules by kokos \nLINQBridge by Duncan Smart \nParallel Extensions by Joel Coehoorn",
    "output": "This isn't C# per se, but I haven't seen anyone who really uses \n```csharp\nSystem.IO.Path.Combine()\n```\n to the extent that they should. In fact, the whole Path class is really useful, but no one uses it!\nI'm willing to bet that every production app has the following code, even though it shouldn't:\n\n```csharp\nstring path = dir + \"\\\\\" + fileName;\n\n```",
    "score": 751,
    "tags": [
      "c#",
      "hidden-features"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:31.263965"
  },
  {
    "instruction": "JavaScriptSerializer - JSON serialization of enum as string",
    "context": "I have a class that contains an \n```csharp\nenum\n```\n property, and upon serializing the object using \n```csharp\nJavaScriptSerializer\n```\n, my json result contains the integer value of the enumeration rather than its \n```csharp\nstring\n```\n \"name\".  Is there a way to get the enum as a \n```csharp\nstring\n```\n in my json without having to create a custom \n```csharp\nJavaScriptConverter\n```\n?  Perhaps there's an attribute that I could decorate the \n```csharp\nenum\n```\n definition, or object property, with?\nAs an example:\n\n```csharp\nenum Gender { Male, Female }\n\nclass Person\n{\n    int Age { get; set; }\n    Gender Gender { get; set; }\n}\n\n```\n\nDesired JSON result:\n\n```csharp\n{ \"Age\": 35, \"Gender\": \"Male\" }\n\n```\n\nIdeally looking for answer with built-in .NET framework classes, if not possible alternatives (like Json.net) are welcome.",
    "output": "I have found that Json.NET provides the exact functionality I'm looking for with a \n```csharp\nJsonConverter\n```\n attribute, passing in the built-in \n```csharp\nStringEnumConverter\n```\n type:\n\n```csharp\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\n\n[JsonConverter(typeof(StringEnumConverter))]\npublic Gender Gender { get; set; }\n\n```\n\nMore details at available on \n```csharp\nStringEnumConverter\n```\n documentation.\nThere are other places to configure this converter more globally:\n\nenum itself if you want enum always be serialized/deserialized as string:\n\n```csharp\n  [JsonConverter(typeof(StringEnumConverter))]  \n  enum Gender { Male, Female }\n\n```\n\n\nIn case anyone wants to avoid attribute decoration, you can add the converter to your JsonSerializer (suggested by Bjørn Egil):\n\n```csharp\n  serializer.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter()); \n\n```\n\n\n\nand it will work for every enum it sees during that serialization (suggested by Travis).\n\nor JsonConverter (suggested by banana):\n\n```csharp\n  JsonConvert.SerializeObject(MyObject, \n      new Newtonsoft.Json.Converters.StringEnumConverter());\n\n```\n\n\n\nAdditionally you can control casing and whether numbers are still accepted by using StringEnumConverter(NamingStrategy, Boolean) constructor.",
    "score": 2466,
    "tags": [
      "c#",
      "asp.net",
      "json",
      "enums",
      "javascriptserializer"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:31.582592"
  },
  {
    "instruction": "Create Generic method constraining T to an Enum",
    "context": "I'm building a function to extend the \n```csharp\nEnum.Parse\n```\n concept that\n\nAllows a default value to be parsed in case that an Enum value is not found\nIs case insensitive\n\nSo I wrote the following:\n\n```csharp\npublic static T GetEnumFromString<T>(string value, T defaultValue) where T : Enum\n{\n    if (string.IsNullOrEmpty(value)) return defaultValue;\n    foreach (T item in Enum.GetValues(typeof(T)))\n    {\n        if (item.ToString().ToLower().Equals(value.Trim().ToLower())) return item;\n    }\n    return defaultValue;\n}\n\n```\n\nI am getting a Error Constraint cannot be special class \n```csharp\nSystem.Enum\n```\n.\nFair enough, but is there a workaround to allow a Generic Enum, or am I going to have to mimic the \n```csharp\nParse\n```\n function and pass a type as an attribute, which forces the ugly boxing requirement to your code.\nEdit 1\nI have settled on (I've left the loop to maintain case insensitivity - I am using this when parsing XML)\n\n```csharp\npublic static class EnumUtils\n{\n    public static T ParseEnum<T>(string value, T defaultValue) where T : struct, IConvertible\n    {\n        if (!typeof(T).IsEnum) throw new ArgumentException(\"T must be an enumerated type\");\n        if (string.IsNullOrEmpty(value)) return defaultValue;\n\n        foreach (T item in Enum.GetValues(typeof(T)))\n        {\n            if (item.ToString().ToLower().Equals(value.Trim().ToLower())) return item;\n        }\n        return defaultValue;\n    }\n}\n\n```\n\nEdit 2: (16th Feb 2015) Christopher Currens has posted a compiler enforced type-safe generic solution in MSIL or F# below, which is well worth a look, and an upvote. I will remove this edit if the solution bubbles further up the page.\nEdit 3: (13th Apr 2021) As this has now been addressed, and supported, since C# 7.3, I have changed the accepted answer, though full perusal of the top answers is worth it for academic, and historical, interest :)",
    "output": "Since \n```csharp\nEnum\n```\n Type implements \n```csharp\nIConvertible\n```\n interface, a better implementation should be something like this:\n\n```csharp\npublic T GetEnumFromString<T>(string value) where T : struct, IConvertible\n{\n   if (!typeof(T).IsEnum) \n   {\n      throw new ArgumentException(\"T must be an enumerated type\");\n   }\n\n   //...\n}\n\n```\n\nThis will still permit passing of value types implementing \n```csharp\nIConvertible\n```\n. The chances are rare though.",
    "score": 1110,
    "tags": [
      "c#",
      "generics",
      "enums",
      "generic-constraints"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:31.890627"
  },
  {
    "instruction": "Multiline string literal in C#",
    "context": "Is there an easy way to create a multiline string literal in C#?\nHere's what I have now:\n\n```csharp\nstring query = \"SELECT foo, bar\"\n+ \" FROM table\"\n+ \" WHERE id = 42\";\n\n```\n\nI know PHP has\n\n```csharp\n<<<BLOCK\n\nBLOCK;\n\n```\n\nDoes C# have something similar?",
    "output": "You can use the \n```csharp\n@\n```\n symbol in front of a \n```csharp\nstring\n```\n to form a verbatim string literal:\n\n```csharp\nstring query = @\"SELECT foo, bar\nFROM table\nWHERE id = 42\";\n\n```\n\nYou also do not have to escape special characters when you use this method, except for double quotes as shown in Jon Skeet's answer.",
    "score": 2158,
    "tags": [
      "c#",
      "string",
      "shorthand"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:32.180315"
  },
  {
    "instruction": "How to call asynchronous method from synchronous method in C#?",
    "context": "I have a \n```csharp\npublic async Task Foo()\n```\n method that I want to call from a synchronous method. So far all I have seen from MSDN documentation is calling \n```csharp\nasync\n```\n methods via \n```csharp\nasync\n```\n methods, but my whole program is not built with \n```csharp\nasync\n```\n methods.\nIs this even possible?\nHere's one example of calling these methods from an asynchronous method:\nWalkthrough: Accessing the Web by Using Async and Await (C# and Visual Basic)\nNow I'm looking into calling these \n```csharp\nasync\n```\n methods from synchronous methods.",
    "output": "Asynchronous programming does \"grow\" through the code base. It has been compared to a zombie virus. The best solution is to allow it to grow, but sometimes that's not possible.\nI have written a few types in my Nito.AsyncEx library for dealing with a partially-asynchronous code base. There's no solution that works in every situation, though.\nSolution A\nIf you have a simple asynchronous method that doesn't need to synchronize back to its context, then you can use \n```csharp\nTask.WaitAndUnwrapException\n```\n:\n\n```csharp\nvar task = MyAsyncMethod();\nvar result = task.WaitAndUnwrapException();\n\n```\n\nYou do not want to use \n```csharp\nTask.Wait\n```\n or \n```csharp\nTask.Result\n```\n because they wrap exceptions in \n```csharp\nAggregateException\n```\n.\nThis solution is only appropriate if \n```csharp\nMyAsyncMethod\n```\n does not synchronize back to its context. In other words, every \n```csharp\nawait\n```\n in \n```csharp\nMyAsyncMethod\n```\n should end with \n```csharp\nConfigureAwait(false)\n```\n. This means it can't update any UI elements or access the ASP.NET request context.\nSolution B\nIf \n```csharp\nMyAsyncMethod\n```\n does need to synchronize back to its context, then you may be able to use \n```csharp\nAsyncContext.RunTask\n```\n to provide a nested context:\n\n```csharp\nvar result = AsyncContext.RunTask(MyAsyncMethod).Result;\n\n```\n\n\n*Update 4/14/2014: In more recent versions of the library the API is as follows:\n\n```csharp\nvar result = AsyncContext.Run(MyAsyncMethod);\n\n```\n\n\n(It's OK to use \n```csharp\nTask.Result\n```\n in this example because \n```csharp\nRunTask\n```\n will propagate \n```csharp\nTask\n```\n exceptions).\nThe reason you may need \n```csharp\nAsyncContext.RunTask\n```\n instead of \n```csharp\nTask.WaitAndUnwrapException\n```\n is because of a rather subtle deadlock possibility that happens on WinForms/WPF/SL/ASP.NET:\n\nA synchronous method calls an async method, obtaining a \n```csharp\nTask\n```\n.\nThe synchronous method does a blocking wait on the \n```csharp\nTask\n```\n.\nThe \n```csharp\nasync\n```\n method uses \n```csharp\nawait\n```\n without \n```csharp\nConfigureAwait\n```\n.\nThe \n```csharp\nTask\n```\n cannot complete in this situation because it only completes when the \n```csharp\nasync\n```\n method is finished; the \n```csharp\nasync\n```\n method cannot complete because it is attempting to schedule its continuation to the \n```csharp\nSynchronizationContext\n```\n, and WinForms/WPF/SL/ASP.NET will not allow the continuation to run because the synchronous method is already running in that context.\n\nThis is one reason why it's a good idea to use \n```csharp\nConfigureAwait(false)\n```\n within every \n```csharp\nasync\n```\n method as much as possible.\nSolution C\n\n```csharp\nAsyncContext.RunTask\n```\n won't work in every scenario. For example, if the \n```csharp\nasync\n```\n method awaits something that requires a UI event to complete, then you'll deadlock even with the nested context. In that case, you could start the \n```csharp\nasync\n```\n method on the thread pool:\n\n```csharp\nvar task = Task.Run(async () => await MyAsyncMethod());\nvar result = task.WaitAndUnwrapException();\n\n```\n\nHowever, this solution requires a \n```csharp\nMyAsyncMethod\n```\n that will work in the thread pool context. So it can't update UI elements or access the ASP.NET request context. And in that case, you may as well add \n```csharp\nConfigureAwait(false)\n```\n to its \n```csharp\nawait\n```\n statements, and use solution A.\nUpdate: 2015 MSDN article 'Async Programming - Brownfield Async Development' by Stephen Cleary.",
    "score": 1115,
    "tags": [
      "c#",
      "asynchronous",
      "async-await",
      "synchronous"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:32.995008"
  },
  {
    "instruction": "How and when to use ‘async’ and ‘await’",
    "context": "From my understanding one of the main things that \n```csharp\nasync\n```\n and \n```csharp\nawait\n```\n do is to make code easy to write and read - but is using them equal to spawning background threads to perform long duration logic?\nI'm currently trying out the most basic example. I've added some comments inline. Can you clarify it for me?\n\n```csharp\n// I don't understand why this method must be marked as `async`.\nprivate async void button1_Click(object sender, EventArgs e)\n{\n    Task<int> access = DoSomethingAsync();\n    // task independent stuff here\n\n    // this line is reached after the 5 seconds sleep from \n    // DoSomethingAsync() method. Shouldn't it be reached immediately? \n    int a = 1; \n\n    // from my understanding the waiting should be done here.\n    int x = await access; \n}\n\nasync Task<int> DoSomethingAsync()\n{\n    // is this executed on a background thread?\n    System.Threading.Thread.Sleep(5000);\n    return 1;\n}\n\n```",
    "output": "When using \n```csharp\nasync\n```\n and \n```csharp\nawait\n```\n the compiler generates a state machine in the background.\nHere's an example on which I hope I can explain some of the high-level details that are going on:\n\n```csharp\npublic async Task MyMethodAsync()\n{\n    Task<int> longRunningTask = LongRunningOperationAsync();\n    // independent work which doesn't need the result of LongRunningOperationAsync can be done here\n\n    //and now we call await on the task \n    int result = await longRunningTask;\n    //use the result \n    Console.WriteLine(result);\n}\n\npublic async Task<int> LongRunningOperationAsync() // assume we return an int from this long running operation \n{\n    await Task.Delay(1000); // 1 second delay\n    return 1;\n}\n\n```\n\nOK, so what happens here:\n\n\n```csharp\nTask<int> longRunningTask = LongRunningOperationAsync();\n```\n starts executing \n```csharp\nLongRunningOperation\n```\n\n\nIndependent work is done on let's assume the Main Thread (Thread ID = 1) then \n```csharp\nawait longRunningTask\n```\n is reached.\nNow, if the \n```csharp\nlongRunningTask\n```\n hasn't finished and it is still running, \n```csharp\nMyMethodAsync()\n```\n will return to its calling method, thus the main thread doesn't get blocked. When the \n```csharp\nlongRunningTask\n```\n is done then a thread from the ThreadPool (can be any thread) will return to \n```csharp\nMyMethodAsync()\n```\n in its previous context and continue execution (in this case printing the result to the console).\n\n\nA second case would be that the \n```csharp\nlongRunningTask\n```\n has already finished its execution and the result is available. When reaching the \n```csharp\nawait longRunningTask\n```\n we already have the result so the code will continue executing on the very same thread. (in this case printing result to console). Of course this is not the case for the above example, where there's a \n```csharp\nTask.Delay(1000)\n```\n involved.",
    "score": 964,
    "tags": [
      "c#",
      ".net",
      "asynchronous",
      "async-await"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:33.312140"
  },
  {
    "instruction": "How do I encode and decode a base64 string?",
    "context": "How do I return a base64 encoded string given a string?\nHow do I decode a base64 encoded string into a string?",
    "output": "Encode\n\n```csharp\npublic static string Base64Encode(string plainText) \n{\n    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n    return System.Convert.ToBase64String(plainTextBytes);\n}\n\n```\n\nDecode\n\n```csharp\npublic static string Base64Decode(string base64EncodedData) \n{\n    var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);\n    return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);\n}\n\n```",
    "score": 2491,
    "tags": [
      "c#",
      "base64"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:33.737337"
  },
  {
    "instruction": "Difference Between Select and SelectMany",
    "context": "I've been searching the difference between \n```csharp\nSelect\n```\n and \n```csharp\nSelectMany\n```\n but I haven't been able to find a suitable answer. I need to learn the difference when using LINQ To SQL but all I've found are standard array examples. \nCan someone provide a LINQ To SQL example?",
    "output": "```csharp\nSelectMany\n```\n flattens queries that return lists of lists. For example\n\n```csharp\npublic class PhoneNumber\n{\n    public string Number { get; set; }\n}\n\npublic class Person\n{\n    public IEnumerable<PhoneNumber> PhoneNumbers { get; set; }\n    public string Name { get; set; }\n}\n\nIEnumerable<Person> people = new List<Person>();\n\n// Select gets a list of lists of phone numbers\nIEnumerable<IEnumerable<PhoneNumber>> phoneLists = people.Select(p => p.PhoneNumbers);\n\n// SelectMany flattens it to just a list of phone numbers.\nIEnumerable<PhoneNumber> phoneNumbers = people.SelectMany(p => p.PhoneNumbers);\n\n// And to include data from the parent in the result: \n// pass an expression to the second parameter (resultSelector) in the overload:\nvar directory = people\n   .SelectMany(p => p.PhoneNumbers,\n               (parent, child) => new { parent.Name, child.Number });\n\n```\n\nLive Demo on .NET Fiddle",
    "score": 1985,
    "tags": [
      "c#",
      "linq-to-sql",
      "linq"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:34.047372"
  },
  {
    "instruction": "Convert a string to an enum in C#",
    "context": "What's the best way to convert a string to an enumeration value in C#?\nI have an HTML select tag containing the values of an enumeration. When the page is posted, I want to pick up the value (which will be in the form of a string) and convert it to the corresponding enumeration value.\nIn an ideal world, I could do something like this:\n\n```csharp\nStatusEnum MyStatus = StatusEnum.Parse(\"Active\");\n\n```\n\nbut that isn't valid code.",
    "output": "In .NET Core and .NET Framework ≥4.0 there is a generic parse method:\n\n```csharp\nEnum.TryParse(\"Active\", out StatusEnum myStatus);\n\n```\n\nThis also includes C#7's new inline \n```csharp\nout\n```\n variables, so this does the try-parse, conversion to the explicit enum type and initialises+populates the \n```csharp\nmyStatus\n```\n variable.\nIf you have access to C#7 and the latest .NET this is the best way.\nOriginal Answer\nIn .NET it's rather ugly (until 4 or above):\n\n```csharp\nStatusEnum MyStatus = (StatusEnum) Enum.Parse(typeof(StatusEnum), \"Active\", true);\n\n```\n\nI tend to simplify this with:\n\n```csharp\npublic static T ParseEnum<T>(string value)\n{\n    return (T) Enum.Parse(typeof(T), value, true);\n}\n\n```\n\nThen I can do:\n\n```csharp\nStatusEnum MyStatus = EnumUtil.ParseEnum<StatusEnum>(\"Active\");\n\n```\n\nOne option suggested in the comments is to add an extension, which is simple enough:\n\n```csharp\npublic static T ToEnum<T>(this string value)\n{\n    return (T) Enum.Parse(typeof(T), value, true);\n}\n\nStatusEnum MyStatus = \"Active\".ToEnum<StatusEnum>();\n\n```\n\nFinally, you may want to have a default enum to use if the string cannot be parsed:\n\n```csharp\npublic static T ToEnum<T>(this string value, T defaultValue) \n{\n    if (string.IsNullOrEmpty(value))\n    {\n        return defaultValue;\n    }\n\n    T result;\n    return Enum.TryParse<T>(value, true, out result) ? result : defaultValue;\n}\n\n```\n\nWhich makes this the call:\n\n```csharp\nStatusEnum MyStatus = \"Active\".ToEnum(StatusEnum.None);\n\n```\n\nHowever, I would be careful adding an extension method like this to \n```csharp\nstring\n```\n as (without namespace control) it will appear on all instances of \n```csharp\nstring\n```\n whether they hold an enum or not (so \n```csharp\n1234.ToString().ToEnum(StatusEnum.None)\n```\n would be valid but nonsensical) . It's often be best to avoid cluttering Microsoft's core classes with extra methods that only apply in very specific contexts unless your entire development team has a very good understanding of what those extensions do.",
    "score": 2211,
    "tags": [
      "c#",
      "string",
      "enums"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:34.380995"
  },
  {
    "instruction": "Call one constructor from another",
    "context": "I have two constructors which feed values to readonly fields.\n\n```csharp\npublic class Sample\n{\n    public Sample(string theIntAsString)\n    {\n        int i = int.Parse(theIntAsString);\n        _intField = i;\n    }\n\n    public Sample(int theInt) => _intField = theInt;\n    public int IntProperty    => _intField;\n\n    private readonly int _intField;\n}\n\n```\n\nOne constructor receives the values directly, and the other does some calculation and obtains the values, then sets the fields.\nNow here's the catch:\n\nI don't want to duplicate the\nsetting code. In this case, just one\nfield is set but of course there may\nwell be more than one.\nTo make the fields readonly, I need\nto set them from the constructor, so\nI can't \"extract\" the shared code to\na utility function.\nI don't know how to call one\nconstructor from another.\n\nAny ideas?",
    "output": "Like this:\n\n```csharp\npublic Sample(string str) : this(int.Parse(str)) { }\n\n```",
    "score": 2140,
    "tags": [
      "c#",
      "constructor"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:34.711531"
  },
  {
    "instruction": "\\d less efficient than [0-9]",
    "context": "I made a comment yesterday on an answer where someone had used \n```csharp\n[0123456789]\n```\n in a regex rather than \n```csharp\n[0-9]\n```\n or \n```csharp\n\\d\n```\n. I said it was probably more efficient to use a range or digit specifier than a character set.\nI decided to test that out today and found out to my surprise that (in the c# regex engine at least) \n```csharp\n\\d\n```\n appears to be less efficient than either of the other two which don't seem to differ much. Here is my test output over 10000 random strings of 1000 random characters with 5077 actually containing a digit:\n\n```csharp\nRegex \\d           took 00:00:00.2141226 result: 5077/10000\nRegex [0-9]        took 00:00:00.1357972 result: 5077/10000  63.42 % of first\nRegex [0123456789] took 00:00:00.1388997 result: 5077/10000  64.87 % of first\n\n```\n\nIt's a surprise to me for two reasons, that I would be interested if anyone can shed some light on:\n\nI would have thought the range would be implemented much more efficiently than the set.\nI can't understand why \n```csharp\n\\d\n```\n is worse than \n```csharp\n[0-9]\n```\n. Is there more to \n```csharp\n\\d\n```\n than simply shorthand for \n```csharp\n[0-9]\n```\n?\n\nHere is the test code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace SO_RegexPerformance\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var rand = new Random(1234);\n            var strings = new List<string>();\n            //10K random strings\n            for (var i = 0; i < 10000; i++)\n            {\n                //generate random string\n                var sb = new StringBuilder();\n                for (var c = 0; c < 1000; c++)\n                {\n                    //add a-z randomly\n                    sb.Append((char)('a' + rand.Next(26)));\n                }\n                //in roughly 50% of them, put a digit\n                if (rand.Next(2) == 0)\n                {\n                    //replace 1 char with a digit 0-9\n                    sb[rand.Next(sb.Length)] = (char)('0' + rand.Next(10));\n                }\n                strings.Add(sb.ToString());\n            }\n\n            var baseTime = testPerfomance(strings, @\"\\d\");\n            Console.WriteLine();\n            var testTime = testPerfomance(strings, \"[0-9]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n            testTime = testPerfomance(strings, \"[0123456789]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n        }\n\n        private static TimeSpan testPerfomance(List<string> strings, string regex)\n        {\n            var sw = new Stopwatch();\n\n            int successes = 0;\n\n            var rex = new Regex(regex);\n\n            sw.Start();\n            foreach (var str in strings)\n            {\n                if (rex.Match(str).Success)\n                {\n                    successes++;\n                }\n            }\n            sw.Stop();\n\n            Console.Write(\"Regex {0,-12} took {1} result: {2}/{3}\", regex, sw.Elapsed, successes, strings.Count);\n\n            return sw.Elapsed;\n        }\n    }\n}\n\n```",
    "output": "```csharp\n\\d\n```\n checks all Unicode digits, while \n```csharp\n[0-9]\n```\n is limited to these 10 characters. For example, Persian digits, \n```csharp\n۱۲۳۴۵۶۷۸۹\n```\n, are an example of Unicode digits which are matched with \n```csharp\n\\d\n```\n, but not \n```csharp\n[0-9]\n```\n.\nYou can generate a list of all such characters using the following code:\n\n```csharp\nvar sb = new StringBuilder();\nfor(UInt16 i = 0; i < UInt16.MaxValue; i++)\n{\n    string str = Convert.ToChar(i).ToString();\n    if (Regex.IsMatch(str, @\"\\d\"))\n        sb.Append(str);\n}\nConsole.WriteLine(sb.ToString());\n\n```\n\nWhich generates:\n\n0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９",
    "score": 1675,
    "tags": [
      "c#",
      "regex",
      "performance"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:35.029458"
  },
  {
    "instruction": "Could not find a part of the path ... bin\\roslyn\\csc.exe",
    "context": "I am trying to run an ASP.NET MVC (model-view-controller) project retrieved from TFS (Team Foundation Server) source control. I have added all assembly references and I am able to build and compile successfully without any error or warning.\nBut I get the following error in the browser:\n\nCould not find a part of the path\n'C:\\B8akWorkspace\\B8akProject\\B8akSolution\\B8AK.Portal\\bin\\roslyn\\csc.exe'.\n\nHere is a full screenshot of the error page.\n\nAfter few days of research, I understood that Roslyn is a .NET compiler platform that offers advanced compiling features. However, I do not understand why my build is trying to find \\bin\\roslyn\\csc.exe because I did not configure anything related to Roslyn. Nor did I intend to use Roslyn in my project.",
    "output": "TL; DR\nrun this in the Package Manager Console:\n\n```csharp\nUpdate-Package Microsoft.CodeDom.Providers.DotNetCompilerPlatform -r\n```\n\nMore information\nThis problem is not related to Visual Studio itself, so answers suggesting adding build steps to copy files over are rather a workaround. Same with adding compiler binaries manually to the project.\nThe Roslyn compiler comes from a NuGet package and there is/was a bug in some versions of that package (I don't know exactly which ones). The solution is to reinstall/upgrade that package to a bug-free version. Originally before I wrote the answer back in 2015 I fixed it by installing following packages at specific versions:\n\nMicrosoft.Net.Compilers 1.1.1\nMicrosoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.1\n\nThen I looked into .csproj and made sure that the paths to packages are correct (in my case ..\\..\\packages\\*.*) inside tags \n```csharp\n<ImportProject>\n```\n on top and in \n```csharp\n<Target>\n```\n with name \"EnsureNuGetPackageBuildImports\" on the bottom. This is on MVC 5 and .NET Framework 4.5.2.",
    "score": 2013,
    "tags": [
      "c#",
      "asp.net",
      ".net",
      "visual-studio",
      "roslyn"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:35.365854"
  },
  {
    "instruction": "How do you get the index of the current iteration of a foreach loop?",
    "context": "Is there some rare language construct I haven't encountered (like the few I've learned recently, some on Stack Overflow) in C# to get a value representing the current iteration of a foreach loop?\nFor instance, I currently do something like this depending on the circumstances:\n\n```csharp\nint i = 0;\nforeach (Object o in collection)\n{\n    // ...\n    i++;\n}\n\n```",
    "output": "Ian Mercer posted a similar solution as this on Phil Haack's blog:\n\n```csharp\nforeach (var item in Model.Select((value, i) => new { i, value }))\n{\n    var value = item.value;\n    var index = item.i;\n}\n\n```\n\nThis gets you the item (\n```csharp\nitem.value\n```\n) and its index (\n```csharp\nitem.i\n```\n) by using this overload of LINQ's \n```csharp\nSelect\n```\n:\n\nthe second parameter of the function [inside Select] represents the index of the source element.\n\nThe \n```csharp\nnew { i, value }\n```\n is creating a new anonymous object.\nHeap allocations can be avoided by using \n```csharp\nValueTuple\n```\n if you're using C# 7.0 or later:\n\n```csharp\nforeach (var item in Model.Select((value, i) => ( value, i )))\n{\n    var value = item.value;\n    var index = item.i;\n}\n\n```\n\nYou can also eliminate the \n```csharp\nitem.\n```\n by using automatic destructuring:\n\n```csharp\nforeach (var (value, i) in Model.Select((value, i) => ( value, i )))\n{\n    // Access `value` and `i` directly here.\n}\n\n```",
    "score": 1018,
    "tags": [
      "c#",
      "foreach"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:35.676964"
  },
  {
    "instruction": "How to mark a method as obsolete or deprecated?",
    "context": "How do I mark a method as obsolete or deprecated using C#?",
    "output": "The shortest way is by adding the \n```csharp\nObsoleteAttribute\n```\n as an attribute to the method. Make sure to include an appropriate explanation:\n\n```csharp\n[Obsolete(\"Method1 is deprecated, please use Method2 instead.\")]\npublic void Method1()\n{ … }\n\n```\n\nYou can also cause the compilation to fail, treating the usage of the method as an error instead of warning, if the method is called from somewhere in code like this:\n\n```csharp\n[Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)]\n\n```",
    "score": 2064,
    "tags": [
      "c#",
      ".net",
      "versioning",
      "deprecated"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:35.954614"
  },
  {
    "instruction": "How can I generate random alphanumeric strings?",
    "context": "How can I generate a random 8 character alphanumeric string in C#?",
    "output": "I heard LINQ is the new black, so here's my attempt using LINQ:\n\n```csharp\nprivate static Random random = new Random();\n\npublic static string RandomString(int length)\n{\n    const string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    return new string(Enumerable.Repeat(chars, length)\n        .Select(s => s[random.Next(s.Length)]).ToArray());\n}\n\n```\n\n(Note: The use of the \n```csharp\nRandom\n```\n class makes this unsuitable for anything security related, such as creating passwords or tokens. Use the \n```csharp\nRNGCryptoServiceProvider\n```\n class if you need a strong random number generator.)",
    "score": 2211,
    "tags": [
      "c#",
      ".net",
      "random"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:36.269861"
  },
  {
    "instruction": "How do I call a generic method using a Type variable?",
    "context": "What's the best way to call a generic method when the type parameter isn't known at compile time, but instead is obtained dynamically at runtime?\nConsider the following sample code - inside the \n```csharp\nExample()\n```\n method, what's the most concise way to invoke \n```csharp\nGenericMethod<T>()\n```\n using the \n```csharp\nType\n```\n stored in the \n```csharp\nmyType\n```\n variable?\n\n```csharp\npublic class Sample\n{\n    public void Example(string typeName)\n    {\n        Type myType = FindType(typeName);\n\n        // What goes here to call GenericMethod<T>()?\n        GenericMethod<myType>(); // This doesn't work\n\n        // What changes to call StaticMethod<T>()?\n        Sample.StaticMethod<myType>(); // This also doesn't work\n    }\n\n    public void GenericMethod<T>()\n    {\n        // ...\n    }\n\n    public static void StaticMethod<T>()\n    {\n        //...\n    }\n}\n\n```",
    "output": "You need to use reflection to get the method to start with, then \"construct\" it by supplying type arguments with MakeGenericMethod:\n\n```csharp\nMethodInfo method = typeof(Sample).GetMethod(nameof(Sample.GenericMethod));\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n```\n\nFor a static method, pass \n```csharp\nnull\n```\n as the first argument to \n```csharp\nInvoke\n```\n. That's nothing to do with generic methods - it's just normal reflection.\nAs noted, a lot of this is simpler as of C# 4 using \n```csharp\ndynamic\n```\n - if you can use type inference, of course. It doesn't help in cases where type inference isn't available, such as the exact example in the question.",
    "score": 1374,
    "tags": [
      "c#",
      ".net",
      "generics",
      "reflection"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:36.564483"
  },
  {
    "instruction": "Group by in LINQ",
    "context": "Let's suppose if we have a class like:\n\n```csharp\nclass Person { \n    internal int PersonID; \n    internal string car; \n}\n\n```\n\nI have a list of this class: \n```csharp\nList<Person> persons;\n```\n\nAnd this list can have multiple instances with same \n```csharp\nPersonID\n```\ns, for example: \n\n```csharp\npersons[0] = new Person { PersonID = 1, car = \"Ferrari\" }; \npersons[1] = new Person { PersonID = 1, car = \"BMW\"     }; \npersons[2] = new Person { PersonID = 2, car = \"Audi\"    }; \n\n```\n\nIs there a way I can group by \n```csharp\nPersonID\n```\n and get the list of all the cars he has? \nFor example, the expected result would be \n\n```csharp\nclass Result { \n   int PersonID;\n   List<string> cars; \n}\n\n```\n\nSo after grouping, I would get: \n\n```csharp\nresults[0].PersonID = 1; \nList<string> cars = results[0].cars; \n\nresult[1].PersonID = 2; \nList<string> cars = result[1].cars;\n\n```\n\nFrom what I have done so far: \n\n```csharp\nvar results = from p in persons\n              group p by p.PersonID into g\n              select new { PersonID = g.Key, // this is where I am not sure what to do\n\n```\n\nCould someone please point me in the right direction?",
    "output": "Absolutely - you basically want:\n\n```csharp\nvar results = from p in persons\n              group p.car by p.PersonId into g\n              select new { PersonId = g.Key, Cars = g.ToList() };\n\n```\n\nOr as a non-query expression:\n\n```csharp\nvar results = persons.GroupBy(\n    p => p.PersonId, \n    p => p.car,\n    (key, g) => new { PersonId = key, Cars = g.ToList() });\n\n```\n\nBasically the contents of the group (when viewed as an \n```csharp\nIEnumerable<T>\n```\n) is a sequence of whatever values were in the projection (\n```csharp\np.car\n```\n in this case) present for the given key.\nFor more on how \n```csharp\nGroupBy\n```\n works, see my Edulinq post on the topic.\n(I've renamed \n```csharp\nPersonID\n```\n to \n```csharp\nPersonId\n```\n in the above, to follow .NET naming conventions, which specifically call this out in the \"Capitalizing Compound Words and Common Terms\" section.)\nAlternatively, you could use a \n```csharp\nLookup\n```\n:\n\n```csharp\nvar carsByPersonId = persons.ToLookup(p => p.PersonId, p => p.car);\n\n```\n\nYou can then get the cars for each person very easily:\n\n```csharp\n// This will be an empty sequence for any personId not in the lookup\nvar carsForPerson = carsByPersonId[personId];\n\n```",
    "score": 2104,
    "tags": [
      "c#",
      "linq",
      "group-by"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:36.877174"
  },
  {
    "instruction": "How do I turn a C# object into a JSON string in .NET?",
    "context": "I have classes like these:\n\n```csharp\nclass MyDate\n{\n    int year, month, day;\n}\n\nclass Lad\n{\n    string firstName;\n    string lastName;\n    MyDate dateOfBirth;\n}\n\n```\n\nAnd I would like to turn a \n```csharp\nLad\n```\n object into a JSON string like this:\n\n```csharp\n{\n    \"firstName\":\"Markoff\",\n    \"lastName\":\"Chaney\",\n    \"dateOfBirth\":\n    {\n        \"year\":\"1901\",\n        \"month\":\"4\",\n        \"day\":\"30\"\n    }\n}\n\n```\n\n(Without the formatting). I found this link, but it uses a namespace that's not in .NET 4. I also heard about JSON.NET, but their site seems to be down at the moment, and I'm not keen on using external DLL files.\nAre there other options besides manually creating a JSON string writer?",
    "output": "Since we all love one-liners\n... this one depends on the Newtonsoft NuGet package, which is popular and better than the default serializer.\n\n```csharp\nNewtonsoft.Json.JsonConvert.SerializeObject(new {foo = \"bar\"})\n\n```\n\nDocumentation: Serializing and Deserializing JSON",
    "score": 1493,
    "tags": [
      "c#",
      ".net",
      "json",
      "serialization"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:37.166754"
  },
  {
    "instruction": "Returning IEnumerable<T> vs. IQueryable<T>",
    "context": "What is the difference between returning \n```csharp\nIQueryable<T>\n```\n vs. \n```csharp\nIEnumerable<T>\n```\n, when should one be preferred over the other?\n\n```csharp\nIQueryable<Customer> custs = from c in db.Customers\nwhere c.City == \"<City>\"\nselect c;\n\nIEnumerable<Customer> custs = from c in db.Customers\nwhere c.City == \"<City>\"\nselect c;\n\n```\n\nWill both be deferred execution and when should one be preferred over the other?",
    "output": "Yes, both will give you deferred execution.\nThe difference is that \n```csharp\nIQueryable<T>\n```\n is the interface that allows LINQ-to-SQL (LINQ.-to-anything really) to work. So if you further refine your query on an \n```csharp\nIQueryable<T>\n```\n, that query will be executed in the database, if possible. \nFor the \n```csharp\nIEnumerable<T>\n```\n case, it will be LINQ-to-object, meaning that all objects matching the original query will have to be loaded into memory from the database.\nIn code:\n\n```csharp\nIQueryable<Customer> custs = ...;\n// Later on...\nvar goldCustomers = custs.Where(c => c.IsGold);\n\n```\n\nThat code will execute SQL to only select gold customers. The following code, on the other hand, will execute the original query in the database, then filtering out the non-gold customers in the memory:\n\n```csharp\nIEnumerable<Customer> custs = ...;\n// Later on...\nvar goldCustomers = custs.Where(c => c.IsGold);\n\n```\n\nThis is quite an important difference, and working on \n```csharp\nIQueryable<T>\n```\n can in many cases save you from returning too many rows from the database. Another prime example is doing paging: If you use \n```csharp\nTake\n```\n and \n```csharp\nSkip\n```\n on \n```csharp\nIQueryable\n```\n, you will only get the number of rows requested; doing that on an \n```csharp\nIEnumerable<T>\n```\n will cause all of your rows to be loaded in memory.",
    "score": 1960,
    "tags": [
      "c#",
      "linq",
      "linq-to-sql",
      "ienumerable",
      "iqueryable"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:37.455957"
  },
  {
    "instruction": "Get property value from string using reflection",
    "context": "I am trying implement the Data transformation using Reflection1 example in my code.\nThe \n```csharp\nGetSourceValue\n```\n function has a switch comparing various types, but I want to remove these types and properties and have \n```csharp\nGetSourceValue\n```\n get the value of the property using only a single string as the parameter.  I want to pass a class and property in the string and resolve the value of the property.\nIs this possible?\n1 Web Archive version of original blog post",
    "output": "```csharp\n public static object GetPropValue(object src, string propName)\n {\n     return src.GetType().GetProperty(propName).GetValue(src, null);\n }\n\n```\n\nOf course, you will want to add validation and whatnot, but that is the gist of it.",
    "score": 2291,
    "tags": [
      "c#",
      "reflection",
      "properties"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:37.745433"
  },
  {
    "instruction": "Collection was modified; enumeration operation may not execute",
    "context": "I can't get to the bottom of this error, because when the debugger is attached, it does not seem to occur.\n\nCollection was modified; enumeration operation may not execute\n\nBelow is the code.\nThis is a WCF server in a Windows service. The method \n```csharp\nNotifySubscribers()\n```\n is called by the service whenever there is a data event (at random intervals, but not very often - about 800 times per day).\nWhen a Windows Forms client subscribes, the subscriber ID is added to the subscribers dictionary, and when the client unsubscribes, it is deleted from the dictionary. The error happens when (or after) a client unsubscribes. It appears that the next time the \n```csharp\nNotifySubscribers()\n```\n method is called, the \n```csharp\nforeach()\n```\n loop fails with the error in the subject line. The method writes the error into the application log as shown in the code below. When a debugger is attached and a client unsubscribes, the code executes fine.\nDo you see a problem with this code? Do I need to make the dictionary thread-safe?\n\n```csharp\n[ServiceBehavior(InstanceContextMode=InstanceContextMode.Single)]\npublic class SubscriptionServer : ISubscriptionServer\n{\n    private static IDictionary<Guid, Subscriber> subscribers;\n\n    public SubscriptionServer()\n    {            \n        subscribers = new Dictionary<Guid, Subscriber>();\n    }\n\n    public void NotifySubscribers(DataRecord sr)\n    {\n        foreach(Subscriber s in subscribers.Values)\n        {\n            try\n            {\n                s.Callback.SignalData(sr);\n            }\n            catch (Exception e)\n            {\n                DCS.WriteToApplicationLog(e.Message, \n                  System.Diagnostics.EventLogEntryType.Error);\n\n                UnsubscribeEvent(s.ClientId);\n            }\n        }\n    }\n    \n    public Guid SubscribeEvent(string clientDescription)\n    {\n        Subscriber subscriber = new Subscriber();\n        subscriber.Callback = OperationContext.Current.\n                GetCallbackChannel<IDCSCallback>();\n\n        subscribers.Add(subscriber.ClientId, subscriber);\n        \n        return subscriber.ClientId;\n    }\n\n    public void UnsubscribeEvent(Guid clientId)\n    {\n        try\n        {\n            subscribers.Remove(clientId);\n        }\n        catch(Exception e)\n        {\n            System.Diagnostics.Debug.WriteLine(\"Unsubscribe Error \" + \n                    e.Message);\n        }\n    }\n}\n\n```",
    "output": "What's likely happening is that \n```csharp\nSignalData\n```\n is indirectly changing the subscribers dictionary under the hood during the loop and leading to that message.  You can verify this by changing\n\n```csharp\nforeach(Subscriber s in subscribers.Values)\n\n```\n\nTo\n\n```csharp\nforeach(Subscriber s in subscribers.Values.ToList())\n\n```\n\nIf I'm right, the problem will disappear.\nCalling \n```csharp\nsubscribers.Values.ToList()\n```\n copies the values of \n```csharp\nsubscribers.Values\n```\n to a separate list at the start of the \n```csharp\nforeach\n```\n. Nothing else has access to this list (it doesn't even have a variable name!), so nothing can modify it inside the loop.",
    "score": 2138,
    "tags": [
      "c#",
      "wcf",
      "concurrency",
      "dictionary",
      "thread-safety"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:38.046801"
  },
  {
    "instruction": "Deserialize JSON into C# dynamic object?",
    "context": "Is there a way to deserialize JSON content into a C# dynamic type? It would be nice to skip creating a bunch of classes in order to use the \n```csharp\nDataContractJsonSerializer\n```\n.",
    "output": "It's pretty simple using Json.NET:\n\n```csharp\ndynamic stuff = JsonConvert.DeserializeObject(\"{ 'Name': 'Jon Smith', 'Address': { 'City': 'New York', 'State': 'NY' }, 'Age': 42 }\");\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n```\n\nAlso \n```csharp\nusing Newtonsoft.Json.Linq\n```\n:\n\n```csharp\ndynamic stuff = JObject.Parse(\"{ 'Name': 'Jon Smith', 'Address': { 'City': 'New York', 'State': 'NY' }, 'Age': 42 }\");\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n```\n\nDocumentation: Querying JSON with dynamic",
    "score": 768,
    "tags": [
      "c#",
      ".net",
      "json",
      "serialization",
      "dynamic"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:38.487338"
  },
  {
    "instruction": "How to group by multiple columns using LINQ",
    "context": "How can I do group by multiple columns in LINQ?\nSomething similar to this in SQL:\n\n```csharp\nSELECT * FROM <TableName> GROUP BY <Column1>,<Column2>\n\n```\n\nHow can I convert this to LINQ:\n\n```csharp\nQuantityBreakdown\n(\n    MaterialID int,\n    ProductID int,\n    Quantity float\n)\n\nINSERT INTO @QuantityBreakdown (MaterialID, ProductID, Quantity)\nSELECT MaterialID, ProductID, SUM(Quantity)\nFROM @Transactions\nGROUP BY MaterialID, ProductID\n\n```",
    "output": "Use an anonymous type.\nEg\n\n```csharp\ngroup x by new { x.Column1, x.Column2 }\n\n```",
    "score": 1401,
    "tags": [
      "c#",
      ".net",
      "linq",
      "group-by"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:38.779522"
  },
  {
    "instruction": "How to escape braces (curly brackets) in a format string in .NET",
    "context": "How can brackets be escaped in using \n```csharp\nstring.Format\n```\n?\nFor example:\n\n```csharp\nString val = \"1,2,3\"\nString.Format(\" foo {{0}}\", val);\n\n```\n\nThis example doesn't throw an exception, but it outputs the string \n```csharp\nfoo {0}\n```\n.\nIs there a way to escape the brackets?",
    "output": "For you to output \n```csharp\n foo {1, 2, 3}\n```\n you have to do something like:\n\n```csharp\nstring t = \"1, 2, 3\";\nstring v = String.Format(\" foo {{{0}}}\", t);\n\n```\n\nTo output a \n```csharp\n{\n```\n you use \n```csharp\n{{\n```\n and to output a \n```csharp\n}\n```\n you use \n```csharp\n}}\n```\n.\nOr now, you can also use C# string interpolation like this (a feature available in C# 6.0)\nEscaping brackets: String interpolation $(\"\"). It is new feature in C# 6.0.\n\n```csharp\nvar inVal = \"1, 2, 3\";\nvar outVal = $\" foo {{{inVal}}}\";\n// The output will be:  foo {1, 2, 3}\n\n```",
    "score": 1500,
    "tags": [
      "c#",
      ".net",
      "string",
      "parsing",
      "formatting"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:39.069248"
  },
  {
    "instruction": "How to convert UTF-8 byte[] to string",
    "context": "I have a \n```csharp\nbyte[]\n```\n array that is loaded from a file that I happen to known contains UTF-8.\nIn some debugging code, I need to convert it to a string. Is there a one-liner that will do this?\nUnder the covers it should be just an allocation and a memcopy, so even if it is not implemented, it should be possible.",
    "output": "```csharp\nstring result = System.Text.Encoding.UTF8.GetString(byteArray);\n\n```\n\nor one of the overload if you know the length:\n\n```csharp\nstring result = System.Text.Encoding.UTF8.GetString(byteArray, 0, 42);\n\n```",
    "score": 1816,
    "tags": [
      "c#",
      ".net",
      "arrays",
      "string",
      "type-conversion"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:39.358347"
  },
  {
    "instruction": "How to set the Content-Type header for an HttpClient request?",
    "context": "I'm trying to set the \n```csharp\nContent-Type\n```\n header of an \n```csharp\nHttpClient\n```\n object as required by an API I am calling.\nI tried setting the \n```csharp\nContent-Type\n```\n like below:\n\n```csharp\nusing (var httpClient = new HttpClient())\n{\n    httpClient.BaseAddress = new Uri(\"http://example.com/\");\n    httpClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n    httpClient.DefaultRequestHeaders.Add(\"Content-Type\", \"application/json\");\n    // ...\n}\n\n```\n\nIt allows me to add the \n```csharp\nAccept\n```\n header but when I try to add \n```csharp\nContent-Type\n```\n it throws the following exception:\n\nMisused header name. Make sure request headers are used with\n  \n```csharp\nHttpRequestMessage\n```\n, response headers with \n```csharp\nHttpResponseMessage\n```\n, and\n  content headers with \n```csharp\nHttpContent\n```\n objects.\n\nHow can I set the \n```csharp\nContent-Type\n```\n header in a \n```csharp\nHttpClient\n```\n request?",
    "output": "The content type is a header of the content, not of the request, which is why this is failing. \n```csharp\nAddWithoutValidation\n```\n as suggested by Robert Levy may work, but you can also set the content type when creating the request content itself (note that the code snippet adds \n```csharp\napplication/json\n```\n in two places-for Accept and Content-Type headers):\n\n```csharp\nHttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(\"http://example.com/\");\nclient.DefaultRequestHeaders\n      .Accept\n      .Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));//ACCEPT header\n\nHttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, \"relativeAddress\");\nrequest.Content = new StringContent(\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":33}\",\n                                    Encoding.UTF8, \n                                    \"application/json\");//CONTENT-TYPE header\n\nclient.SendAsync(request)\n      .ContinueWith(responseTask =>\n      {\n          Console.WriteLine(\"Response: {0}\", responseTask.Result);\n      });\n\n```",
    "score": 1449,
    "tags": [
      "c#",
      "asp.net",
      "rest",
      "content-type",
      "dotnet-httpclient"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:39.673509"
  },
  {
    "instruction": "DateTime vs DateTimeOffset",
    "context": "What is the difference between a \n```csharp\nDateTime\n```\n and a \n```csharp\nDateTimeOffset\n```\n and when should one be used?\n\nCurrently, we have a standard way of dealing with .NET \n```csharp\nDateTime\n```\ns in a TimeZone-aware way: Whenever we produce a \n```csharp\nDateTime\n```\n we do it in UTC (e.g. using \n```csharp\nDateTime.UtcNow\n```\n), and whenever we display one, we convert back from UTC to the user's local time.\nThat works fine, but I've been reading about \n```csharp\nDateTimeOffset\n```\n and how it captures the local and UTC time in the object itself.",
    "output": "```csharp\nDateTimeOffset\n```\n is a representation of instantaneous time (also known as absolute time).  By that, I mean a moment in time that is universal for everyone (not accounting for leap seconds, or the relativistic effects of time dilation).  Another way to represent instantaneous time is with a \n```csharp\nDateTime\n```\n where \n```csharp\n.Kind\n```\n is \n```csharp\nDateTimeKind.Utc\n```\n.\nThis is distinct from calendar time (also known as civil time), which is a position on someone's calendar, and there are many different calendars all over the globe.  We call these calendars time zones.  Calendar time is represented by a \n```csharp\nDateTime\n```\n where \n```csharp\n.Kind\n```\n is \n```csharp\nDateTimeKind.Unspecified\n```\n, or \n```csharp\nDateTimeKind.Local\n```\n.  And \n```csharp\n.Local\n```\n is only meaningful in scenarios where you have an implied understanding of where the computer that is using the result is positioned.  (For example, a user's workstation)\nSo then, why \n```csharp\nDateTimeOffset\n```\n instead of a UTC \n```csharp\nDateTime\n```\n?  It's all about perspective.  Let's use an analogy - we'll pretend to be photographers.\nImagine you are standing on a calendar timeline, pointing a camera at a person on the instantaneous timeline laid out in front of you.  You line up your camera according to the rules of your timezone - which change periodically due to daylight saving time, or due to other changes to the legal definition of your time zone.  (You don't have a steady hand, so your camera is shaky.)  \nThe person standing in the photo would see the angle at which your camera came from. If others were taking pictures, they could be from different angles. This is what the \n```csharp\nOffset\n```\n part of the \n```csharp\nDateTimeOffset\n```\n represents.\nSo if you label your camera \"Eastern Time\", sometimes you are pointing from -5, and sometimes you are pointing from -4.  There are cameras all over the world, all labeled different things, and all pointing at the same instantaneous timeline from different angles.  Some of them are right next to (or on top of) each other, so just knowing the offset isn't enough to determine which timezone the time is related to.\nAnd what about UTC?  Well, it's the one camera out there that is guaranteed to have a steady hand.  It's on a tripod, firmly anchored into the ground. It's not going anywhere.  We call its angle of perspective the zero offset.\n\nSo - what does this analogy tell us?  It provides some intuitive guidelines-\n\nIf you are representing time relative to some place in particular, represent it in calendar time with a \n```csharp\nDateTime\n```\n.  Just be sure you don't ever confuse one calendar with another.  \n```csharp\nUnspecified\n```\n should be your assumption.  \n```csharp\nLocal\n```\n is only useful coming from \n```csharp\nDateTime.Now\n```\n.  For example, I might get \n```csharp\nDateTime.Now\n```\n and save it in a database - but when I retrieve it, I have to assume that it is \n```csharp\nUnspecified\n```\n.  I can't rely that my local calendar is the same calendar that it was originally taken from.\nIf you must always be certain of the moment, make sure you are representing instantaneous time.  Use \n```csharp\nDateTimeOffset\n```\n to enforce it, or use UTC \n```csharp\nDateTime\n```\n by convention.\nIf you need to track a moment of instantaneous time, but you want to also know \"What time did the user think it was on their local calendar?\" - then you must use a \n```csharp\nDateTimeOffset\n```\n.  This is very important for timekeeping systems, for example - both for technical and legal concerns.\nIf you ever need to modify a previously recorded \n```csharp\nDateTimeOffset\n```\n - you don't have enough information in the offset alone to ensure that the new offset is still relevant for the user.  You must also store a timezone identifier  (think - I need the name of that camera so I can take a new picture even if the position has changed).\nIt should also be pointed out that Noda Time has a representation called \n```csharp\nZonedDateTime\n```\n for this, while the .Net base class library does not have anything similar.  You would need to store both a \n```csharp\nDateTimeOffset\n```\n and a \n```csharp\nTimeZoneInfo.Id\n```\n value.\nOccasionally, you will want to represent a calendar time that is local to \"whomever is looking at it\".  For example, when defining what today means.  Today is always midnight to midnight, but these represent a near-infinite number of overlapping ranges on the instantaneous timeline.  (In practice we have a finite number of timezones, but you can express offsets down to the tick)  So in these situations, make sure you understand how to either limit the \"who's asking?\" question down to a single time zone, or deal with translating them back to instantaneous time as appropriate.\n\nHere are a few other little bits about \n```csharp\nDateTimeOffset\n```\n that back up this analogy, and some tips for keeping it straight:\n\nIf you compare two \n```csharp\nDateTimeOffset\n```\n values, they are first normalized to zero offset before comparing.  In other words, \n```csharp\n2012-01-01T00:00:00+00:00\n```\n and \n```csharp\n2012-01-01T02:00:00+02:00\n```\n refer to the same instantaneous moment, and are therefore equivalent.\nIf you are doing any unit testing and need to be certain of the offset, test both the \n```csharp\nDateTimeOffset\n```\n value, and the \n```csharp\n.Offset\n```\n property separately.\nThere is a one-way implicit conversion built in to the .Net framework that lets you pass a \n```csharp\nDateTime\n```\n into any \n```csharp\nDateTimeOffset\n```\n parameter or variable.  When doing so, the \n```csharp\n.Kind\n```\n matters.  If you pass a UTC kind, it will carry in with a zero offset, but if you pass either \n```csharp\n.Local\n```\n or \n```csharp\n.Unspecified\n```\n, it will assume to be local.  The framework is basically saying, \"Well, you asked me to convert calendar time to instantaneous time, but I have no idea where this came from, so I'm just going to use the local calendar.\"  This is a huge gotcha if you load up an unspecified \n```csharp\nDateTime\n```\n on a computer with a different timezone.  (IMHO - that should throw an exception - but it doesn't.)\n\nShameless Plug:\nMany people have shared with me that they find this analogy extremely valuable, so I included it in my Pluralsight course, Date and Time Fundamentals.  You'll find a step-by-step walkthrough of the camera analogy in the second module, \"Context Matters\", in the clip titled \"Calendar Time vs. Instantaneous Time\".",
    "score": 1792,
    "tags": [
      "c#",
      ".net",
      "datetime",
      "timezone",
      "datetimeoffset"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:39.976302"
  },
  {
    "instruction": "Why would you use Expression<Func<T>> rather than Func<T>?",
    "context": "I understand lambdas and the \n```csharp\nFunc\n```\n and \n```csharp\nAction\n```\n delegates. But expressions \nstump me. \nIn what circumstances would you use an \n```csharp\nExpression<Func<T>>\n```\n rather than a plain old \n```csharp\nFunc<T>\n```\n?",
    "output": "When you want to treat lambda expressions as expression trees and look inside them instead of executing them. For example, LINQ to SQL gets the expression and converts it to the equivalent SQL statement and submits it to server (rather than executing the lambda).\nConceptually, \n```csharp\nExpression<Func<T>>\n```\n is completely different from \n```csharp\nFunc<T>\n```\n. \n```csharp\nFunc<T>\n```\n denotes a \n```csharp\ndelegate\n```\n which is pretty much a pointer to a method and \n```csharp\nExpression<Func<T>>\n```\n denotes a tree data structure for a lambda expression. This tree structure describes what a lambda expression does rather than doing the actual thing. It basically holds data about the composition of expressions, variables, method calls, ... (for example it holds information such as this lambda is some constant + some parameter). You can use this description to convert it to an actual method (with \n```csharp\nExpression.Compile\n```\n) or do other stuff (like the LINQ to SQL example) with it. The act of treating lambdas as anonymous methods and expression trees is purely a compile time thing.\n\n```csharp\nFunc<int> myFunc = () => 10; // similar to: int myAnonMethod() { return 10; }\n\n```\n\nwill effectively compile to an IL method that gets nothing and returns 10.\n\n```csharp\nExpression<Func<int>> myExpression = () => 10;\n\n```\n\nwill be converted to a data structure that describes an expression that gets no parameters and returns the value 10:\n larger image\nWhile they both look the same at compile time, what the compiler generates is totally different.",
    "score": 1330,
    "tags": [
      "c#",
      "delegates",
      "lambda",
      "expression-trees"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:40.267200"
  },
  {
    "instruction": "LINQ query on a DataTable",
    "context": "I'm trying to perform a LINQ query on a DataTable object and bizarrely I am finding that performing such queries on DataTables is not straightforward. For example:\n\n```csharp\nvar results = from myRow in myDataTable\nwhere results.Field(\"RowNo\") == 1\nselect results;\n\n```\n\nThis is not allowed. How do I get something like this working?\nI'm amazed that LINQ queries are not allowed on DataTables!",
    "output": "You can't query against the \n```csharp\nDataTable\n```\n's Rows collection, since \n```csharp\nDataRowCollection\n```\n doesn't implement \n```csharp\nIEnumerable<T>\n```\n. You need to use the \n```csharp\nAsEnumerable()\n```\n extension for \n```csharp\nDataTable\n```\n. Like so:\n\n```csharp\nvar results = from myRow in myDataTable.AsEnumerable()\nwhere myRow.Field<int>(\"RowNo\") == 1\nselect myRow;\n\n```\n\nAnd as @Keith says, you'll need to add a reference to System.Data.DataSetExtensions\n\n```csharp\nAsEnumerable()\n```\n returns \n```csharp\nIEnumerable<DataRow>\n```\n. If you need to convert \n```csharp\nIEnumerable<DataRow>\n```\n to a \n```csharp\nDataTable\n```\n, use the \n```csharp\nCopyToDataTable()\n```\n extension.\nBelow is query with Lambda Expression,\n\n```csharp\nvar result = myDataTable\n    .AsEnumerable()\n    .Where(myRow => myRow.Field<int>(\"RowNo\") == 1);\n\n```",
    "score": 1421,
    "tags": [
      "c#",
      ".net",
      "linq",
      "datatable",
      ".net-3.5"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:40.565812"
  },
  {
    "instruction": "How can I get the application's path in a .NET console application?",
    "context": "How do I find the application's path in a console application?\nIn Windows Forms, I can use \n```csharp\nApplication.StartupPath\n```\n to find the current path, but this doesn't seem to be available in a console application.",
    "output": "```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly()\n```\n.\n```csharp\nLocation\n```\n1\nCombine that with \n```csharp\nSystem.IO.Path.GetDirectoryName\n```\n if all you want is the directory.\n\n1As per Mr.Mindor's comment:\n\n```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly().Location\n```\n returns where the executing assembly is currently located, which may or may not be where the assembly is located when not executing. In the case of shadow copying assemblies, you will get a path in a temp directory. \n```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly().CodeBase\n```\n will return the 'permanent' path of the assembly.",
    "score": 1360,
    "tags": [
      "c#",
      ".net",
      "console",
      "console-application"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:40.960591"
  },
  {
    "instruction": "Randomize a List<T>",
    "context": "What is the best way to randomize the order of a generic list in C#? I've got a finite set of 75 numbers in a list I would like to assign a random order to, in order to draw them for a lottery type application.",
    "output": "Shuffle any \n```csharp\n(I)List\n```\n with an extension method based on the Fisher-Yates shuffle:\n\n```csharp\nprivate static Random rng = new Random();  \n\npublic static void Shuffle<T>(this IList<T> list)  \n{  \n    int n = list.Count;  \n    while (n > 1) {  \n        n--;  \n        int k = rng.Next(n + 1);  \n        T value = list[k];  \n        list[k] = list[n];  \n        list[n] = value;  \n    }  \n}\n\n```\n\nUsage:\n\n```csharp\nList<Product> products = GetProducts();\nproducts.Shuffle();\n\n```\n\nThe code above uses the much criticised System.Random method to select swap candidates. It's fast but not as random as it should be. If you need a better quality of randomness in your shuffles use the random number generator in System.Security.Cryptography like so:\n\n```csharp\nusing System.Security.Cryptography;\n...\npublic static void Shuffle<T>(this IList<T> list)\n{\n    RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();\n    int n = list.Count;\n    while (n > 1)\n    {\n        byte[] box = new byte[1];\n        do provider.GetBytes(box);\n        while (!(box[0] < n * (Byte.MaxValue / n)));\n        int k = (box[0] % n);\n        n--;\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n    }\n}\n\n```\n\nA simple comparison is available at this blog (WayBack Machine).\nEdit: Since writing this answer a couple years back, many people have commented or written to me, to point out the big silly flaw in my comparison. They are of course right. There's nothing wrong with System.Random if it's used in the way it was intended. In my first example above, I instantiate the rng variable inside of the Shuffle method, which is asking for trouble if the method is going to be called repeatedly. Below is a fixed, full example based on a really useful comment received today from @weston here on SO.\nProgram.cs:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace SimpleLottery\n{\n  class Program\n  {\n    private static void Main(string[] args)\n    {\n      var numbers = new List<int>(Enumerable.Range(1, 75));\n      numbers.Shuffle();\n      Console.WriteLine(\"The winning numbers are: {0}\", string.Join(\",  \", numbers.GetRange(0, 5)));\n    }\n  }\n\n  public static class ThreadSafeRandom\n  {\n      [ThreadStatic] private static Random Local;\n\n      public static Random ThisThreadsRandom\n      {\n          get { return Local ?? (Local = new Random(unchecked(Environment.TickCount * 31 + Thread.CurrentThread.ManagedThreadId))); }\n      }\n  }\n\n  static class MyExtensions\n  {\n    public static void Shuffle<T>(this IList<T> list)\n    {\n      int n = list.Count;\n      while (n > 1)\n      {\n        n--;\n        int k = ThreadSafeRandom.ThisThreadsRandom.Next(n + 1);\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n      }\n    }\n  }\n}\n\n```",
    "score": 1433,
    "tags": [
      "c#",
      "list",
      "random",
      "shuffle"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:41.267995"
  },
  {
    "instruction": "Creating a byte array from a stream",
    "context": "What is the prefered method for creating a byte array from an input stream? \nHere is my current solution with .NET 3.5. \n\n```csharp\nStream s;\nbyte[] b;\n\nusing (BinaryReader br = new BinaryReader(s))\n{\n    b = br.ReadBytes((int)s.Length);\n}\n\n```\n\nIs it still a better idea to read and write chunks of the stream?",
    "output": "It really depends on whether or not you can trust \n```csharp\ns.Length\n```\n. For many streams, you just don't know how much data there will be. In such cases - and before .NET 4 - I'd use code like this:\n\n```csharp\npublic static byte[] ReadFully(Stream input)\n{\n    byte[] buffer = new byte[16*1024];\n    using (MemoryStream ms = new MemoryStream())\n    {\n        int read;\n        while ((read = input.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        return ms.ToArray();\n    }\n}\n\n```\n\nWith .NET 4 and above, I'd use \n```csharp\nStream.CopyTo\n```\n, which is basically equivalent to the loop in my code - create the \n```csharp\nMemoryStream\n```\n, call \n```csharp\nstream.CopyTo(ms)\n```\n and then return \n```csharp\nms.ToArray()\n```\n. Job done.\nI should perhaps explain why my answer is longer than the others. \n```csharp\nStream.Read\n```\n doesn't guarantee that it will read everything it's asked for. If you're reading from a network stream, for example, it may read one packet's worth and then return, even if there will be more data soon. \n```csharp\nBinaryReader.Read\n```\n will keep going until the end of the stream or your specified size, but you still have to know the size to start with.\nThe above method will keep reading (and copying into a \n```csharp\nMemoryStream\n```\n) until it runs out of data. It then asks the \n```csharp\nMemoryStream\n```\n to return a copy of the data in an array. If you know the size to start with - or think you know the size, without being sure - you can construct the \n```csharp\nMemoryStream\n```\n to be that size to start with. Likewise you can put a check at the end, and if the length of the stream is the same size as the buffer (returned by \n```csharp\nMemoryStream.GetBuffer\n```\n) then you can just return the buffer. So the above code isn't quite optimised, but will at least be correct. It doesn't assume any responsibility for closing the stream - the caller should do that.\nSee this article for more info (and an alternative implementation).",
    "score": 1482,
    "tags": [
      "c#",
      ".net-3.5",
      "inputstream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:41.993031"
  },
  {
    "instruction": "How to count occurrences of a char\\string within a string?",
    "context": "I want to count how many \n```csharp\n/\n```\ns I could find in a string. There are several ways to do it, but I couldn't decide on what the best (or easiest) is.\nAt the moment I'm going with something like:\n\n```csharp\nstring source = \"/once/upon/a/time/\";\nint count = source.Length - source.Replace(\"/\", \"\").Length;\n\n```\n\nOr for strings where length > 1:\n\n```csharp\nstring haystack = \"/once/upon/a/time\";\nstring needle = \"/\";\nint needleCount = ( haystack.Length - haystack.Replace(needle,\"\").Length ) / needle.Length;\n\n```",
    "output": "If you're using .NET 3.5 you can do this in a one-liner with LINQ:\n\n```csharp\nint count = source.Count(f => f == '/');\n\n```\n\nIf you don't want to use LINQ you can do it with:\n\n```csharp\nint count = source.Split('/').Length - 1;\n\n```\n\n\nYou might be surprised to learn that your original technique seems to be about 30% faster than either of these! I've just done a quick benchmark with \"/once/upon/a/time/\" and the results are as follows:\n\nYour original = 12s\n  source.Count = 19s\n  source.Split = 17s\n  foreach (from bobwienholt's answer) = 10s \n\n(The times are for 50,000,000 iterations so you're unlikely to notice much difference in the real world.)",
    "score": 1245,
    "tags": [
      "c#",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:42.391018"
  },
  {
    "instruction": "Creating a comma separated list from IList<string> or IEnumerable<string>",
    "context": "What is the cleanest way to create a comma-separated list of string values from an \n```csharp\nIList<string>\n```\n or \n```csharp\nIEnumerable<string>\n```\n?\n\n```csharp\nString.Join(...)\n```\n operates on a \n```csharp\nstring[]\n```\n so can be cumbersome to work with when types such as \n```csharp\nIList<string>\n```\n or \n```csharp\nIEnumerable<string>\n```\n cannot easily be converted into a string array.",
    "output": ".NET 4+\n\n```csharp\nIList<string> strings = new List<string>{\"1\",\"2\",\"testing\"};\nstring joined = string.Join(\",\", strings);\n\n```\n\nDetail & Pre .Net 4.0 Solutions\n\n```csharp\nIEnumerable<string>\n```\n can be converted into a string array very easily with LINQ (.NET 3.5):\n\n```csharp\nIEnumerable<string> strings = ...;\nstring[] array = strings.ToArray();\n\n```\n\nIt's easy enough to write the equivalent helper method if you need to:\n\n```csharp\npublic static T[] ToArray(IEnumerable<T> source)\n{\n    return new List<T>(source).ToArray();\n}\n\n```\n\nThen call it like this:\n\n```csharp\nIEnumerable<string> strings = ...;\nstring[] array = Helpers.ToArray(strings);\n\n```\n\nYou can then call \n```csharp\nstring.Join\n```\n. Of course, you don't have to use a helper method:\n\n```csharp\n// C# 3 and .NET 3.5 way:\nstring joined = string.Join(\",\", strings.ToArray());\n// C# 2 and .NET 2.0 way:\nstring joined = string.Join(\",\", new List<string>(strings).ToArray());\n\n```\n\nThe latter is a bit of a mouthful though :)\nThis is likely to be the simplest way to do it, and quite performant as well - there are other questions about exactly what the performance is like, including (but not limited to) this one.\nAs of .NET 4.0, there are more overloads available in \n```csharp\nstring.Join\n```\n, so you can actually just write:\n\n```csharp\nstring joined = string.Join(\",\", strings);\n\n```\n\nMuch simpler :)",
    "score": 1813,
    "tags": [
      "c#",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:42.691177"
  },
  {
    "instruction": ".NET String.Format() to add commas in thousands place for a number",
    "context": "I want to add a comma in the thousands place for a number.\nWould \n```csharp\nString.Format()\n```\n be the correct path to take? What format would I use?",
    "output": "```csharp\n$\"{1234:n}\";  // Output: 1,234.00\n$\"{9876:n0}\"; // No digits after the decimal point. Output: 9,876\n\n```",
    "score": 1564,
    "tags": [
      "c#",
      ".net",
      "string",
      "format"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:43.001982"
  },
  {
    "instruction": "What is the yield keyword used for in C#?",
    "context": "In the How Can I Expose Only a Fragment of IList<> question one of the answers had the following code snippet:\n\n```csharp\nIEnumerable<object> FilteredList()\n{\n    foreach(object item in FullList)\n    {\n        if(IsItemInPartialList(item))\n            yield return item;\n    }\n}\n\n```\n\nWhat does the yield keyword do there?  I've seen it referenced in a couple places, and one other question, but I haven't quite figured out what it actually does.  I'm used to thinking of yield in the sense of one thread yielding to another, but that doesn't seem relevant here.",
    "output": "The \n```csharp\nyield\n```\n contextual keyword actually does quite a lot here.\nThe function returns an object that implements the \n```csharp\nIEnumerable<object>\n```\n interface. If a calling function starts \n```csharp\nforeach\n```\ning over this object, the function is called again until it \"yields\". This is syntactic sugar introduced in C# 2.0. In earlier versions you had to create your own \n```csharp\nIEnumerable\n```\n and \n```csharp\nIEnumerator\n```\n objects to do stuff like this.\nThe easiest way understand code like this is to type-in an example, set some breakpoints and see what happens. Try stepping through this example:\n\n```csharp\npublic void Consumer()\n{\n    foreach(int i in Integers())\n    {\n        Console.WriteLine(i.ToString());\n    }\n}\n\npublic IEnumerable<int> Integers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 4;\n    yield return 8;\n    yield return 16;\n    yield return 16777216;\n}\n\n```\n\nWhen you step through the example, you'll find the first call to \n```csharp\nIntegers()\n```\n returns \n```csharp\n1\n```\n. The second call returns \n```csharp\n2\n```\n and the line \n```csharp\nyield return 1\n```\n is not executed again.\nHere is a real-life example:\n\n```csharp\npublic IEnumerable<T> Read<T>(string sql, Func<IDataReader, T> make, params object[] parms)\n{\n    using (var connection = CreateConnection())\n    {\n        using (var command = CreateCommand(CommandType.Text, sql, connection, parms))\n        {\n            command.CommandTimeout = dataBaseSettings.ReadCommandTimeout;\n            using (var reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    yield return make(reader);\n                }\n            }\n        }\n    }\n}\n\n```",
    "score": 970,
    "tags": [
      "c#",
      "yield"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:43.342852"
  },
  {
    "instruction": "Escape curly brace '{' in String.Format",
    "context": "How do I display a literal curly brace character when using the String.Format method?\nExample:\n\n```csharp\nsb.AppendLine(String.Format(\"public {0} {1} { get; private set; }\", \nprop.Type, prop.Name));\n\n```\n\nI would like the output to look like this:\n\n```csharp\npublic Int32 MyProperty { get; private set; }\n\n```",
    "output": "Use double braces \n```csharp\n{{\n```\n or \n```csharp\n}}\n```\n so your code becomes:\n\n```csharp\nsb.AppendLine(String.Format(\"public {0} {1} {{ get; private set; }}\", \nprop.Type, prop.Name));\n\n// For prop.Type of \"Foo\" and prop.Name of \"Bar\", the result would be:\n// public Foo Bar { get; private set; }\n\n```",
    "score": 1614,
    "tags": [
      "c#",
      ".net",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:43.677953"
  },
  {
    "instruction": "Best way to repeat a character in C#",
    "context": "What is the best way to generate a string of \n```csharp\n\\t\n```\n's in C#?\nI am learning C# and experimenting with different ways of saying the same thing.\n\n```csharp\nTabs(uint t)\n```\n is a function that returns a \n```csharp\nstring\n```\n with \n```csharp\nt\n```\n amount of \n```csharp\n\\t\n```\n's\nFor example, \n```csharp\nTabs(3)\n```\n returns \n```csharp\n\"\\t\\t\\t\"\n```\n\nWhich of these three ways of implementing \n```csharp\nTabs(uint numTabs)\n```\n is best?\nOf course that depends on what \"best\" means.\n\nThe LINQ version is only two lines, which is nice.  But are the calls to Repeat and Aggregate unnecessarily time/resource consuming?\n\nThe \n```csharp\nStringBuilder\n```\n version is very clear, but is the \n```csharp\nStringBuilder\n```\n class somehow slower?\n\nThe \n```csharp\nstring\n```\n version is basic, which means it is easy to understand.\n\nDoes it not matter at all?  Are they all equal?\n\n\nThese are all questions to help me get a better feel for C#.\n\n```csharp\nprivate string Tabs(uint numTabs)\n{\n    IEnumerable<string> tabs = Enumerable.Repeat(\"\\t\", (int) numTabs);\n    return (numTabs > 0) ? tabs.Aggregate((sum, next) => sum + next) : \"\";\n}\n\nprivate string Tabs(uint numTabs)\n{\n    StringBuilder sb = new StringBuilder();\n    for (uint i = 0; i < numTabs; i++)\n        sb.Append(\"\\t\");\n\n    return sb.ToString();\n}\n\nprivate string Tabs(uint numTabs)\n{\n    string output = \"\";\n    for (uint i = 0; i < numTabs; i++)\n    {\n        output += '\\t';\n    }\n    return output;\n}\n\n```",
    "output": "What about this:\n\n```csharp\nstring tabs = new string('\\t', n);\n\n```\n\nWhere \n```csharp\nn\n```\n is the number of times you want to repeat the string.\nOr better:\n\n```csharp\nstatic string Tabs(int n)\n{\n    return new string('\\t', n);\n}\n\n```",
    "score": 1926,
    "tags": [
      "c#",
      ".net",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:43.996532"
  },
  {
    "instruction": "Given a DateTime object, how do I get an ISO 8601 date in string format?",
    "context": "Given:\n\n```csharp\nDateTime.UtcNow\n\n```\n\nHow do I get a string which represents the same value in an ISO 8601-compliant format?\nNote that ISO 8601 defines a number of similar formats. The specific format I am looking for is:\n\n```csharp\nyyyy-MM-ddTHH:mm:ssZ\n\n```",
    "output": "Note to readers: Several commenters have pointed out some problems in this answer (related particularly to the first suggestion). Refer to the comments section for more information.\n\n\n```csharp\n// Do not use this\nDateTime.UtcNow.ToString(\"yyyy-MM-ddTHH\\\\:mm\\\\:ss.fffffffzzz\", CultureInfo.InvariantCulture);\n\n```\n\nUsing custom date-time formatting, this gives you a date similar to\n2008-09-22T13:57:31.2311892-04:00.\nAnother way is:\n\n```csharp\n// Prefer this, to avoid having to manually define a framework-provided format\nDateTime.UtcNow.ToString(\"o\", CultureInfo.InvariantCulture);\n\n```\n\nwhich uses the standard \"round-trip\" style (ISO 8601) to give you\n2008-09-22T14:01:54.9571247Z.\nTo get the specified format, you can use:\n\n```csharp\nDateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\", CultureInfo.InvariantCulture)\n\n```",
    "score": 1032,
    "tags": [
      "c#",
      "datetime",
      "datetime-format",
      "iso8601"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:44.299392"
  },
  {
    "instruction": "How do I generate a stream from a string?",
    "context": "I need to write a unit test for a method that takes a stream which comes from a text file. I would like to do do something like this:\n\n```csharp\nStream s = GenerateStreamFromString(\"a,b \\n c,d\");\n\n```",
    "output": "```csharp\npublic static Stream GenerateStreamFromString(string s)\n{\n    var stream = new MemoryStream();\n    var writer = new StreamWriter(stream);\n    writer.Write(s);\n    writer.Flush();\n    stream.Position = 0;\n    return stream;\n}\n\n```\n\nDon't forget to use Using:\n\n```csharp\nusing (var stream = GenerateStreamFromString(\"a,b \\n c,d\"))\n{\n    // ... Do stuff to stream\n}\n\n```\n\n\nAbout the \n```csharp\nStreamWriter\n```\n not being disposed. \n```csharp\nStreamWriter\n```\n is just a wrapper around the base stream, and doesn't use any resources that need to be disposed. The \n```csharp\nDispose\n```\n method will close the underlying \n```csharp\nStream\n```\n that \n```csharp\nStreamWriter\n```\n is writing to. In this case that is the \n```csharp\nMemoryStream\n```\n we want to return.\nIn .NET 4.5 there is now an overload for \n```csharp\nStreamWriter\n```\n that keeps the underlying stream open after the writer is disposed of, but this code does the same thing and works with other versions of .NET too.\nSee Is there any way to close a StreamWriter without closing its BaseStream?",
    "score": 1276,
    "tags": [
      "c#",
      "unit-testing",
      "string",
      "stream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:44.588344"
  },
  {
    "instruction": "What's the difference between the 'ref' and 'out' keywords?",
    "context": "I'm creating a function where I need to pass an object so that it can be modified by the function. What is the difference between:\n\n```csharp\npublic void myFunction(ref MyClass someClass)\n\n```\n\nand\n\n```csharp\npublic void myFunction(out MyClass someClass)\n\n```\n\nWhich should I use and why?",
    "output": "```csharp\nref\n```\n tells the compiler that the object is initialized before entering the function, while \n```csharp\nout\n```\n tells the compiler that the object will be initialized inside the function. \nSo while \n```csharp\nref\n```\n is two-ways, \n```csharp\nout\n```\n is out-only.",
    "score": 1334,
    "tags": [
      "c#",
      "reference",
      "keyword",
      "out",
      "ref"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:44.908471"
  },
  {
    "instruction": "decimal vs double! - Which one should I use and when?",
    "context": "I keep seeing people using doubles in C#. I know I read somewhere that doubles sometimes lose precision. \nMy question is when should a use a double and when should I use a decimal type?\nWhich type is suitable for money computations? (ie. greater than $100 million)",
    "output": "For money, always decimal. It's why it was created.\nIf numbers must add up correctly or balance, use decimal. This includes any financial storage or calculations, scores, or other numbers that people might do by hand.\nIf the exact value of numbers is not important, use double for speed. This includes graphics, physics or other physical sciences computations where there is already a \"number of significant digits\".",
    "score": 1265,
    "tags": [
      "c#",
      "double",
      "decimal",
      "precision",
      "currency"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:45.210791"
  },
  {
    "instruction": "What is the difference between .NET Core and .NET Standard Class Library project types?",
    "context": "In Visual Studio, there are at least three different types of class libraries you can create:\n\nClass Library (.NET Framework)\nClass Library (.NET Standard)\nClass Library (.NET Core)\n\nWhile the first is what we've been using for years, a major point of confusion I've been having is when to use the .NET Standard and .NET Core class library types. I've been bitten by this recently when attempting to multi-target different framework versions, and creating a unit test project.\nSo, what is the difference between Class Library (.NET Standard) and Class Library (.NET Core), why do both exist, and when should we use one over the other?",
    "output": "When should we use one over the other?\n\nThe decision is a trade-off between compatibility and API access.\nUse a .NET Standard library when you want to increase the number of applications that will be compatible with your library, and you are okay with a decrease in the .NET API surface area your library can access.\nUse a .NET Core library when you want to increase the .NET API surface area your library can access, and you are okay with allowing only .NET Core applications to be compatible with your library.\nFor example, a library that targets .NET Standard 1.3 will be compatible with applications that target .NET Framework 4.6, .NET Core 1.0, Universal Windows Platform 10.0, and any other platform that supports .NET Standard 1.3. The library will not have access to some parts of the .NET API, though. For instance, the  \n```csharp\nMicrosoft.NETCore.CoreCLR\n```\n package is compatible with .NET Core, but not with .NET Standard.\n\nWhat is the difference between Class Library (.NET Standard) and Class Library (.NET Core)?\n\nCompatibility: Libraries that target .NET Standard will run on any .NET Standard compliant runtime, such as .NET Core, .NET Framework, Mono/Xamarin. On the other hand, libraries that target .NET Core can only run on the .NET Core runtime.\nAPI Surface Area: .NET Standard libraries come with everything in \n```csharp\nNETStandard.Library\n```\n, whereas .NET Core libraries come with everything in \n```csharp\nMicrosoft.NETCore.App\n```\n. The latter includes approximately 20 additional libraries, some of which we can add manually to our .NET Standard library (such as \n```csharp\nSystem.Threading.Thread\n```\n) and some of which are not compatible with the .NET Standard (such as \n```csharp\nMicrosoft.NETCore.CoreCLR\n```\n).\nAlso, .NET Core libraries specify a runtime and come with an application model. That's important, for instance, to make unit test class libraries runnable.\n\nWhy do both exist?\n\nIgnoring libraries for a moment, the reason that .NET Standard exists is for portability; it defines a set of APIs that .NET platforms agree to implement. Any platform that implements a .NET Standard is compatible with libraries that target that .NET Standard. One of those compatible platforms is .NET Core.\nComing back to libraries, the .NET Standard library templates exist to run on multiple runtimes (at the expense of API surface area). Conversely, the .NET Core library templates exist to access more API surface area (at the expense of compatibility) and to specify a platform against which to build an executable.\nHere is an interactive matrix that shows which .NET Standard supports which .NET implementation(s) and how much API surface area is available.",
    "score": 777,
    "tags": [
      "c#",
      ".net",
      ".net-core",
      ".net-standard",
      "class-library"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:46.034656"
  },
  {
    "instruction": "How can I convert a Unix timestamp to DateTime and vice versa?",
    "context": "There is this example code, but then it starts talking about millisecond / nanosecond problems.\nThe same question is on MSDN, Seconds since the Unix epoch in C#.\nThis is what I've got so far:\n\n```csharp\npublic Double CreatedEpoch\n{\n  get\n  {\n    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\n    TimeSpan span = (this.Created.ToLocalTime() - epoch);\n    return span.TotalSeconds;\n  }\n  set\n  {\n    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\n    this.Created = epoch.AddSeconds(value);\n  }\n}\n\n```",
    "output": "Here's what you need:\n\n```csharp\npublic static DateTime UnixTimeStampToDateTime( double unixTimeStamp )\n{\n    // Unix timestamp is seconds past epoch\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddSeconds( unixTimeStamp ).ToLocalTime();\n    return dateTime;\n}\n\n```\n\nOr, for Java (which is different because the timestamp is in milliseconds, not seconds):\n\n```csharp\npublic static DateTime JavaTimeStampToDateTime( double javaTimeStamp )\n{\n    // Java timestamp is milliseconds past epoch\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddMilliseconds( javaTimeStamp ).ToLocalTime();\n    return dateTime;\n}\n\n```",
    "score": 1276,
    "tags": [
      "c#",
      "datetime",
      "unix",
      "epoch",
      "data-conversion"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:46.326033"
  },
  {
    "instruction": "Metadata file '.dll' could not be found",
    "context": "I am working on a WPF, C# 3.0 project, and I get this error:\n\n```csharp\nError 1 Metadata file\n'WORK=- \\Tools\\VersionManagementSystem\\BusinessLogicLayer\\bin\\Debug\n\\BusinessLogicLayer.dll' could not be found C:\\-=WORK=- \\Tools\n\\VersionManagementSystem\\VersionManagementSystem\\CSC VersionManagementSystem\n\n```\n\nThis is how I reference my usercontrols:\n\n```csharp\nxmlns:vms=\"clr-namespace:VersionManagementSystem\"\n<vms:SignOffProjectListing Margin=\"5\"/>\n\n```\n\nIt happens after every failed build. The only way I can get the solution to compile is to comment-out all my user controls and re-build the project. Then I uncomment the usercontrols and everything is fine.\nI have checked build orders and dependency configurations.\nAs you can see, it seems to have truncated the DLL file's absolute path... I have read that there is a bug with the length. Is this a possible problem?\nIt's very annoying and having to comment, build, and uncomment, the build is becoming extremely tiresome.",
    "output": "I just had the same problem. Visual Studio isn't building the project that's being referenced.\nWritten Instructions:\n\nRight click on the solution and click Properties.\nClick Configuration on the left.\nMake sure the check box under \"Build\" for the project it can't find is checked. If it is already checked, uncheck, hit apply and check the boxes again.\n(Optional) You had to do it for both Release and Debug modes on the solution properties.\n\nScreen capture Instructions:\n\nThey say a picture is worth a thousand words. Click on the GIF to zoom in, and hopefully it will be easy to follow:",
    "score": 1219,
    "tags": [
      "c#",
      ".net",
      "wpf",
      "visual-studio-2008",
      "c#-3.0"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:46.644447"
  },
  {
    "instruction": "Is there a way to check if a file is in use?",
    "context": "I'm writing a program in C# that needs to repeatedly access 1 image file. Most of the time it works, but if my computer's running fast, it will try to access the file before it's been saved back to the filesystem and throw an error:\n\n\"File in use by another process\"\n\nI would like to find a way around this, but all my Googling has only yielded creating checks by using exception handling. This is against my religion, so I was wondering if anyone has a better way of doing it?",
    "output": "Updated NOTE on this solution: Checking with \n```csharp\nFileAccess.ReadWrite\n```\n will fail for Read-Only files so the solution has been modified to check with \n```csharp\nFileAccess.Read\n```\n.\nORIGINAL:\nI've used this code for the past several years, and I haven't had any issues with it.\nUnderstand your hesitation about using exceptions, but you can't avoid them all of the time:\n\n```csharp\nprotected virtual bool IsFileLocked(FileInfo file)\n{\n    try\n    {\n        using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n        {\n            stream.Close();\n        }\n    }\n    catch (IOException)\n    {\n        //the file is unavailable because it is:\n        //still being written to\n        //or being processed by another thread\n        //or does not exist (has already been processed)\n        return true;\n    }\n\n    //file is not locked\n    return false;\n}\n\n```",
    "score": 689,
    "tags": [
      "c#",
      ".net",
      "file",
      "file-io",
      "file-locking"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:46.932040"
  },
  {
    "instruction": "How do I force my .NET application to run as administrator?",
    "context": "Once my program is installed on a client machine, how do I force my program to run as an administrator on Windows 7?",
    "output": "You'll want to modify the manifest that gets embedded in the program. This works on Visual Studio 2008 and higher: Project + Add New Item, select \"Application Manifest File\". Change the \n```csharp\n<requestedExecutionLevel>\n```\n element to:\n\n```csharp\n <requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\" />\n\n```\n\nThe user gets the UAC prompt when they start the program. Use wisely; their patience can wear out quickly.",
    "score": 1281,
    "tags": [
      "c#",
      ".net",
      "windows-7",
      "administrator",
      "elevated-privileges"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:47.576262"
  },
  {
    "instruction": "Proper use of 'yield return'",
    "context": "The yield keyword is one of those keywords in C# that continues to mystify me, and I've never been confident that I'm using it correctly.\nOf the following two pieces of code, which is the preferred and why?\nVersion 1: Using yield return\n\n```csharp\npublic static IEnumerable<Product> GetAllProducts()\n{\n    using (AdventureWorksEntities db = new AdventureWorksEntities())\n    {\n        var products = from product in db.Product\n                       select product;\n\n        foreach (Product product in products)\n        {\n            yield return product;\n        }\n    }\n}\n\n```\n\nVersion 2: Return the list\n\n```csharp\npublic static IEnumerable<Product> GetAllProducts()\n{\n    using (AdventureWorksEntities db = new AdventureWorksEntities())\n    {\n        var products = from product in db.Product\n                       select product;\n\n        return products.ToList<Product>();\n    }\n}\n\n```",
    "output": "I tend to use \n```csharp\nyield return\n```\n when I calculate the next item in the list (or even the next group of items).\nUsing your Version 2, you must have the complete list before returning.\nBy using \n```csharp\nyield return\n```\n, you really only need to have the next item before returning.\nAmong other things, this helps spread the computational cost of complex calculations over a larger time-frame.  For example, if the list is hooked up to a GUI and the user never goes to the last page, you never calculate the final items in the list.\nAnother case where \n```csharp\nyield return\n```\n is preferable is if the \n```csharp\nIEnumerable\n```\n represents an infinite set. Consider the list of Prime Numbers, or an infinite list of random numbers. You can never return the full \n```csharp\nIEnumerable\n```\n at once,  so you use \n```csharp\nyield return\n```\n to return the list incrementally.\nIn your particular example, you have the full list of products, so I'd use Version 2.",
    "score": 868,
    "tags": [
      "c#",
      "yield-return"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:47.882360"
  },
  {
    "instruction": "If a folder does not exist, create it",
    "context": "I use a \n```csharp\nFileUploader\n```\n control in my application. I want to save a file to a specified folder. If this folder does not exist, I want to first create it, and then save my file to this folder.  If the folder already exists, then just save the file in it.\nHow can I do this?",
    "output": "Use \n```csharp\nSystem.IO.Directory.CreateDirectory\n```\n.\n\nAccording to the official \".NET\" docs, you don't need to check if it exists first.\n\nSystem.io   >   Directory   >    Directory.CreateDirectory\nAny and all directories specified in \n```csharp\npath\n```\n are created, unless they already exist or unless some part of \n```csharp\npath\n```\n is invalid. If the directory already exists, this method does not create a new directory, but it returns a \n```csharp\nDirectoryInfo\n```\n object for the existing directory.\n        — learn.microsoft.com/dotnet/api/",
    "score": 1555,
    "tags": [
      "c#",
      "asp.net",
      "directory"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:48.202746"
  },
  {
    "instruction": "split a string on newlines in .NET",
    "context": "I need to split a string into newlines in .NET and the only way I know of to split strings is with the Split method. However that will not allow me to (easily) split on a newline, so what is the best way to do it?",
    "output": "To split on a string you need to use the overload that takes an array of strings:\n\n```csharp\nstring[] lines = theText.Split(\n    new string[] { Environment.NewLine },\n    StringSplitOptions.None\n);\n\n```\n\nEdit:\nIf you want to handle different types of line breaks in a text, you can use the ability to match more than one string. This will correctly split on either type of line break, and preserve empty lines and spacing in the text:\n\n```csharp\nstring[] lines = theText.Split(\n    new string[] { \"\\r\\n\", \"\\r\", \"\\n\" },\n    StringSplitOptions.None\n);\n\n```",
    "score": 1721,
    "tags": [
      "c#",
      ".net",
      "string",
      "split"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:48.572700"
  },
  {
    "instruction": "Converting string to byte array in C#",
    "context": "I'm converting something from VB into C#. Having a problem with the syntax of this statement:\n\n```csharp\nif ((searchResult.Properties[\"user\"].Count > 0))\n{\n    profile.User = System.Text.Encoding.UTF8.GetString(searchResult.Properties[\"user\"][0]);\n}\n\n```\n\nI then see the following errors:\n\nArgument 1: cannot convert from 'object' to 'byte[]'\nThe best overloaded method match for\n'System.Text.Encoding.GetString(byte[])' has some invalid arguments\n\nI tried to fix the code based on this post, but still no success:\n\n```csharp\nstring User = Encoding.UTF8.GetString(\"user\", 0);\n\n```\n\nAny suggestions?",
    "output": "If you already have a byte array then you will need to know what type of encoding was used to make it into that byte array.\nFor example, if the byte array was created like this:\n\n```csharp\nbyte[] bytes = Encoding.ASCII.GetBytes(someString);\n\n```\n\nYou will need to turn it back into a string like this:\n\n```csharp\nstring someString = Encoding.ASCII.GetString(bytes);\n\n```\n\nIf you can find in the code you inherited, the encoding used to create the byte array then you should be set.\nBesides ASCII, the System.Text.Encoding class also includes \n```csharp\nUTF8\n```\n, \n```csharp\nUnicode\n```\n (for UTF-16), and \n```csharp\nUTF32\n```\n. A full list is in the docs.",
    "score": 1750,
    "tags": [
      "c#",
      "string",
      "encoding",
      "byte"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:48.904248"
  },
  {
    "instruction": "How do I convert struct System.Byte byte[] to a System.IO.Stream object in C#?",
    "context": "How do I convert struct \n```csharp\nSystem.Byte\n```\n \n```csharp\nbyte[]\n```\n to a \n```csharp\nSystem.IO.Stream\n```\n object in C#?",
    "output": "The easiest way to convert a byte array to a stream is using the \n```csharp\nMemoryStream\n```\n class:\n\n```csharp\nStream stream = new MemoryStream(byteArray);\n\n```",
    "score": 1660,
    "tags": [
      "c#",
      ".net",
      "arrays",
      "stream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:49.194430"
  },
  {
    "instruction": "How do I use Assert to verify that an exception has been thrown with MSTest?",
    "context": "How do I use \n```csharp\nAssert\n```\n (or other Test class) to verify that an exception has been thrown when using MSTest/Microsoft.VisualStudio.TestTools.UnitTesting?",
    "output": "For \"Visual Studio Team Test\" it appears you apply the ExpectedException attribute to the test's method.\nSample from the documentation here: A Unit Testing Walkthrough with Visual Studio Team Test\n\n```csharp\n[TestMethod]\n[ExpectedException(typeof(ArgumentException),\n    \"A userId of null was inappropriately allowed.\")]\npublic void NullUserIdInConstructor()\n{\n   LogonInfo logonInfo = new LogonInfo(null, \"P@ss0word\");\n}\n\n```",
    "score": 1110,
    "tags": [
      "c#",
      "unit-testing",
      "mstest",
      "assert",
      "vs-unit-testing-framework"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:49.500846"
  },
  {
    "instruction": "Reading settings from app.config or web.config in .NET",
    "context": "I'm working on a C# class library that needs to be able to read settings from the \n```csharp\nweb.config\n```\n or \n```csharp\napp.config\n```\n file (depending on whether the DLL is referenced from an ASP.NET web application or a Windows Forms application).\nI've found that\n\n```csharp\nConfigurationSettings.AppSettings.Get(\"MySetting\")\n\n```\n\nworks, but that code has been marked as deprecated by Microsoft.\nI've read that I should be using:\n\n```csharp\nConfigurationManager.AppSettings[\"MySetting\"]\n\n```\n\nHowever, the \n```csharp\nSystem.Configuration.ConfigurationManager\n```\n class doesn't seem to be available from a C# Class Library project.\nWhat is the best way to do this?",
    "output": "For a sample app.config file like below:\n\n```csharp\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <appSettings>\n    <add key=\"countoffiles\" value=\"7\" />\n    <add key=\"logfilelocation\" value=\"abc.txt\" />\n  </appSettings>\n</configuration>\n\n```\n\nYou read the above application settings using the code shown below:\n\n```csharp\nusing System.Configuration;\n\n```\n\nYou may also need to also add a reference to \n```csharp\nSystem.Configuration\n```\n in your project if there isn't one already. You can then access the values like so:\n\n```csharp\nstring configvalue1 = ConfigurationManager.AppSettings[\"countoffiles\"];\nstring configvalue2 = ConfigurationManager.AppSettings[\"logfilelocation\"];\n\n```",
    "score": 1059,
    "tags": [
      "c#",
      ".net",
      "configuration",
      "appsettings"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:49.814181"
  },
  {
    "instruction": "Sending email in .NET through Gmail",
    "context": "Instead of relying on my host to send an email, I was thinking of sending the email messages using my Gmail account. The emails are personalized emails to the bands I play on my show. \nIs it possible to do it?",
    "output": "Be sure to use \n```csharp\nSystem.Net.Mail\n```\n, not the deprecated \n```csharp\nSystem.Web.Mail\n```\n. Doing SSL with \n```csharp\nSystem.Web.Mail\n```\n is a gross mess of hacky extensions.\n\n```csharp\nusing System.Net;\nusing System.Net.Mail;\n\nvar fromAddress = new MailAddress(\"from@gmail.com\", \"From Name\");\nvar toAddress = new MailAddress(\"to@example.com\", \"To Name\");\nconst string fromPassword = \"fromPassword\";\nconst string subject = \"Subject\";\nconst string body = \"Body\";\n\nvar smtp = new SmtpClient\n{\n    Host = \"smtp.gmail.com\",\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    UseDefaultCredentials = false,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword)\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n```\n\nAdditionally go to the Google Account > Security page and look at the Signing in to Google > 2-Step Verification setting.\n\nIf it is enabled, then you have to generate a password allowing .NET to bypass the 2-Step Verification. To do this, click on Signing in to Google > App passwords, select app = Mail, and device = Windows Computer, and finally generate the password. Use the generated password in the \n```csharp\nfromPassword\n```\n constant instead of your standard Gmail password.\nIf it is disabled, then you have to turn on Less secure app access, which is not recommended! So better enable the 2-Step verification.",
    "score": 1175,
    "tags": [
      "c#",
      ".net",
      "email",
      "smtp",
      "gmail"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:50.115983"
  },
  {
    "instruction": "How do you sort a dictionary by value?",
    "context": "I often have to sort a dictionary (consisting of keys & values) by value. For example, I have a hash of words and respective frequencies that I want to order by frequency.\nThere is a \n```csharp\nSortedList\n```\n which is good for a single value (say frequency), that I want to map back to the word.\nSortedDictionary orders by key, not value. Some resort to a custom class, but is there a cleaner way?",
    "output": "Use LINQ:\n\n```csharp\nDictionary<string, int> myDict = new Dictionary<string, int>();\nmyDict.Add(\"one\", 1);\nmyDict.Add(\"four\", 4);\nmyDict.Add(\"two\", 2);\nmyDict.Add(\"three\", 3);\n\nvar sortedDict = from entry in myDict orderby entry.Value ascending select entry;\n\n```\n\nThis would also allow for great flexibility in that you can select the top 10, 20 10%, etc. Or if you are using your word frequency index for \n```csharp\ntype-ahead\n```\n, you could also include \n```csharp\nStartsWith\n```\n clause as well.",
    "score": 598,
    "tags": [
      "c#",
      ".net",
      "sorting",
      "dictionary"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:50.746819"
  },
  {
    "instruction": "When to use .First and when to use .FirstOrDefault with LINQ?",
    "context": "I've searched around and haven't really found a clear answer as to when you'd want to use \n```csharp\n.First\n```\n and when you'd want to use \n```csharp\n.FirstOrDefault\n```\n with LINQ.\n\nWhen would you want to use \n```csharp\n.First\n```\n? Only when you'd want to catch the exception if no results where returned?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").First();\n\n```\n\nAnd when would you want to use \n```csharp\n.FirstOrDefault\n```\n? When you'd always want the default type if no result?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").FirstOrDefault();\n\n```\n\nAnd for that matter, what about Take?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").Take(1);\n\n```",
    "output": "I would use \n```csharp\nFirst()\n```\n when I know or expect the sequence to have at least one element. In other words, when it is an exceptional occurrence that the sequence is empty.\nUse \n```csharp\nFirstOrDefault()\n```\n when you know that you will need to check whether there was an element or not. In other words, when it is legal for the sequence to be empty. You should not rely on exception handling for the check. (It is bad practice and might hurt performance).\nFinally, the difference between \n```csharp\nFirst()\n```\n and \n```csharp\nTake(1)\n```\n is that \n```csharp\nFirst()\n```\n returns the element itself, while \n```csharp\nTake(1)\n```\n returns a sequence of elements that contains exactly one element.",
    "score": 932,
    "tags": [
      "c#",
      ".net",
      "linq"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:51.049440"
  },
  {
    "instruction": "Identify if a string is a number",
    "context": "If I have these strings:\n\n\n```csharp\n\"abc\"\n```\n  =  \n```csharp\nfalse\n```\n\n\n```csharp\n\"123\"\n```\n  = \n```csharp\ntrue\n```\n\n\n```csharp\n\"ab2\"\n```\n  = \n```csharp\nfalse\n```\n\n\nIs there a command, like \n```csharp\nIsNumeric()\n```\n or something else, that can identify if a string is a valid number?",
    "output": "```csharp\nint n;\nbool isNumeric = int.TryParse(\"123\", out n);\n\n```\n\nUpdate As of C# 7:\n\n```csharp\nvar isNumeric = int.TryParse(\"123\", out int n);\n\n```\n\nor if you don't need the number you can discard the out parameter\n\n```csharp\nvar isNumeric = int.TryParse(\"123\", out _);\n\n```\n\nThe var s can be replaced by their respective types!",
    "score": 1548,
    "tags": [
      "c#",
      "string",
      "parsing",
      "isnumeric"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:51.353182"
  },
  {
    "instruction": "What is the difference between String and string in C#?",
    "context": "What are the differences between these two, and which one should I use?\n\n```csharp\nstring s = \"Hello world!\";\nString s = \"Hello world!\";\n\n```",
    "output": "```csharp\nstring\n```\n is an alias in C# for \n```csharp\nSystem.String\n```\n.\nSo technically, there is no difference.  It's like \n```csharp\nint\n```\n vs. \n```csharp\nSystem.Int32\n```\n.\nAs far as guidelines, it's generally recommended to use \n```csharp\nstring\n```\n any time you're referring to an object.\ne.g.\n\n```csharp\nstring place = \"world\";\n\n```\n\nLikewise, I think it's generally recommended to use \n```csharp\nString\n```\n if you need to refer specifically to the class.\ne.g.\n\n```csharp\nstring greet = String.Format(\"Hello {0}!\", place);\n\n```\n\nThis is the style that Microsoft tends to use in their examples.\nIt appears that the guidance in this area may have changed, as StyleCop now enforces the use of the C# specific aliases.",
    "score": 7114,
    "tags": [
      "c#",
      ".net",
      "string",
      "types",
      "alias"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:52.988077"
  },
  {
    "instruction": "How can I enumerate an enum?",
    "context": "How can you enumerate an \n```csharp\nenum\n```\n in C#?\nE.g., the following code does not compile:\n\n```csharp\npublic enum Suit\n{\n    Spades,\n    Hearts,\n    Clubs,\n    Diamonds\n}\n\npublic void EnumerateAllSuitsDemoMethod()\n{\n    foreach (Suit suit in Suit)\n    {\n        DoSomething(suit);\n    }\n}\n\n```\n\nAnd it gives the following compile-time error:\n\n'Suit' is a 'type' but is used like a 'variable'\n\nIt fails on the \n```csharp\nSuit\n```\n keyword, the second one.",
    "output": "Update: If you're using .NET 5 or newer, use this solution.\n\n```csharp\nforeach (Suit suit in (Suit[]) Enum.GetValues(typeof(Suit)))\n{\n}\n\n```\n\nNote: The cast to \n```csharp\n(Suit[])\n```\n is not strictly necessary, but it does make the code 0.5 ns faster.",
    "score": 5323,
    "tags": [
      "c#",
      ".net",
      "loops",
      "enums",
      "enumeration"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:53.262665"
  },
  {
    "instruction": "How do I cast int to enum in C#?",
    "context": "How do I cast an \n```csharp\nint\n```\n to an \n```csharp\nenum\n```\n in C#?",
    "output": "From an int:\n\n```csharp\nYourEnum foo = (YourEnum)yourInt;\n\n```\n\nFrom a string:\n\n```csharp\nYourEnum foo = (YourEnum) Enum.Parse(typeof(YourEnum), yourString);\n\n// The foo.ToString().Contains(\",\") check is necessary for \n// enumerations marked with a [Flags] attribute.\nif (!Enum.IsDefined(typeof(YourEnum), foo) && !foo.ToString().Contains(\",\"))\n{\n    throw new InvalidOperationException(\n        $\"{yourString} is not an underlying value of the YourEnum enumeration.\"\n    );\n}\n\n```\n\nDynamically (type not known at compile-time):\n\n```csharp\nType enumType = ...;\n\n// NB: Enums can specify a base type other than 'int'\nint numericValue = ...;\n\nobject boxedEnumValue = Enum.ToObject(enumType, numericValue);\n\n```",
    "score": 4730,
    "tags": [
      "c#",
      "enums",
      "casting",
      "integer"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:53.542614"
  },
  {
    "instruction": "Case insensitive 'Contains(string)'",
    "context": "Is there a way to make the following return true?\n\n```csharp\nstring title = \"ASTRINGTOTEST\";\ntitle.Contains(\"string\");\n\n```\n\nThere doesn't seem to be an overload that allows me to set the case sensitivity. Currently I UPPERCASE them both, but that's just silly (by which I am referring to the i18n issues that come with up- and down casing).\nUPDATE\nThis question is ancient and since then I have realized I asked for a simple answer for a really vast and difficult topic if you care to investigate it fully.\nFor most cases, in mono-lingual, English code bases this answer will suffice. I'm suspecting because most people coming here fall in this category this is the most popular answer.\nThis answer however brings up the inherent problem that we can't compare text case insensitive until we know both texts are the same culture and we know  what that culture is. This is maybe a less popular answer, but I think it is more correct and that's why I marked it as such.",
    "output": "You could use the \n```csharp\nString.IndexOf\n```\n Method and pass \n```csharp\nStringComparison.OrdinalIgnoreCase\n```\n as the type of search to use:\n\n```csharp\nstring title = \"STRING\";\nbool contains = title.IndexOf(\"string\", StringComparison.OrdinalIgnoreCase) >= 0;\n\n```\n\nEven better is defining a new extension method for string:\n\n```csharp\npublic static class StringExtensions\n{\n    public static bool Contains(this string source, string toCheck, StringComparison comp)\n    {\n        return source?.IndexOf(toCheck, comp) >= 0;\n    }\n}\n\n```\n\nNote, that null propagation \n```csharp\n?.\n```\n is available since C# 6.0 (VS 2015), for older versions use\n\n```csharp\nif (source == null) return false;\nreturn source.IndexOf(toCheck, comp) >= 0;\n\n```\n\nUSAGE:\n\n```csharp\nstring title = \"STRING\";\nbool contains = title.Contains(\"string\", StringComparison.OrdinalIgnoreCase);\n\n```",
    "score": 3169,
    "tags": [
      "c#",
      "string",
      "contains",
      "case-insensitive"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:53.821044"
  },
  {
    "instruction": "How to iterate over a dictionary?",
    "context": "I've seen a few different ways to iterate over a dictionary in C#.  Is there a standard way?",
    "output": "```csharp\nforeach(KeyValuePair<string, string> entry in myDictionary)\n{\n    // do something with entry.Value or entry.Key\n}\n\n```",
    "score": 4589,
    "tags": [
      "c#",
      "dictionary",
      "loops"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:54.099482"
  },
  {
    "instruction": "What are the correct version numbers for C#?",
    "context": "What are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?\nThis question is primarily to aid those who are searching for an answer using an incorrect version number, e.g. C# 3.5. The hope is that anyone failing to find an answer with the wrong version number will find this question and then search again with the right version number.",
    "output": "C# language version history:\nThese are the versions of C# known about at the time of this writing:\n\nC# 1.0 released with .NET 1.0 and VS2002 (January 2002)\nC# 1.2 (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call \n```csharp\nDispose\n```\n on \n```csharp\nIEnumerator\n```\ns which implemented \n```csharp\nIDisposable\n```\n. A few other small features.\nC# 2.0 released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, and iterator blocks\nC# 3.0 released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (\n```csharp\nvar\n```\n), and query expressions\nC# 4.0 released with .NET 4 and VS2010 (April 2010). Major new features: late binding (\n```csharp\ndynamic\n```\n), delegate and interface generic variance, more COM support, named arguments, tuple data type and optional parameters\nC# 5.0 released with .NET 4.5 and VS2012 (August 2012). Major features: async programming, and caller info attributes. Breaking change: loop variable closure.\nC# 6.0 released with .NET 4.6 and VS2015 (July 2015). Implemented by Roslyn. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, \n```csharp\nawait\n```\n in \n```csharp\ncatch\n```\n and \n```csharp\nfinally\n```\n, extension \n```csharp\nAdd\n```\n methods in collection initializers.\nC# 7.0 released with .NET 4.7 and VS2017 (March 2017). Major new features: tuples, ref locals and ref return, pattern matching (including pattern-based switch statements), inline \n```csharp\nout\n```\n parameter declarations, local functions, binary literals, digit separators, and arbitrary async returns.\nC# 7.1 released with VS2017 v15.3 (August 2017). New features: async main, tuple member name inference, default expression, and pattern matching with generics.\nC# 7.2 released with VS2017 v15.5 (November 2017). New features: private protected access modifier, Span<T>, aka interior pointer, aka stackonly struct, and everything else.\nC# 7.3 released with VS2017 v15.7 (May 2018). New features: enum, delegate and \n```csharp\nunmanaged\n```\n generic type constraints. \n```csharp\nref\n```\n reassignment. Unsafe improvements: \n```csharp\nstackalloc\n```\n initialization, unpinned indexed \n```csharp\nfixed\n```\n buffers, custom \n```csharp\nfixed\n```\n statements. Improved overloading resolution. Expression variables in initializers and queries. \n```csharp\n==\n```\n and \n```csharp\n!=\n```\n defined for tuples. Auto-properties' backing fields can now be targeted by attributes.\nC# 8.0 released with .NET Core 3.0 and VS2019 v16.3 (September 2019). Major new features: nullable reference-types, asynchronous streams, indices and ranges, readonly members, using declarations, default interface methods, static local functions, and enhancement of interpolated verbatim strings.\nC# 9 released with .NET 5.0 and VS2019 v16.8 (November 2020). Major new features: init-only properties, records, with-expressions, data classes, positional records, top-level programs, improved pattern matching (simple type patterns, relational patterns, logical patterns), improved target typing (target-type \n```csharp\nnew\n```\n expressions, target typed \n```csharp\n??\n```\n and \n```csharp\n?\n```\n), and covariant returns. Minor features: relax ordering of \n```csharp\nref\n```\n and \n```csharp\npartial\n```\n modifiers, parameter null checking, lambda discard parameters, native \n```csharp\nint\n```\ns, attributes on local functions, function pointers, static lambdas, extension \n```csharp\nGetEnumerator\n```\n, module initializers, and extending partial.\nC# 10 released with .NET 6.0 (November 2021). Major new features: record structs, struct parameterless constructors, interpolated string handlers, global \n```csharp\nusing\n```\n directives, file-scoped namespace declarations, extended property patterns, const interpolated strings, mixed assignment and declaration in deconstruction, async method builders (via attributes) for individual methods, the \n```csharp\nCallerArgumentExpression\n```\n attribute for parameters, enhanced \n```csharp\n#line\n```\n pragmas.\nC# 11 released with .NET 7.0 (November 2022). Major new features: file-scoped types, generic math support, auto-default structs, pattern match \n```csharp\nSpan<char>\n```\n on a constant string, extended nameof scope, numeric \n```csharp\nIntPtr\n```\n, UTF-8 string literals, required members, \n```csharp\nref\n```\n fields and \n```csharp\nscoped ref\n```\n, raw string literals, improved method group conversion to delegate, warning wave 7, generic attributes, newlines in string interpolation expressions, list patterns\nC# 12 released with .NET 8.0 (November 2023). Major new features: primary constructors, collection expressions, inline arrays, optional parameters in lambda expressions, \n```csharp\nref readonly\n```\n parameters, alias any type, \n```csharp\nExperimental\n```\n attribute, interceptors\nC# 13 releasing with .NET 9.0 (November 2024). Major new features: params collections, new \n```csharp\nLock\n```\n type and semantics, new Escape sequence \n```csharp\n\\e\n```\n, method group natural type improvements, implicit indexer access in object initializers, ref locals and unsafe contexts in iterators and async methods, ref struct types to can implement interfaces, partial properties and indexers, ref struct types, overload resolution priority\n\nIn response to the OP's question:\n\nWhat are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?\n\nThere is no such thing as C# 3.5 - the cause of confusion here is that the C# 3.0 is present in .NET 3.5. The language and framework are versioned independently, however - as is the CLR, which is at version 2.0 for .NET 2.0 through 3.5, .NET 4 introducing CLR 4.0, service packs notwithstanding. The CLR in .NET 4.5 has various improvements, but the versioning is unclear: in some places it may be referred to as CLR 4.5 (this MSDN page used to refer to it that way, for example), but the \n```csharp\nEnvironment.Version\n```\n property still reports 4.0.xxx.\nAs of May 3, 2017, the C# Language Team created a history of C# versions and features on their GitHub repository: Features Added in C# Language Versions. There is also a page that tracks upcoming and recently implemented language features.",
    "score": 3230,
    "tags": [
      "c#",
      ".net",
      "visual-studio",
      ".net-core",
      ".net-framework-version"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:54.405975"
  },
  {
    "instruction": "Deep cloning objects",
    "context": "I want to do something like:\n\n```csharp\nMyObject myObj = GetMyObj(); // Create and fill a new object\nMyObject newObj = myObj.Clone();\n\n```\n\nAnd then make changes to the new object that are not reflected in the original object.\nI don't often need this functionality, so when it's been necessary, I've resorted to creating a new object and then copying each property individually, but it always leaves me with the feeling that there is a better or more elegant way of handling the situation.\nHow can I clone or deep copy an object so that the cloned object can be modified without any changes being reflected in the original object?",
    "output": "Whereas one approach is to implement the \n```csharp\nICloneable\n```\n interface (described here, so I won't regurgitate), here's a nice deep clone object copier I found on The Code Project a while ago and incorporated it into our code.\nAs mentioned elsewhere, it requires your objects to be serializable.\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n/// <summary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// </summary>\npublic static class ObjectCopier\n{\n    /// <summary>\n    /// Perform a deep copy of the object via serialization.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of object being copied.</typeparam>\n    /// <param name=\"source\">The object instance to copy.</param>\n    /// <returns>A deep copy of the object.</returns>\n    public static T Clone<T>(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", nameof(source));\n        }\n\n        // Don't serialize a null object, simply return the default for that object\n        if (ReferenceEquals(source, null)) return default;\n\n        using var stream = new MemoryStream();\n        IFormatter formatter = new BinaryFormatter();\n        formatter.Serialize(stream, source);\n        stream.Seek(0, SeekOrigin.Begin);\n        return (T)formatter.Deserialize(stream);\n    }\n}\n\n```\n\nThe idea is that it serializes your object and then deserializes it into a fresh object. The benefit is that you don't have to concern yourself about cloning everything when an object gets too complex.\nIn case of you prefer to use the new extension methods of C# 3.0, change the method to have the following signature:\n\n```csharp\npublic static T Clone<T>(this T source)\n{\n   // ...\n}\n\n```\n\nNow the method call simply becomes \n```csharp\nobjectBeingCloned.Clone();\n```\n.\nEDIT (January 10 2015) Thought I'd revisit this, to mention I recently started using (Newtonsoft) Json to do this, it should be lighter, and avoids the overhead of [Serializable] tags. (NB @atconway has pointed out in the comments that private members are not cloned using the JSON method)\n\n```csharp\n/// <summary>\n/// Perform a deep Copy of the object, using Json as a serialization method. NOTE: Private members are not cloned using this method.\n/// </summary>\n/// <typeparam name=\"T\">The type of object being copied.</typeparam>\n/// <param name=\"source\">The object instance to copy.</param>\n/// <returns>The copied object.</returns>\npublic static T CloneJson<T>(this T source)\n{            \n    // Don't serialize a null object, simply return the default for that object\n    if (ReferenceEquals(source, null)) return default;\n\n    // initialize inner objects individually\n    // for example in default constructor some list property initialized with some values,\n    // but in 'source' these items are cleaned -\n    // without ObjectCreationHandling.Replace default constructor values will be added to result\n    var deserializeSettings = new JsonSerializerSettings {ObjectCreationHandling = ObjectCreationHandling.Replace};\n\n    return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(source), deserializeSettings);\n}\n\n```",
    "score": 1934,
    "tags": [
      "c#",
      ".net",
      "clone",
      "deep-copy"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:54.685399"
  },
  {
    "instruction": "Catch multiple exceptions at once?",
    "context": "It is discouraged to catch \n```csharp\nSystem.Exception\n```\n errors. Instead, only the \"known\" exceptions should be caught.\nThis sometimes leads to unnecessary repetitive code, for example:\n\n```csharp\ntry\n{\n    WebId = new Guid(queryString[\"web\"]);\n}\ncatch (FormatException)\n{\n    WebId = Guid.Empty;\n}\ncatch (OverflowException)\n{\n    WebId = Guid.Empty;\n}\n\n```\n\nIs there a way to catch both exceptions and only set \n```csharp\nWebId = Guid.Empty\n```\n once?\nThe given example is rather simple, as it's only a \n```csharp\nGUID\n```\n, but imagine code where you modify an object multiple times, and if one of the manipulations fails as expected, you want to \"reset\" the object. However, if there is an unexpected exception, I still want to throw that higher.",
    "output": "Catch \n```csharp\nSystem.Exception\n```\n and switch on the types\n\n```csharp\ncatch (Exception ex)            \n{                \n    if (ex is FormatException || ex is OverflowException)\n    {\n        WebId = Guid.Empty;\n    }\n    else\n        throw;\n}\n\n```",
    "score": 2486,
    "tags": [
      "c#",
      ".net",
      "exception"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:54.969546"
  },
  {
    "instruction": "How do I generate a random integer in C#?",
    "context": "How do I generate a random integer in C#?",
    "output": "The \n```csharp\nRandom\n```\n class is used to create random numbers. (Pseudo-random that is of course.).\nExample:\n\n```csharp\nRandom rnd = new Random();\nint month  = rnd.Next(1, 13);  // creates a number between 1 and 12\nint dice   = rnd.Next(1, 7);   // creates a number between 1 and 6\nint card   = rnd.Next(52);     // creates a number between 0 and 51\n\n```\n\nIf you are going to create more than one random number, you should keep the \n```csharp\nRandom\n```\n instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.",
    "score": 3123,
    "tags": [
      "c#",
      "random"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:55.245056"
  },
  {
    "instruction": "Should 'using' directives be inside or outside the namespace in C#?",
    "context": "I have been running StyleCop over some C# code, and it keeps reporting that my \n```csharp\nusing\n```\n directives should be inside the namespace.\nIs there a technical reason for putting the \n```csharp\nusing\n```\n directives inside instead of outside the namespace?",
    "output": "There is actually a (subtle) difference between the two. Imagine you have the following code in File1.cs:\n\n```csharp\n// File1.cs\nusing System;\nnamespace Outer.Inner\n{\n    class Foo\n    {\n        static void Bar()\n        {\n            double d = Math.PI;\n        }\n    }\n}\n\n```\n\nNow imagine that someone adds another file (File2.cs) to the project that looks like this:\n\n```csharp\n// File2.cs\nnamespace Outer\n{\n    class Math\n    {\n    }\n}\n\n```\n\nThe compiler searches \n```csharp\nOuter\n```\n before looking at those \n```csharp\nusing\n```\n directives outside the namespace, so it finds \n```csharp\nOuter.Math\n```\n instead of \n```csharp\nSystem.Math\n```\n. Unfortunately (or perhaps fortunately?), \n```csharp\nOuter.Math\n```\n has no \n```csharp\nPI\n```\n member, so File1 is now broken.\nThis changes if you put the \n```csharp\nusing\n```\n inside your namespace declaration, as follows:\n\n```csharp\n// File1b.cs\nnamespace Outer.Inner\n{\n    using System;\n    class Foo\n    {\n        static void Bar()\n        {\n            double d = Math.PI;\n        }\n    }\n}\n\n```\n\nNow the compiler searches \n```csharp\nSystem\n```\n before searching \n```csharp\nOuter\n```\n, finds \n```csharp\nSystem.Math\n```\n, and all is well.\nSome would argue that \n```csharp\nMath\n```\n might be a bad name for a user-defined class, since there's already one in \n```csharp\nSystem\n```\n; the point here is just that there is a difference, and it affects the maintainability of your code.\nIt's also interesting to note what happens if \n```csharp\nFoo\n```\n is in namespace \n```csharp\nOuter\n```\n, rather than \n```csharp\nOuter.Inner\n```\n. In that case, adding \n```csharp\nOuter.Math\n```\n in File2 breaks File1 regardless of where the \n```csharp\nusing\n```\n goes. This implies that the compiler searches the innermost enclosing namespace before it looks at any \n```csharp\nusing\n```\n directive.",
    "score": 2418,
    "tags": [
      "c#",
      ".net",
      "namespaces",
      "stylecop",
      "code-organization"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:55.533545"
  },
  {
    "instruction": "Get int value from enum in C#",
    "context": "I have a class called \n```csharp\nQuestions\n```\n (plural). In this class there is an enum called \n```csharp\nQuestion\n```\n (singular) which looks like this.\n\n```csharp\npublic enum Question\n{\n    Role = 2,\n    ProjectFunding = 3,\n    TotalEmployee = 4,\n    NumberOfServers = 5,\n    TopBusinessConcern = 6\n}\n\n```\n\nIn the \n```csharp\nQuestions\n```\n class I have a \n```csharp\nget(int foo)\n```\n function that returns a \n```csharp\nQuestions\n```\n object for that \n```csharp\nfoo\n```\n. Is there an easy way to get the integer value off the enum so I can do something like this \n```csharp\nQuestions.Get(Question.Role)\n```\n?",
    "output": "Just cast the enum, e.g.\n\n```csharp\nint something = (int) Question.Role;\n\n```\n\nThe above will work for the vast majority of enums you see in the wild, as the default underlying type for an enum is \n```csharp\nint\n```\n.\nHowever, as cecilphillip points out, enums can have different underlying types.\nIf an enum is declared as a \n```csharp\nuint\n```\n, \n```csharp\nlong\n```\n, or \n```csharp\nulong\n```\n, it should be cast to the type of the enum; e.g. for\n\n```csharp\nenum StarsInMilkyWay:long {Sun = 1, V645Centauri = 2 .. Wolf424B = 2147483649};\n\n```\n\nyou should use\n\n```csharp\nlong something = (long)StarsInMilkyWay.Wolf424B;\n\n```",
    "score": 3019,
    "tags": [
      "c#",
      "enums",
      "casting",
      "int"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:55.804798"
  },
  {
    "instruction": "How do I get a consistent byte representation of strings in C# without manually specifying an encoding?",
    "context": "How do I convert a \n```csharp\nstring\n```\n to a \n```csharp\nbyte[]\n```\n in .NET (C#) without manually specifying a specific encoding?\nI'm going to encrypt the string. I can encrypt it without converting, but I'd still like to know why encoding comes to play here.\nAlso, why should encoding even be taken into consideration? Can't I simply get what bytes the string has been stored in? Why is there a dependency on character encodings?",
    "output": "Contrary to the answers here, you DON'T need to worry about encoding if the bytes don't need to be interpreted!\nLike you mentioned, your goal is, simply, to \"get what bytes the string has been stored in\".\n(And, of course, to be able to re-construct the string from the bytes.)\nFor those goals, I honestly do not understand why people keep telling you that you need the encodings. You certainly do NOT need to worry about encodings for this.\nJust do this instead:\n\n```csharp\nstatic byte[] GetBytes(string str)\n{\n    byte[] bytes = new byte[str.Length * sizeof(char)];\n    System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);\n    return bytes;\n}\n\n// Do NOT use on arbitrary bytes; only use on GetBytes's output on the SAME system\nstatic string GetString(byte[] bytes)\n{\n    char[] chars = new char[bytes.Length / sizeof(char)];\n    System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);\n    return new string(chars);\n}\n\n```\n\nAs long as your program (or other programs) don't try to interpret the bytes somehow, which you obviously didn't mention you intend to do, then there is nothing wrong with this approach! Worrying about encodings just makes your life more complicated for no real reason.\nAdditional benefit to this approach: It doesn't matter if the string contains invalid characters, because you can still get the data and reconstruct the original string anyway!\nIt will be encoded and decoded just the same, because you are just looking at the bytes.\nIf you used a specific encoding, though, it would've given you trouble with encoding/decoding invalid characters.",
    "score": 1947,
    "tags": [
      "c#",
      ".net",
      "string",
      "character-encoding"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:56.141830"
  },
  {
    "instruction": "What is the best way to give a C# auto-property an initial value?",
    "context": "How do you give a C# auto-property an initial value?\nI either use the constructor, or revert to the old syntax. \n Using the Constructor:\n\n```csharp\nclass Person \n{\n    public Person()\n    {\n        Name = \"Initial Name\";\n    }\n    public string Name { get; set; }\n}\n\n```\n\nUsing normal property syntax  (with an initial value)\n\n```csharp\nprivate string name = \"Initial Name\";\npublic string Name \n{\n    get \n    {\n        return name;\n    }\n    set\n    {\n        name = value;\n    }\n}\n\n```\n\nIs there a better way?",
    "output": "In C# 5 and earlier, to give auto implemented properties an initial value, you have to do it in a constructor.\nSince C# 6.0, you can specify initial value in-line. The syntax is:\n\n```csharp\npublic int X { get; set; } = x; // C# 6 or higher\n\n```\n\n\n```csharp\nDefaultValueAttribute\n```\n is intended to be used by the VS designer (or any other consumer) to specify a default value, not an initial value. (Even if in designed object, initial value is the default value).\nAt compile time \n```csharp\nDefaultValueAttribute\n```\n will not impact the generated IL and it will not be read to initialize the property to that value (see DefaultValue attribute is not working with my Auto Property).\nExample of attributes that impact the IL are \n```csharp\nThreadStaticAttribute\n```\n, \n```csharp\nCallerMemberNameAttribute\n```\n, ...",
    "score": 2975,
    "tags": [
      "c#",
      "constructor",
      "getter",
      "setter",
      "automatic-properties"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:56.435633"
  },
  {
    "instruction": "How do I calculate someone's age based on a DateTime type birthday?",
    "context": "Given a \n```csharp\nDateTime\n```\n representing a person's birthday, how do I calculate their age in years?",
    "output": "An easy to understand and simple solution.\n\n```csharp\n// Save today's date.\nvar today = DateTime.Today;\n\n// Calculate the age.\nvar age = today.Year - birthdate.Year;\n\n// If the birthdate hasn't arrived yet, subtract one year.\nif (birthdate.Date > today.AddYears(-age)) age--;\n\n```\n\nHowever, this assumes you are looking for the western idea of the age and not using East Asian reckoning.",
    "score": 2430,
    "tags": [
      "c#",
      ".net",
      "datetime"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:56.725621"
  },
  {
    "instruction": "How do I create an Excel (.XLS and .XLSX) file in C# without installing Microsoft Office?",
    "context": "How can I create an Excel spreadsheet with C# without requiring Excel to be installed on the machine that's running the code?",
    "output": "You can use a library called ExcelLibrary. It's a free, open source library posted on Google Code:\nExcelLibrary\nThis looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.\nIt's very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.\nExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats. \nYou can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files). There's also NPOI which works with both.\nThere are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.\nAlso, as noted by @АртёмЦарионов below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)\nHere are a couple links for quick reference:\nExcelLibrary - GNU Lesser GPL\nEPPlus - GNU (LGPL) - No longer maintained\nEPPlus 5 - Polyform Noncommercial - Starting May 2020\nNPOI - Apache License\nHere some example code for ExcelLibrary:\nHere is an example taking data from a database and creating a workbook from it. Note that the ExcelLibrary code is the single line at the bottom:\n\n```csharp\n//Create the data set and table\nDataSet ds = new DataSet(\"New_DataSet\");\nDataTable dt = new DataTable(\"New_DataTable\");\n\n//Set the locale for each\nds.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\ndt.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\n\n//Open a DB connection (in this example with OleDB)\nOleDbConnection con = new OleDbConnection(dbConnectionString);\ncon.Open();\n\n//Create a query and fill the data table with the data from the DB\nstring sql = \"SELECT Whatever FROM MyDBTable;\";\nOleDbCommand cmd = new OleDbCommand(sql, con);\nOleDbDataAdapter adptr = new OleDbDataAdapter();\n\nadptr.SelectCommand = cmd;\nadptr.Fill(dt);\ncon.Close();\n\n//Add the table to the data set\nds.Tables.Add(dt);\n\n//Here's the easy part. Create the Excel worksheet from the data set\nExcelLibrary.DataSetHelper.CreateWorkbook(\"MyExcelFile.xls\", ds);\n\n```\n\nCreating the Excel file is as easy as that. You can also manually create Excel files, but the above functionality is what really impressed me.",
    "score": 1198,
    "tags": [
      "c#",
      ".net",
      "excel",
      "file-io"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:57.003827"
  },
  {
    "instruction": "AddTransient, AddScoped and AddSingleton Services Differences",
    "context": "I want to implement dependency injection (DI) in ASP.NET Core. So after adding this code to \n```csharp\nConfigureServices\n```\n method, both ways work.\nWhat is the difference between the \n```csharp\nservices.AddTransient\n```\n and \n```csharp\nservice.AddScoped\n```\n methods in ASP.NET Core?\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add framework services.\n\n    // Add application services.\n    services.AddTransient<IEmailSender, AuthMessageSender>();\n    services.AddScoped<IEmailSender, AuthMessageSender>();\n}\n\n```",
    "output": "TL;DR\n\nTransient objects are always different; a new instance is provided to\nevery controller and every service.\nScoped objects are the same within a request, but different across\ndifferent requests.\nSingleton objects are the same for every object and every request.\n\nFor more clarification, this example from .NET documentation shows the difference:\nTo demonstrate the difference between these lifetime and registration options, consider a simple interface that represents one or more tasks as an operation with a unique identifier, \n```csharp\nOperationId\n```\n. Depending on how we configure the lifetime for this service, the container will provide either the same or different instances of the service to the requesting class. To make it clear which lifetime is being requested, we will create one type per lifetime option:\n\n```csharp\nusing System;\n\nnamespace DependencyInjectionSample.Interfaces\n{\n    public interface IOperation\n    {\n        Guid OperationId { get; }\n    }\n\n    public interface IOperationTransient : IOperation\n    {\n    }\n\n    public interface IOperationScoped : IOperation\n    {\n    }\n\n    public interface IOperationSingleton : IOperation\n    {\n    }\n\n    public interface IOperationSingletonInstance : IOperation\n    {\n    }\n}\n\n```\n\nWe implement these interfaces using a single class, \n```csharp\nOperation\n```\n, that accepts a GUID in its constructor, or uses a new GUID if none is provided:\n\n```csharp\nusing System;\nusing DependencyInjectionSample.Interfaces;\nnamespace DependencyInjectionSample.Classes\n{\n    public class Operation : IOperationTransient, IOperationScoped, IOperationSingleton, IOperationSingletonInstance\n    {\n        Guid _guid;\n        public Operation() : this(Guid.NewGuid())\n        {\n\n        }\n\n        public Operation(Guid guid)\n        {\n            _guid = guid;\n        }\n\n        public Guid OperationId => _guid;\n    }\n}\n\n```\n\nNext, in \n```csharp\nConfigureServices\n```\n, each type is added to the container according to its named lifetime:\n\n```csharp\nservices.AddTransient<IOperationTransient, Operation>();\nservices.AddScoped<IOperationScoped, Operation>();\nservices.AddSingleton<IOperationSingleton, Operation>();\nservices.AddSingleton<IOperationSingletonInstance>(new Operation(Guid.Empty));\nservices.AddTransient<OperationService, OperationService>();\n\n```\n\nNote that the \n```csharp\nIOperationSingletonInstance\n```\n service is using a specific instance with a known ID of \n```csharp\nGuid.Empty\n```\n, so it will be clear when this type is in use. We have also registered an \n```csharp\nOperationService\n```\n that depends on each of the other \n```csharp\nOperation\n```\n types, so that it will be clear within a request whether this service is getting the same instance as the controller, or a new one, for each operation type. All this service does is expose its dependencies as properties, so they can be displayed in the view.\n\n```csharp\nusing DependencyInjectionSample.Interfaces;\n\nnamespace DependencyInjectionSample.Services\n{\n    public class OperationService\n    {\n        public IOperationTransient TransientOperation { get; }\n        public IOperationScoped ScopedOperation { get; }\n        public IOperationSingleton SingletonOperation { get; }\n        public IOperationSingletonInstance SingletonInstanceOperation { get; }\n\n        public OperationService(IOperationTransient transientOperation,\n            IOperationScoped scopedOperation,\n            IOperationSingleton singletonOperation,\n            IOperationSingletonInstance instanceOperation)\n        {\n            TransientOperation = transientOperation;\n            ScopedOperation = scopedOperation;\n            SingletonOperation = singletonOperation;\n            SingletonInstanceOperation = instanceOperation;\n        }\n    }\n}\n\n```\n\nTo demonstrate the object lifetimes within and between separate individual requests to the application, the sample includes an \n```csharp\nOperationsController\n```\n that requests each kind of \n```csharp\nIOperation\n```\n type as well as an \n```csharp\nOperationService\n```\n. The \n```csharp\nIndex\n```\n action then displays all of the controller’s and service’s \n```csharp\nOperationId\n```\n values.\n\n```csharp\nusing DependencyInjectionSample.Interfaces;\nusing DependencyInjectionSample.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DependencyInjectionSample.Controllers\n{\n    public class OperationsController : Controller\n    {\n        private readonly OperationService _operationService;\n        private readonly IOperationTransient _transientOperation;\n        private readonly IOperationScoped _scopedOperation;\n        private readonly IOperationSingleton _singletonOperation;\n        private readonly IOperationSingletonInstance _singletonInstanceOperation;\n\n        public OperationsController(OperationService operationService,\n            IOperationTransient transientOperation,\n            IOperationScoped scopedOperation,\n            IOperationSingleton singletonOperation,\n            IOperationSingletonInstance singletonInstanceOperation)\n        {\n            _operationService = operationService;\n            _transientOperation = transientOperation;\n            _scopedOperation = scopedOperation;\n            _singletonOperation = singletonOperation;\n            _singletonInstanceOperation = singletonInstanceOperation;\n        }\n\n        public IActionResult Index()\n        {\n            // ViewBag contains controller-requested services\n            ViewBag.Transient = _transientOperation;\n            ViewBag.Scoped = _scopedOperation;\n            ViewBag.Singleton = _singletonOperation;\n            ViewBag.SingletonInstance = _singletonInstanceOperation;\n\n            // Operation service has its own requested services\n            ViewBag.Service = _operationService;\n            return View();\n        }\n    }\n}\n\n```\n\nNow two separate requests are made to this controller action:\n\n\nObserve which of the \n```csharp\nOperationId\n```\n values varies within a request, and between requests.\n\nTransient objects are always different; a new instance is provided to every controller and every service.\n\nScoped objects are the same within a request, but different across different requests\n\nSingleton objects are the same for every object and every request (regardless of whether an instance is provided in \n```csharp\nConfigureServices\n```\n)",
    "score": 3457,
    "tags": [
      "c#",
      "asp.net-core",
      ".net-core"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:57.295319"
  },
  {
    "instruction": "How do I remedy \"The breakpoint will not currently be hit. No symbols have been loaded for this document.\" warning?",
    "context": "A C# desktop application (on the Visual Studio Express edition) worked, but then it didn't work 5 seconds later.\nI tried the following:\n\nEnsure debug configuration, debug flag, and full debug information are set on all assemblies.\nDelete all bin and obj folders and all DLL files related to the project from my entire machine.\nRecreate projects causing the problem from scratch.\nReboot.\n\nI have two Windows Forms projects in the solution. One of them loads the debug information, one doesn't. They both refer to the assembly I'm trying to get debug information on in exactly the same way in the project file. Any ideas?\n\nI want to add here, mostly for myself when I come back to review this question, that symbols are not loaded until the assembly is loaded, and the assembly is not loaded until it is needed. If the breakpoint is in a library that is only used in one function in your main assembly, the symbols will not be loaded (and it will show the breakpoint as not being hit) until that function is called.",
    "output": "Start debugging, as soon as you've arrived at a breakpoint or used \n```csharp\nDebug > Break All\n```\n, use \n```csharp\nDebug > Windows > Modules\n```\n.  You'll see a list of all the assemblies that are loaded into the process.  Locate the one you want to get debug info for.  Right-click it and select Symbol Load Information.  You'll get a dialog that lists all the directories where it looked for the \n```csharp\n.pdb\n```\n file for the assembly.  Verify that list against the actual \n```csharp\n.pdb\n```\n location.  Make sure it doesn't find an old one.\nIn normal projects, the assembly and its \n```csharp\n.pdb\n```\n file should always have been copied by the IDE into the same folder as your \n```csharp\n.exe\n```\n, i.e. the \n```csharp\nbin\\Debug\n```\n folder of your project.  Make sure you remove one from the GAC if you've been playing with it.",
    "score": 1344,
    "tags": [
      "c#",
      ".net",
      "debugging",
      "breakpoints",
      "visual-studio-express"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:57.584963"
  },
  {
    "instruction": "What do two question marks together mean in C#?",
    "context": "Ran across this line of code:\n\n```csharp\nFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();\n\n```\n\nWhat do the two question marks mean, is it some kind of ternary operator?\nIt's hard to look up in Google.",
    "output": "It's the null coalescing operator, and quite like the ternary (immediate-if) operator. See also ?? Operator - MSDN.\n\n```csharp\nFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();\n\n```\n\nexpands to:\n\n```csharp\nFormsAuth = formsAuth != null ? formsAuth : new FormsAuthenticationWrapper();\n\n```\n\nwhich further expands to:\n\n```csharp\nif(formsAuth != null)\n    FormsAuth = formsAuth;\nelse\n    FormsAuth = new FormsAuthenticationWrapper();\n\n```\n\nIn English, it means \"If whatever is to the left is not null, use that, otherwise use what's to the right.\"\nNote that you can use any number of these in sequence. The following statement will assign the first non-null \n```csharp\nAnswer#\n```\n to \n```csharp\nAnswer\n```\n (if all Answers are null then the \n```csharp\nAnswer\n```\n is null):\n\n```csharp\nstring Answer = Answer1 ?? Answer2 ?? Answer3 ?? Answer4;\n\n```\n\n\nAlso it's worth mentioning while the expansion above is conceptually equivalent, the result of each expression is only evaluated once. This is important if for example an expression is a method call with side effects. (Credit to @Joey for pointing this out.)",
    "score": 2674,
    "tags": [
      "c#",
      "null-coalescing-operator"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:58.224820"
  },
  {
    "instruction": "Type Checking: typeof, GetType, or is?",
    "context": "I've seen many people use the following code:\n\n```csharp\nType t = typeof(SomeType);\nif (t == typeof(int))\n    // Some code here\n\n```\n\nBut I know you could also do this:\n\n```csharp\nif (obj1.GetType() == typeof(int))\n    // Some code here\n\n```\n\nOr this:\n\n```csharp\nif (obj1 is int)\n    // Some code here\n\n```\n\nPersonally, I feel the last one is the cleanest, but is there something I'm missing? Which one is the best to use, or is it personal preference?",
    "output": "All are different.\n\n\n```csharp\ntypeof\n```\n takes a type name (which you specify at compile time).\n\n```csharp\nGetType\n```\n gets the runtime type of an instance.\n\n```csharp\nis\n```\n returns true if an instance is in the inheritance tree.\n\nExample\n\n```csharp\nclass Animal { } \nclass Dog : Animal { }\n\nvoid PrintTypes(Animal a) { \n    Console.WriteLine(a.GetType() == typeof(Animal)); // false \n    Console.WriteLine(a is Animal);                   // true \n    Console.WriteLine(a.GetType() == typeof(Dog));    // true\n    Console.WriteLine(a is Dog);                      // true \n}\n\nDog spot = new Dog(); \nPrintTypes(spot);\n\n```\n\n\n\nWhat about \n```csharp\ntypeof(T)\n```\n? Is it also resolved at compile time?\n\nYes. T is always what the type of the expression is. Remember, a generic method is basically a whole bunch of methods with the appropriate type. Example:\n\n```csharp\nstring Foo<T>(T parameter) { return typeof(T).Name; }\n\nAnimal probably_a_dog = new Dog();\nDog    definitely_a_dog = new Dog();\n\nFoo(probably_a_dog); // this calls Foo<Animal> and returns \"Animal\"\nFoo<Animal>(probably_a_dog); // this is exactly the same as above\nFoo<Dog>(probably_a_dog); // !!! This will not compile. The parameter expects a Dog, you cannot pass in an Animal.\n\nFoo(definitely_a_dog); // this calls Foo<Dog> and returns \"Dog\"\nFoo<Dog>(definitely_a_dog); // this is exactly the same as above.\nFoo<Animal>(definitely_a_dog); // this calls Foo<Animal> and returns \"Animal\". \nFoo((Animal)definitely_a_dog); // this does the same as above, returns \"Animal\"\n\n```",
    "score": 2303,
    "tags": [
      "c#",
      "types",
      "typeof",
      "gettype"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:58.515346"
  },
  {
    "instruction": "Proper use of the IDisposable interface",
    "context": "I know from reading Microsoft documentation that the \"primary\" use of the \n```csharp\nIDisposable\n```\n interface is to clean up unmanaged resources.\nTo me, \"unmanaged\" means things like database connections, sockets, window handles, etc.  But, I've seen code where the \n```csharp\nDispose()\n```\n method is implemented to free managed resources, which seems redundant to me, since the garbage collector should take care of that for you.\nFor example:\n\n```csharp\npublic class MyCollection : IDisposable\n{\n    private List<String> _theList = new List<String>();\n    private Dictionary<String, Point> _theDict = new Dictionary<String, Point>();\n\n    // Die, clear it up! (free unmanaged resources)\n    public void Dispose()\n    {\n        _theList.clear();\n        _theDict.clear();\n        _theList = null;\n        _theDict = null;\n    }\n}\n\n```\n\nMy question is, does this make the garbage collector free memory used by \n```csharp\nMyCollection\n```\n any faster than it normally would?\n\nEdit:  So far people have posted some good examples of using \n```csharp\nIDisposable\n```\n to clean up unmanaged resources such as database connections and bitmaps.  But suppose that \n```csharp\n_theList\n```\n in the above code contained a million strings, and you wanted to free that memory now, rather than waiting for the garbage collector.  Would the above code accomplish that?",
    "output": "The point of Dispose is to free unmanaged resources. It needs to be done at some point, otherwise they will never be cleaned up. The garbage collector doesn't know how to call \n```csharp\nDeleteHandle()\n```\n on a variable of type \n```csharp\nIntPtr\n```\n, it doesn't know whether or not it needs to call \n```csharp\nDeleteHandle()\n```\n.\n\nNote: What is an unmanaged resource? If you found it in the Microsoft .NET Framework: it's managed. If you went poking around MSDN yourself, it's unmanaged. Anything you've used P/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framework is unmanaged – and you're now responsible for cleaning it up.\n\nThe object that you've created needs to expose some method, that the outside world can call, in order to clean up unmanaged resources. The method can be named whatever you like:\n\n```csharp\npublic void Cleanup()\n\n```\n\nor\n\n```csharp\npublic void Shutdown()\n\n```\n\nBut instead there is a standardized name for this method:\n\n```csharp\npublic void Dispose()\n\n```\n\nThere was even an interface created, \n```csharp\nIDisposable\n```\n, that has just that one method:\n\n```csharp\npublic interface IDisposable\n{\n   void Dispose();\n}\n\n```\n\nSo you make your object expose the \n```csharp\nIDisposable\n```\n interface, and that way you promise that you've written that single method to clean up your unmanaged resources:\n\n```csharp\npublic void Dispose()\n{\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n}\n\n```\n\nAnd you're done.\nExcept you can do better\nWhat if your object has allocated a 250MB System.Drawing.Bitmap (i.e. the .NET managed Bitmap class) as some sort of frame buffer? Sure, this is a managed .NET object, and the garbage collector will free it. But do you really want to leave 250MB of memory just sitting there – waiting for the garbage collector to eventually come along and free it? What if there's an open database connection? Surely we don't want that connection sitting open, waiting for the GC to finalize the object.\nIf the user has called \n```csharp\nDispose()\n```\n (meaning they no longer plan to use the object) why not get rid of those wasteful bitmaps and database connections?\nSo now we will:\n\nget rid of unmanaged resources (because we have to), and\nget rid of managed resources (because we want to be helpful)\n\nSo let's update our \n```csharp\nDispose()\n```\n method to get rid of those managed objects:\n\n```csharp\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose();\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose();\n      this.frameBufferImage = null;\n   }\n}\n\n```\n\nAnd all is good.\nExcept you can do better!\nWhat if the person forgot to call \n```csharp\nDispose()\n```\n on your object? Then they would leak some unmanaged resources!\n\nNote: They won't leak managed resources, because eventually the garbage collector is going to run, on a background thread, and free the memory associated with any unused objects. This will include your object, and any managed objects you use (e.g. the \n```csharp\nBitmap\n```\n and the \n```csharp\nDbConnection\n```\n).\n\nIf the person forgot to call \n```csharp\nDispose()\n```\n, we can still save their bacon! We still have a way to call it for them: when the garbage collector finally gets around to freeing (i.e. finalizing) our object.\n\nNote: The garbage collector will eventually free all managed objects.\nWhen it does, it calls the \n```csharp\nFinalize\n```\n\nmethod on the object. The GC doesn't know, or\ncare, about your Dispose method.\nThat was just a name we chose for\na method we call when we want to get\nrid of unmanaged stuff.\n\nThe destruction of our object by the Garbage collector is the perfect time to free those pesky unmanaged resources. We do this by overriding the \n```csharp\nFinalize()\n```\n method.\n\nNote: In C#, you don't explicitly override the \n```csharp\nFinalize()\n```\n method.\nYou write a method that looks like a C++ destructor, and the\ncompiler takes that to be your implementation of the \n```csharp\nFinalize()\n```\n method:\n\n\n```csharp\n~MyObject()\n{\n    //we're being finalized (i.e. destroyed), call Dispose in case the user forgot to\n    Dispose(); //<--Warning: subtle bug! Keep reading!\n}\n\n```\n\nBut there's a bug in that code. You see, the garbage collector runs on a background thread; you don't know the order in which two objects are destroyed. It is entirely possible that in your \n```csharp\nDispose()\n```\n code, the managed object you're trying to get rid of (because you wanted to be helpful) is no longer there:\n\n```csharp\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose(); //<-- crash, GC already destroyed it\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose(); //<-- crash, GC already destroyed it\n      this.frameBufferImage = null;\n   }\n}\n\n```\n\nSo what you need is a way for \n```csharp\nFinalize()\n```\n to tell \n```csharp\nDispose()\n```\n that it should not touch any managed resources (because they might not be there anymore), while still freeing unmanaged resources.\nThe standard pattern to do this is to have \n```csharp\nFinalize()\n```\n and \n```csharp\nDispose()\n```\n both call a third(!) method; where you pass a Boolean saying if you're calling it from \n```csharp\nDispose()\n```\n (as opposed to \n```csharp\nFinalize()\n```\n), meaning it's safe to free managed resources.\nThis internal method could be given some arbitrary name like \"CoreDispose\", or \"MyInternalDispose\", but is tradition to call it \n```csharp\nDispose(Boolean)\n```\n:\n\n```csharp\nprotected void Dispose(Boolean disposing)\n\n```\n\nBut a more helpful parameter name might be:\n\n```csharp\nprotected void Dispose(Boolean itIsSafeToAlsoFreeManagedObjects)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too, but only if I'm being called from Dispose\n   //(If I'm being called from Finalize then the objects might not exist\n   //anymore\n   if (itIsSafeToAlsoFreeManagedObjects)  \n   {    \n      if (this.databaseConnection != null)\n      {\n         this.databaseConnection.Dispose();\n         this.databaseConnection = null;\n      }\n      if (this.frameBufferImage != null)\n      {\n         this.frameBufferImage.Dispose();\n         this.frameBufferImage = null;\n      }\n   }\n}\n\n```\n\nAnd you change your implementation of the \n```csharp\nIDisposable.Dispose()\n```\n method to:\n\n```csharp\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it's safe\n}\n\n```\n\nand your finalizer to:\n\n```csharp\n~MyObject()\n{\n   Dispose(false); //I am *not* calling you from Dispose, it's *not* safe\n}\n\n```\n\n\nNote: If your object descends from an object that implements \n```csharp\nDispose\n```\n, then don't forget to call their base Dispose method when you override Dispose:\n\n\n```csharp\npublic override void Dispose()\n{\n    try\n    {\n        Dispose(true); //true: safe to free managed resources\n    }\n    finally\n    {\n        base.Dispose();\n    }\n}\n\n```\n\nAnd all is good.\nExcept you can do better!\nIf the user calls \n```csharp\nDispose()\n```\n on your object, then everything has been cleaned up. Later on, when the garbage collector comes along and calls Finalize, it will then call \n```csharp\nDispose\n```\n again.\nNot only is this wasteful, but if your object has junk references to objects you already disposed of from the last call to \n```csharp\nDispose()\n```\n, you'll try to dispose them again!\nYou'll notice in my code I was careful to remove references to objects that I've disposed, so I don't try to call \n```csharp\nDispose\n```\n on a junk object reference. But that didn't stop a subtle bug from creeping in.\nWhen the user calls \n```csharp\nDispose()\n```\n: the handle CursorFileBitmapIconServiceHandle is destroyed. Later when the garbage collector runs, it will try to destroy the same handle again.\n\n```csharp\nprotected void Dispose(Boolean iAmBeingCalledFromDisposeAndNotFinalize)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle); //<--double destroy \n   ...\n}\n\n```\n\nThe way you fix this is tell the garbage collector that it doesn't need to bother finalizing the object – its resources have already been cleaned up, and no more work is needed. You do this by calling \n```csharp\nGC.SuppressFinalize()\n```\n in the \n```csharp\nDispose()\n```\n method:\n\n```csharp\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it's safe\n   GC.SuppressFinalize(this); //Hey, GC: don't bother calling finalize later\n}\n\n```\n\nNow that the user has called \n```csharp\nDispose()\n```\n, we have:\n\nfreed unmanaged resources\nfreed managed resources\n\nThere's no point in the GC running the finalizer – everything's taken care of.\nCouldn't I use Finalize to cleanup unmanaged resources?\nThe documentation for \n```csharp\nObject.Finalize\n```\n says:\n\nThe Finalize method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.\n\nBut the MSDN documentation also says, for \n```csharp\nIDisposable.Dispose\n```\n:\n\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n\nSo which is it? Which one is the place for me to cleanup unmanaged resources? The answer is:\n\nIt's your choice! But choose \n```csharp\nDispose\n```\n.\n\nYou certainly could place your unmanaged cleanup in the finalizer:\n\n```csharp\n~MyObject()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //A C# destructor automatically calls the destructor of its base class.\n}\n\n```\n\nThe problem with that is you have no idea when the garbage collector will get around to finalizing your object. Your un-managed, un-needed, un-used native resources will stick around until the garbage collector eventually runs. Then it will call your finalizer method; cleaning up unmanaged resources. The documentation of Object.Finalize points this out:\n\nThe exact time when the finalizer executes is undefined. To ensure deterministic release of resources for instances of your class, implement a Close method or provide a \n```csharp\nIDisposable.Dispose\n```\n implementation.\n\nThis is the virtue of using \n```csharp\nDispose\n```\n to cleanup unmanaged resources; you get to know, and control, when unmanaged resource are cleaned up. Their destruction is \"deterministic\".\n\nTo answer your original question: Why not release memory now, rather than for when the GC decides to do it? I have a facial recognition software that needs to get rid of 530 MB of internal images now, since they're no longer needed. When we don't: the machine grinds to a swapping halt.\nBonus Reading\nFor anyone who likes the style of this answer (explaining the why, so the how becomes obvious), I suggest you read Chapter One of Don Box's Essential COM:\n\nDirect link: Chapter 1 sample by Pearson Publishing\nmagnet: 84bf0b960936d677190a2be355858e80ef7542c0\n\nIn 35 pages he explains the problems of using binary objects, and invents COM before your eyes. Once you realize the why of COM, the remaining 300 pages are obvious, and just detail Microsoft's implementation.\nI think every programmer who has ever dealt with objects or COM should, at the very least, read the first chapter. It is the best explanation of anything ever.\nExtra Bonus Reading\nWhen everything you know is wrong archiveby Eric Lippert\n\nIt is therefore very difficult indeed to write a correct finalizer,\nand the best advice I can give you is to not try.",
    "score": 2991,
    "tags": [
      "c#",
      ".net",
      "garbage-collection",
      "idisposable"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:58.805790"
  },
  {
    "instruction": "Calling the base constructor in C#",
    "context": "If I inherit from a base class and want to pass something from the constructor of the inherited class to the constructor of the base class, how do I do that?\nFor example, if I inherit from the Exception class I want to do something like this:\n\n```csharp\nclass MyExceptionClass : Exception\n{\n     public MyExceptionClass(string message, string extraInfo)\n     {\n         //This is where it's all falling apart\n         base(message);\n     }\n}\n\n```\n\nBasically what I want is to be able to pass the string message to the base Exception class.",
    "output": "Modify your constructor to the following so that it calls the base class constructor properly:\n\n```csharp\npublic class MyExceptionClass : Exception\n{\n    public MyExceptionClass(string message, string extrainfo) : base(message)\n    {\n        //other stuff here\n    }\n}\n\n```\n\nNote that a constructor is not something that you can call anytime within a method. That's the reason you're getting errors in your call in the constructor body.",
    "score": 2249,
    "tags": [
      "c#",
      ".net",
      "inheritance",
      "constructor"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:59.066542"
  },
  {
    "instruction": "Is there a reason for C#'s reuse of the variable in a foreach?",
    "context": "When using lambda expressions or anonymous methods in C#, we have to be wary of the access to modified closure pitfall. For example:\n\n```csharp\nforeach (var s in strings)\n{\n   query = query.Where(i => i.Prop == s); // access to modified closure\n   ...\n}\n\n```\n\nDue to the modified closure, the above code will cause all of the \n```csharp\nWhere\n```\n clauses on the query to be based on the final value of \n```csharp\ns\n```\n.\nAs explained here, this happens because the \n```csharp\ns\n```\n variable declared in \n```csharp\nforeach\n```\n loop above is translated like this in the compiler:\n\n```csharp\nstring s;\nwhile (enumerator.MoveNext())\n{\n   s = enumerator.Current;\n   ...\n}\n\n```\n\ninstead of like this:\n\n```csharp\nwhile (enumerator.MoveNext())\n{\n   string s;\n   s = enumerator.Current;\n   ...\n}\n\n```\n\nAs pointed out here, there are no performance advantages to declaring a variable outside the loop, and under normal circumstances the only reason I can think of for doing this is if you plan to use the variable outside the scope of the loop:\n\n```csharp\nstring s;\nwhile (enumerator.MoveNext())\n{\n   s = enumerator.Current;\n   ...\n}\nvar finalString = s;\n\n```\n\nHowever variables defined in a \n```csharp\nforeach\n```\n loop cannot be used outside the loop:\n\n```csharp\nforeach(string s in strings)\n{\n}\nvar finalString = s; // won't work: you're outside the scope.\n\n```\n\nSo the compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.\nIs there something you can do with \n```csharp\nforeach\n```\n loops this way that you couldn't if they were compiled with an inner-scoped variable, or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?",
    "output": "The compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.\n\nYour criticism is entirely justified.\nI discuss this problem in detail here:\nClosing over the loop variable considered harmful\n\nIs there something you can do with foreach loops this way that you couldn't if they were compiled with an inner-scoped variable? or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?\n\nThe latter. The C# 1.0 specification actually did not say whether the loop variable was inside or outside the loop body, as it made no observable difference. When closure semantics were introduced in C# 2.0, the choice was made to put the loop variable outside the loop, consistent with the \"for\" loop.\nI think it is fair to say that all regret that decision. This is one of the worst \"gotchas\" in C#, and we are going to take the breaking change to fix it. In C# 5 the foreach loop variable will be logically inside the body of the loop, and therefore closures will get a fresh copy every time.\nThe \n```csharp\nfor\n```\n loop will not be changed, and the change will not be \"back ported\" to previous versions of C#. You should therefore continue to be careful when using this idiom.",
    "score": 1528,
    "tags": [
      "c#",
      "foreach",
      "lambda",
      "scope",
      "anonymous-methods"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:59.366814"
  },
  {
    "instruction": "What is a NullReferenceException, and how do I fix it?",
    "context": "I have some code and when it executes, it throws a \n```csharp\nNullReferenceException\n```\n, saying:\n\nObject reference not set to an instance of an object.\n\nWhat does this mean, and what can I do to fix this error?",
    "output": "What is the cause?\nBottom Line\nYou are trying to use something that is \n```csharp\nnull\n```\n (or \n```csharp\nNothing\n```\n in VB.NET). This means you either set it to \n```csharp\nnull\n```\n, or you never set it to anything at all.\nLike anything else, \n```csharp\nnull\n```\n gets passed around. If it is \n```csharp\nnull\n```\n in method \"A\", it could be that method \"B\" passed a \n```csharp\nnull\n```\n to method \"A\".\n\n```csharp\nnull\n```\n can have different meanings:\n\nObject variables that are uninitialized and hence point to nothing. In this case, if you access members of such objects, it causes a \n```csharp\nNullReferenceException\n```\n.\nThe developer is using \n```csharp\nnull\n```\n intentionally to indicate there is no meaningful value available. Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign \n```csharp\nnull\n```\n to them to indicate there is no value stored in it, for example \n```csharp\nint? a = null;\n```\n (which is a shortcut for \n```csharp\nNullable<int> a = null;\n```\n) where the question mark indicates it is allowed to store \n```csharp\nnull\n```\n in variable \n```csharp\na\n```\n. You can check that either with \n```csharp\nif (a.HasValue) {...}\n```\n or with \n```csharp\nif (a==null) {...}\n```\n. Nullable variables, like \n```csharp\na\n```\n in this example, allow to access the value via \n```csharp\na.Value\n```\n explicitly, or just as normal via \n```csharp\na\n```\n. Note that accessing it via \n```csharp\na.Value\n```\n throws an \n```csharp\nInvalidOperationException\n```\n instead of a \n```csharp\nNullReferenceException\n```\n if \n```csharp\na\n```\n is \n```csharp\nnull\n```\n - you should do the check beforehand, i.e. if you have another non-nullable variable \n```csharp\nint b;\n```\n then you should do assignments like \n```csharp\nif (a.HasValue) { b = a.Value; }\n```\n or shorter \n```csharp\nif (a != null) { b = a; }\n```\n.\n\nThe rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a \n```csharp\nNullReferenceException\n```\n.\nMore Specifically\nThe \n```csharp\nruntime\n```\n throwing a \n```csharp\nNullReferenceException\n```\n always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).\nThis means the reference is \n```csharp\nnull\n```\n, and you cannot access members (such as methods) through a \n```csharp\nnull\n```\n reference. The simplest case:\n\n```csharp\nstring foo = null;\nfoo.ToUpper();\n\n```\n\nThis will throw a \n```csharp\nNullReferenceException\n```\n at the second line because you can't call the instance method \n```csharp\nToUpper()\n```\n on a \n```csharp\nstring\n```\n reference pointing to \n```csharp\nnull\n```\n.\nDebugging\nHow do you find the source of a \n```csharp\nNullReferenceException\n```\n? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.\nIf you want to find out where the reference is or isn't set, right-click its name and select \"Find All References\". You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.\nBy following the program flow this way, you can find the location where the instance should not be null, and why it isn't properly set.\nExamples\nSome common scenarios where the exception can be thrown:\nGeneric\n\n```csharp\nref1.ref2.ref3.member\n\n```\n\nIf ref1 or ref2 or ref3 is null, then you'll get a \n```csharp\nNullReferenceException\n```\n. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:\n\n```csharp\nvar r1 = ref1;\nvar r2 = r1.ref2;\nvar r3 = r2.ref3;\nr3.member\n\n```\n\nSpecifically, in \n```csharp\nHttpContext.Current.User.Identity.Name\n```\n, the \n```csharp\nHttpContext.Current\n```\n could be null, or the \n```csharp\nUser\n```\n property could be null, or the \n```csharp\nIdentity\n```\n property could be null.\nIndirect\n\n```csharp\npublic class Person \n{\n    public int Age { get; set; }\n}\npublic class Book \n{\n    public Person Author { get; set; }\n}\npublic class Example \n{\n    public void Foo() \n    {\n        Book b1 = new Book();\n        int authorAge = b1.Author.Age; // You never initialized the Author property.\n                                       // There is no Person to get an Age from.\n    }\n}\n\n```\n\nIf you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object's constructor.\nNested Object Initializers\nThe same applies to nested object initializers:\n\n```csharp\nBook b1 = new Book \n{ \n   Author = { Age = 45 } \n};\n\n```\n\nThis translates to:\n\n```csharp\nBook b1 = new Book();\nb1.Author.Age = 45;\n\n```\n\nWhile the \n```csharp\nnew\n```\n keyword is used, it only creates a new instance of \n```csharp\nBook\n```\n, but not a new instance of \n```csharp\nPerson\n```\n, so the \n```csharp\nAuthor\n```\n property is still \n```csharp\nnull\n```\n.\nNested Collection Initializers\n\n```csharp\npublic class Person \n{\n    public ICollection<Book> Books { get; set; }\n}\npublic class Book \n{\n    public string Title { get; set; }\n}\n\n```\n\nThe nested collection \n```csharp\nInitializers\n```\n behave the same:\n\n```csharp\nPerson p1 = new Person \n{\n    Books = {\n         new Book { Title = \"Title1\" },\n         new Book { Title = \"Title2\" },\n    }\n};\n\n```\n\nThis translates to:\n\n```csharp\nPerson p1 = new Person();\np1.Books.Add(new Book { Title = \"Title1\" });\np1.Books.Add(new Book { Title = \"Title2\" });\n\n```\n\nThe \n```csharp\nnew Person\n```\n only creates an instance of \n```csharp\nPerson\n```\n, but the \n```csharp\nBooks\n```\n collection is still \n```csharp\nnull\n```\n. The collection \n```csharp\nInitializer\n```\n syntax does not create a collection\nfor \n```csharp\np1.Books\n```\n, it only translates to the \n```csharp\np1.Books.Add(...)\n```\n statements.\nArray\n\n```csharp\nint[] numbers = null;\nint n = numbers[0]; // numbers is null. There is no array to index.\n\n```\n\nArray Elements\n\n```csharp\nPerson[] people = new Person[5];\npeople[0].Age = 20 // people[0] is null. The array was allocated but not\n                   // initialized. There is no Person to set the Age for.\n\n```\n\nJagged Arrays\n\n```csharp\nlong[][] array = new long[1][];\narray[0][0] = 3; // is null because only the first dimension is yet initialized.\n                 // Use array[0] = new long[2]; first.\n\n```\n\nCollection/List/Dictionary\n\n```csharp\nDictionary<string, int> agesForNames = null;\nint age = agesForNames[\"Bob\"]; // agesForNames is null.\n                               // There is no Dictionary to perform the lookup.\n\n```\n\nRange Variable (Indirect/Deferred)\n\n```csharp\npublic class Person \n{\n    public string Name { get; set; }\n}\nvar people = new List<Person>();\npeople.Add(null);\nvar names = from p in people select p.Name;\nstring firstName = names.First(); // Exception is thrown here, but actually occurs\n                                  // on the line above.  \"p\" is null because the\n                                  // first element we added to the list is null.\n\n```\n\nEvents (C#)\n\n```csharp\npublic class Demo\n{\n    public event EventHandler StateChanged;\n    \n    protected virtual void OnStateChanged(EventArgs e)\n    {        \n        StateChanged(this, e); // Exception is thrown here \n                               // if no event handlers have been attached\n                               // to StateChanged event\n    }\n}\n\n```\n\n(Note: The VB.NET compiler inserts null checks for event usage, so it's not necessary to check events for \n```csharp\nNothing\n```\n in VB.NET.)\nBad Naming Conventions:\nIf you named fields differently from locals, you might have realized that you never initialized the field.\n\n```csharp\npublic class Form1\n{\n    private Customer customer;\n    \n    private void Form1_Load(object sender, EventArgs e) \n    {\n        Customer customer = new Customer();\n        customer.Name = \"John\";\n    }\n    \n    private void Button_Click(object sender, EventArgs e)\n    {\n        MessageBox.Show(customer.Name);\n    }\n}\n\n```\n\nThis can be solved by following the convention to prefix fields with an underscore:\n\n```csharp\n    private Customer _customer;\n\n```\n\nASP.NET Page Life cycle:\n\n```csharp\npublic partial class Issues_Edit : System.Web.UI.Page\n{\n    protected TestIssue myIssue;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n             // Only called on first load, not when button clicked\n             myIssue = new TestIssue(); \n        }\n    }\n        \n    protected void SaveButton_Click(object sender, EventArgs e)\n    {\n        myIssue.Entry = \"NullReferenceException here!\";\n    }\n}\n\n```\n\nASP.NET Session Values\n\n```csharp\n// if the \"FirstName\" session value has not yet been set,\n// then this line will throw a NullReferenceException\nstring firstName = Session[\"FirstName\"].ToString();\n\n```\n\nASP.NET MVC empty view models\nIf the exception occurs when referencing a property of \n```csharp\n@Model\n```\n in an \n```csharp\nASP.NET MVC View\n```\n, you need to understand that the \n```csharp\nModel\n```\n gets set in your action method, when you \n```csharp\nreturn\n```\n a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:\n\n```csharp\n// Controller\npublic class Restaurant:Controller\n{\n    public ActionResult Search()\n    {\n        return View();  // Forgot the provide a Model here.\n    }\n}\n\n// Razor view \n@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.\n{\n}\n    \n<p>@Model.somePropertyName</p> <!-- Also throws -->\n\n```\n\nWPF Control Creation Order and Events\n\n```csharp\nWPF\n```\n controls are created during the call to \n```csharp\nInitializeComponent\n```\n in the order they appear in the visual tree.  A \n```csharp\nNullReferenceException\n```\n will be raised in the case of early-created controls with event handlers, etc., that fire during \n```csharp\nInitializeComponent\n```\n which reference late-created controls.\nFor example:\n\n```csharp\n<Grid>\n    <!-- Combobox declared first -->\n    <ComboBox Name=\"comboBox1\" \n              Margin=\"10\"\n              SelectedIndex=\"0\" \n              SelectionChanged=\"comboBox1_SelectionChanged\">\n       <ComboBoxItem Content=\"Item 1\" />\n       <ComboBoxItem Content=\"Item 2\" />\n       <ComboBoxItem Content=\"Item 3\" />\n    </ComboBox>\n        \n    <!-- Label declared later -->\n    <Label Name=\"label1\" \n           Content=\"Label\"\n           Margin=\"10\" />\n</Grid>\n\n```\n\nHere \n```csharp\ncomboBox1\n```\n is created before \n```csharp\nlabel1\n```\n. If \n```csharp\ncomboBox1_SelectionChanged\n```\n attempts to reference \n```csharp\nlabel1\n```\n, it will not yet have been created.\n\n```csharp\nprivate void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReferenceException here!!\n}\n\n```\n\nChanging the order of the declarations in the \n```csharp\nXAML\n```\n (i.e., listing \n```csharp\nlabel1\n```\n before \n```csharp\ncomboBox1\n```\n, ignoring issues of design philosophy) would at least resolve the \n```csharp\nNullReferenceException\n```\n here.\nCast with \n```csharp\nas\n```\n\n\n```csharp\nvar myThing = someObject as Thing;\n\n```\n\nThis doesn't throw an \n```csharp\nInvalidCastException\n```\n but returns a \n```csharp\nnull\n```\n when the cast fails (and when \n```csharp\nsomeObject\n```\n is itself null). So be aware of that.\nLINQ \n```csharp\nFirstOrDefault()\n```\n and \n```csharp\nSingleOrDefault()\n```\n\nThe plain versions \n```csharp\nFirst()\n```\n and \n```csharp\nSingle()\n```\n throw exceptions when there is nothing. The \"OrDefault\" versions return \n```csharp\nnull\n```\n in that case. So be aware of that.\nforeach\n\n```csharp\nforeach\n```\n throws when you try to iterate on a \n```csharp\nnull\n```\n collection. Usually caused by unexpected \n```csharp\nnull\n```\n result from methods that return collections.\n\n```csharp\nList<int> list = null;    \nforeach(var v in list) { } // NullReferenceException here\n\n```\n\nMore realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:\n\n```csharp\nforeach (var node in myData.MyXml.DocumentNode.SelectNodes(\"//Data\"))\n\n```\n\n\nWays to Avoid\nExplicitly check for \n```csharp\nnull\n```\n and ignore \n```csharp\nnull\n```\n values.\nIf you expect the reference sometimes to be \n```csharp\nnull\n```\n, you can check for it being \n```csharp\nnull\n```\n before accessing instance members:\n\n```csharp\nvoid PrintName(Person p)\n{\n    if (p != null) \n    {\n        Console.WriteLine(p.Name);\n    }\n}\n\n```\n\nExplicitly check for \n```csharp\nnull\n```\n and provide a default value.\nMethods you call expecting an instance can return \n```csharp\nnull\n```\n, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:\n\n```csharp\nstring GetCategory(Book b) \n{\n    if (b == null)\n        return \"Unknown\";\n    return b.Category;\n}\n\n```\n\nExplicitly check for \n```csharp\nnull\n```\n from method calls and throw a custom exception.\nYou can also throw a custom exception, only to catch it in the calling code:\n\n```csharp\nstring GetCategory(string bookTitle) \n{\n    var book = library.FindBook(bookTitle);  // This may return null\n    if (book == null)\n        throw new BookNotFoundException(bookTitle);  // Your custom exception\n    return book.Category;\n}\n\n```\n\nUse \n```csharp\nDebug.Assert\n```\n if a value should never be \n```csharp\nnull\n```\n, to catch the problem earlier than the exception occurs.\nWhen you know during development that a method could, but never should return \n```csharp\nnull\n```\n, you can use \n```csharp\nDebug.Assert()\n```\n to break as soon as possible when it does occur:\n\n```csharp\nstring GetTitle(int knownBookID) \n{\n    // You know this should never return null.\n    var book = library.GetBook(knownBookID);  \n\n    // Exception will occur on the next line instead of at the end of this method.\n    Debug.Assert(book != null, \"Library didn't return a book for known book ID.\");\n\n    // Some other code\n\n    return book.Title; // Will never throw NullReferenceException in Debug mode.\n}\n\n```\n\nThough this check will not end up in your release build, causing it to throw the \n```csharp\nNullReferenceException\n```\n again when \n```csharp\nbook == null\n```\n at runtime in release mode.\nUse \n```csharp\nGetValueOrDefault()\n```\n for \n```csharp\nnullable\n```\n value types to provide a default value when they are \n```csharp\nnull\n```\n.\n\n```csharp\nDateTime? appointment = null;\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the default value provided (DateTime.Now), because appointment is null.\n\nappointment = new DateTime(2022, 10, 20);\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the appointment date, not the default\n\n```\n\nUse the null coalescing operator: \n```csharp\n??\n```\n [C#] or \n```csharp\nIf()\n```\n [VB].\nThe shorthand to providing a default value when a \n```csharp\nnull\n```\n is encountered:\n\n```csharp\nIService CreateService(ILogger log, Int32? frobPowerLevel)\n{\n   var serviceImpl = new MyService(log ?? NullLog.Instance);\n \n   // Note that the above \"GetValueOrDefault()\" can also be rewritten to use\n   // the coalesce operator:\n   serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;\n}\n\n```\n\nUse the null condition operator: \n```csharp\n?.\n```\n or \n```csharp\n?[x]\n```\n for arrays (available in C# 6 and VB.NET 14):\nThis is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:\n\n```csharp\nvar title = person.Title.ToUpper();\n\n```\n\nIf the person does not have a title, this will throw an exception because it is trying to call \n```csharp\nToUpper\n```\n on a property with a null value.\nIn \n```csharp\nC# 5\n```\n and below, this can be guarded with:\n\n```csharp\nvar title = person.Title == null ? null : person.Title.ToUpper();\n\n```\n\nNow the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:\n\n```csharp\nvar title = person.Title?.ToUpper();\n\n```\n\nThis will result in the title variable being \n```csharp\nnull\n```\n, and the call to \n```csharp\nToUpper\n```\n is not made if \n```csharp\nperson.Title\n```\n is \n```csharp\nnull\n```\n.\nOf course, you still have to check \n```csharp\ntitle\n```\n for \n```csharp\nnull\n```\n or use the null condition operator together with the null coalescing operator (\n```csharp\n??\n```\n) to supply a default value:\n\n```csharp\n// regular null check\nint titleLength = 0;\nif (title != null)\n    titleLength = title.Length; // If title is null, this would throw NullReferenceException\n    \n// combining the `?` and the `??` operator\nint titleLength = title?.Length ?? 0;\n\n```\n\nLikewise, for arrays you can use \n```csharp\n?[i]\n```\n as follows:\n\n```csharp\nint[] myIntArray = null;\nvar i = 5;\nint? elem = myIntArray?[i];\nif (!elem.HasValue) Console.WriteLine(\"No value\");\n\n```\n\nThis will do the following: If \n```csharp\nmyIntArray\n```\n is \n```csharp\nnull\n```\n, the expression returns \n```csharp\nnull\n```\n and you can safely check it. If it contains an array, it will do the same as:\n\n```csharp\nelem = myIntArray[i];\n```\n and returns the ith element.\nUse null context (available in C# 8):\nIntroduced in \n```csharp\nC# 8\n```\n, null contexts and nullable reference types perform static analysis on variables and provide a compiler warning if a value can be potentially \n```csharp\nnull\n```\n or have been set to \n```csharp\nnull\n```\n. The nullable reference types allow types to be explicitly allowed to be \n```csharp\nnull\n```\n.\nThe nullable annotation context and nullable warning context can be set for a project using the \n```csharp\nNullable\n```\n element in your \n```csharp\ncsproj\n```\n file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:\n\n\n```csharp\nenable\n```\n: The nullable annotation context is enabled. The nullable warning context is enabled. Variables of a reference type, string, for example, are non-nullable. All nullability warnings are enabled.\n\n```csharp\ndisable\n```\n: The nullable annotation context is disabled. The nullable warning context is disabled. Variables of a reference type are oblivious, just like earlier versions of C#. All nullability warnings are disabled.\n\n```csharp\nsafeonly\n```\n: The nullable annotation context is enabled. The nullable warning context is safeonly. Variables of a reference type are non-nullable. All safety nullability warnings are enabled.\n\n```csharp\nwarnings\n```\n: The nullable annotation context is disabled. The nullable warning context is enabled. Variables of a reference type are oblivious. All nullability warnings are enabled.\n\n```csharp\nsafeonlywarnings\n```\n: The nullable annotation context is disabled. The nullable warning context is safeonly.\nVariables of a reference type are oblivious. All safety nullability warnings are enabled.\n\nA nullable reference type is noted using the same syntax as nullable value types: a \n```csharp\n?\n```\n is appended to the type of the variable.\nSpecial techniques for debugging and fixing null derefs in iterators\n\n```csharp\nC#\n```\n supports \"iterator blocks\" (called \"generators\" in some other popular languages). \n```csharp\nNullReferenceException\n```\n can be particularly tricky to debug in iterator blocks because of deferred execution:\n\n```csharp\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n    for (int i = 0; i < count; ++i)\n    yield return f.MakeFrob();\n}\n...\nFrobFactory factory = whatever;\nIEnumerable<Frobs> frobs = GetFrobs();\n...\nforeach(Frob frob in frobs) { ... }\n\n```\n\nIf \n```csharp\nwhatever\n```\n results in \n```csharp\nnull\n```\n then \n```csharp\nMakeFrob\n```\n will throw. Now, you might think that the right thing to do is this:\n\n```csharp\n// DON'T DO THIS\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n   if (f == null) \n      throw new ArgumentNullException(\"f\", \"factory must not be null\");\n   for (int i = 0; i < count; ++i)\n      yield return f.MakeFrob();\n}\n\n```\n\nWhy is this wrong?  Because the iterator block does not actually run until the \n```csharp\nforeach\n```\n!  The call to \n```csharp\nGetFrobs\n```\n simply returns an object which when iterated will run the iterator block.\nBy writing a \n```csharp\nnull\n```\n check like this you prevent the \n```csharp\nNullReferenceException\n```\n, but you move the \n```csharp\nNullArgumentException\n```\n to the point of the iteration, not to the point of the call, and that is very confusing to debug.\nThe correct fix is:\n\n```csharp\n// DO THIS\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n   // No yields in a public method that throws!\n   if (f == null) \n       throw new ArgumentNullException(\"f\", \"factory must not be null\");\n   return GetFrobsForReal(f, count);\n}\nprivate IEnumerable<Frob> GetFrobsForReal(FrobFactory f, int count)\n{\n   // Yields in a private method\n   Debug.Assert(f != null);\n   for (int i = 0; i < count; ++i)\n        yield return f.MakeFrob();\n}\n\n```\n\nThat is, make a private helper method that has the iterator block logic and a public surface method that does the \n```csharp\nnull\n```\n check and returns the iterator. Now when \n```csharp\nGetFrobs\n```\n is called, the \n```csharp\nnull\n```\n check happens immediately, and then \n```csharp\nGetFrobsForReal\n```\n executes when the sequence is iterated.\nIf you examine the reference source for \n```csharp\nLINQ\n```\n to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier. Optimize your code for the convenience of the caller, not the convenience of the author.\nA note on null dereferences in unsafe code\n\n```csharp\nC#\n```\n has an \"unsafe\" mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works.\nIn unsafe mode, you should be aware of two important facts:\n\ndereferencing a null pointer produces the same exception as dereferencing a null reference\ndereferencing an invalid non-null pointer can produce that exception in some circumstances\n\nTo understand why that is, it helps to understand how .NET produces \n```csharp\nNullReferenceException\n```\n in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)\nMemory is virtualized in \n```csharp\nWindows\n```\n; each process gets a virtual memory space of many \"pages\" of memory that are tracked by the operating system. Each page of memory has flags set on it that determine how it may be used: read from, written to, executed, and so on. The lowest page is marked as \"produce an error if ever used in any way\".\nBoth a null pointer and a null reference in \n```csharp\nC#\n```\n are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the \n```csharp\nNullReferenceException\n```\n.\nThat's why dereferencing both a null pointer and a null reference produces the same exception.\nWhat about the second point? Dereferencing any invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.\nWhy does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the \n```csharp\nCLR\n```\n will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address via the null.\nIf you are working with unsafe code and you get a \n```csharp\nNullReferenceException\n```\n, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.",
    "score": 2739,
    "tags": [
      "c#",
      ".net",
      "vb.net",
      "null",
      "nullreferenceexception"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:59.667939"
  },
  {
    "instruction": "What does the [Flags] Enum Attribute mean in C#?",
    "context": "From time to time I see an enum like the following:\n\n```csharp\n[Flags]\npublic enum Options \n{\n    None    = 0,\n    Option1 = 1,\n    Option2 = 2,\n    Option3 = 4,\n    Option4 = 8\n}\n\n```\n\nI don't understand what exactly the \n```csharp\n[Flags]\n```\n attribute does.\nAnyone have a good explanation or example they could post?",
    "output": "The \n```csharp\n[Flags]\n```\n attribute should be used whenever the enumerable represents a collection of possible values, rather than a single value. Such collections are often used with bitwise operators, for example:\n\n```csharp\nvar allowedColors = MyColor.Red | MyColor.Green | MyColor.Blue;\n\n```\n\nNote that the \n```csharp\n[Flags]\n```\n attribute doesn't enable this by itself - all it does is allow a nice representation by the \n```csharp\n.ToString()\n```\n method:\n\n```csharp\nenum Suits { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }\n[Flags] enum SuitsFlags { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }\n\n...\n\nvar str1 = (Suits.Spades | Suits.Diamonds).ToString();\n           // \"5\"\nvar str2 = (SuitsFlags.Spades | SuitsFlags.Diamonds).ToString();\n           // \"Spades, Diamonds\"\n\n```\n\nIt is also important to note that \n```csharp\n[Flags]\n```\n does not automatically make the enum values powers of two. If you omit the numeric values, the enum will not work as one might expect in bitwise operations, because by default the values start with 0 and increment. \nIncorrect declaration:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    Yellow,  // 0\n    Green,   // 1\n    Red,     // 2\n    Blue     // 3\n}\n\n```\n\nThe values, if declared this way, will be Yellow = 0, Green = 1, Red = 2, Blue = 3. This will render it useless as flags.\nHere's an example of a correct declaration:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    Yellow = 1,\n    Green = 2,\n    Red = 4,\n    Blue = 8\n}\n\n```\n\nTo retrieve the distinct values in your property, one can do this:\n\n```csharp\nif (myProperties.AllowedColors.HasFlag(MyColor.Yellow))\n{\n    // Yellow is allowed...\n}\n\n```\n\nor prior to .NET 4:\n\n```csharp\nif((myProperties.AllowedColors & MyColor.Yellow) == MyColor.Yellow)\n{\n    // Yellow is allowed...\n}\n\nif((myProperties.AllowedColors & MyColor.Green) == MyColor.Green)\n{\n    // Green is allowed...\n}    \n\n```\n\nUnder the covers\nThis works because you used powers of two in your enumeration. Under the covers, your enumeration values look like this in binary ones and zeros:\n\n```csharp\n Yellow: 00000001\n Green:  00000010\n Red:    00000100\n Blue:   00001000\n\n```\n\nSimilarly, after you've set your property AllowedColors to Red, Green and Blue using the binary bitwise OR \n```csharp\n|\n```\n operator, AllowedColors looks like this:\n\n```csharp\nmyProperties.AllowedColors: 00001110\n\n```\n\nSo when you retrieve the value you are actually performing bitwise AND \n```csharp\n&\n```\n on the values:\n\n```csharp\nmyProperties.AllowedColors: 00001110\n             MyColor.Green: 00000010\n             -----------------------\n                            00000010 // Hey, this is the same as MyColor.Green!\n\n```\n\nThe None = 0 value\nAnd regarding the use of \n```csharp\n0\n```\n in your enumeration, quoting from MSDN:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    None = 0,\n    ....\n}\n\n```\n\n\nUse None as the name of the flag enumerated constant whose value is zero. You cannot use the None enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the None enumerated constant to determine whether any bits in the numeric value are set. \n\nYou can find more info about the flags attribute and its usage at msdn and designing flags at msdn",
    "score": 2591,
    "tags": [
      "c#",
      "enums",
      "flags"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:15:59.963807"
  },
  {
    "instruction": "How to loop through all enum values in C#?",
    "context": "```csharp\npublic enum Foos\n{\n    A,\n    B,\n    C\n}\n\n```\n\nIs there a way to loop through the possible values of \n```csharp\nFoos\n```\n?\nBasically?\n\n```csharp\nforeach(Foo in Foos)\n\n```",
    "output": "Yes you can use the ‍\n```csharp\nGetValue‍‍‍s\n```\n method:\n\n```csharp\nvar values = Enum.GetValues(typeof(Foos));\n\n```\n\nOr the typed version:\n\n```csharp\nvar values = Enum.GetValues(typeof(Foos)).Cast<Foos>();\n\n```\n\nI long ago added a helper function to my private library for just such an occasion:\n\n```csharp\npublic static class EnumUtil {\n    public static IEnumerable<T> GetValues<T>() {\n        return Enum.GetValues(typeof(T)).Cast<T>();\n    }\n}\n\n```\n\nUsage:\n\n```csharp\nvar values = EnumUtil.GetValues<Foos>();\n\n```",
    "score": 2531,
    "tags": [
      "c#",
      ".net",
      "enums",
      "language-features"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:00.235847"
  },
  {
    "instruction": "Why not inherit from List<T>?",
    "context": "When planning out my programs, I often start with a chain of thought like so:\n\nA football team is just a list of football players. Therefore, I should represent it with:\n\n```csharp\nvar football_team = new List<FootballPlayer>();\n\n```\n\nThe ordering of this list represent the order in which the players are listed in the roster.\n\nBut I realize later that teams also have other properties, besides the mere list of players, that must be recorded. For example, the running total of scores this season, the current budget, the uniform colors, a \n```csharp\nstring\n```\n representing the name of the team, etc..\nSo then I think:\n\nOkay, a football team is just like a list of players, but additionally, it has a name (a \n```csharp\nstring\n```\n) and a running total of scores (an \n```csharp\nint\n```\n). .NET does not provide a class for storing football teams, so I will make my own class. The most similar and relevant existing structure is \n```csharp\nList<FootballPlayer>\n```\n, so I will inherit from it:\n\n```csharp\nclass FootballTeam : List<FootballPlayer> \n{ \n    public string TeamName; \n    public int RunningTotal \n}\n\n```\n\n\nBut it turns out that a guideline says you shouldn't inherit from \n```csharp\nList<T>\n```\n. I'm thoroughly confused by this guideline in two respects.\nWhy not?\nApparently \n```csharp\nList\n```\n is somehow optimized for performance. How so? What performance problems will I cause if I extend \n```csharp\nList\n```\n? What exactly will break?\nAnother reason I've seen is that \n```csharp\nList\n```\n is provided by Microsoft, and I have no control over it, so I cannot change it later, after exposing a \"public API\". But I struggle to understand this. What is a public API and why should I care? If my current project does not and is not likely to ever have this public API, can I safely ignore this guideline? If I do inherit from \n```csharp\nList\n```\n and it turns out I need a public API, what difficulties will I have?\nWhy does it even matter? A list is a list. What could possibly change? What could I possibly want to change?\nAnd lastly, if Microsoft did not want me to inherit from \n```csharp\nList\n```\n, why didn't they make the class \n```csharp\nsealed\n```\n?\nWhat else am I supposed to use?\nApparently, for custom collections, Microsoft has provided a \n```csharp\nCollection\n```\n class which should be extended instead of \n```csharp\nList\n```\n. But this class is very bare, and does not have many useful things, such as \n```csharp\nAddRange\n```\n, for instance. jvitor83's answer provides a performance rationale for that particular method, but how is a slow \n```csharp\nAddRange\n```\n not better than no \n```csharp\nAddRange\n```\n?\nInheriting from \n```csharp\nCollection\n```\n is way more work than inheriting from \n```csharp\nList\n```\n, and I see no benefit. Surely Microsoft wouldn't tell me to do extra work for no reason, so I can't help feeling like I am somehow misunderstanding something, and inheriting \n```csharp\nCollection\n```\n is actually not the right solution for my problem.\nI've seen suggestions such as implementing \n```csharp\nIList\n```\n. Just no. This is dozens of lines of boilerplate code which gains me nothing.\nLastly, some suggest wrapping the \n```csharp\nList\n```\n in something: \n\n```csharp\nclass FootballTeam \n{ \n    public List<FootballPlayer> Players; \n}\n\n```\n\nThere are two problems with this:\n\nIt makes my code needlessly verbose. I must now call \n```csharp\nmy_team.Players.Count\n```\n instead of just \n```csharp\nmy_team.Count\n```\n. Thankfully, with C# I can define indexers to make indexing transparent, and forward all the methods of the internal \n```csharp\nList\n```\n... But that's a lot of code! What do I get for all that work?\nIt just plain doesn't make any sense. A football team doesn't \"have\" a list of players. It is the list of players. You don't say \"John McFootballer has joined SomeTeam's players\". You say \"John has joined SomeTeam\". You don't add a letter to \"a string's characters\", you add a letter to a string. You don't add a book to a library's books, you add a book to a library.\n\nI realize that what happens \"under the hood\" can be said to be \"adding X to Y's internal list\", but this seems like a very counter-intuitive way of thinking about the world.\nMy question (summarized)\nWhat is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a \n```csharp\nlist\n```\n of \n```csharp\nthings\n```\n with a few bells and whistles?\nIs inheriting from \n```csharp\nList<T>\n```\n always unacceptable? When is it acceptable? Why/why not? What must a programmer consider, when deciding whether to inherit from \n```csharp\nList<T>\n```\n or not?",
    "output": "There are some good answers here. I would add to them the following points.\n\nWhat is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a list of things with a few bells and whistles?\n\nAsk any ten non-computer-programmer people who are familiar with the existence of football to fill in the blank:\n\nA football team is a particular kind of _____\n\nDid anyone say \"list of football players with a few bells and whistles\", or did they all say \"sports team\" or \"club\" or \"organization\"?  Your notion that a football team is a particular kind of list of players is in your human mind and your human mind alone.\n\n```csharp\nList<T>\n```\n is a mechanism.  Football team is a business object -- that is, an object that represents some concept that is in the business domain of the program. Don't mix those! A football team is a kind of team; it has a roster, a roster is a list of players. A roster is not a particular kind of list of players. A roster is a list of players. So make a property called \n```csharp\nRoster\n```\n that is a \n```csharp\nList<Player>\n```\n. And make it \n```csharp\nReadOnlyList<Player>\n```\n while you're at it, unless you believe that everyone who knows about a football team gets to delete players from the roster.\n\nIs inheriting from \n```csharp\nList<T>\n```\n always unacceptable?\n\nUnacceptable to whom? Me? No.\n\nWhen is it acceptable?\n\nWhen you're building a mechanism that extends the \n```csharp\nList<T>\n```\n mechanism.\n\nWhat must a programmer consider, when deciding whether to inherit from \n```csharp\nList<T>\n```\n or not?\n\nAm I building a mechanism or a business object?\n\nBut that's a lot of code! What do I get for all that work?\n\nYou spent more time typing up your question that it would have taken you to write forwarding methods for the relevant members of \n```csharp\nList<T>\n```\n fifty times over. You're clearly not afraid of verbosity, and we are talking about a very small amount of code here; this is a few minutes work.\nUPDATE\nI gave it some more thought and there is another reason to not model a football team as a list of players. In fact it might be a bad idea to model a football team as having a list of players too. The problem with a team as/having a list of players is that what you've got is a snapshot of the team at a moment in time. I don't know what your business case is for this class, but if I had a class that represented a football team I would want to ask it questions like \"how many Seahawks players missed games due to injury between 2003 and 2013?\" or \"What Denver player who previously played for another team had the largest year-over-year increase in yards ran?\" or \"Did the Piggers go all the way this year?\"\nThat is, a football team seems to me to be well modeled as a collection of historical facts such as when a player was recruited, injured, retired, etc. Obviously the current player roster is an important fact that should probably be front-and-center, but there may be other interesting things you want to do with this object that require a more historical perspective.",
    "score": 1848,
    "tags": [
      "c#",
      ".net",
      "list",
      "oop",
      "inheritance"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:00.540090"
  },
  {
    "instruction": "What is the difference between const and readonly in C#?",
    "context": "What is the difference between \n```csharp\nconst\n```\n and \n```csharp\nreadonly\n```\n in C#? \nWhen would you use one over the other?",
    "output": "Apart from the apparent difference of\n\nhaving to declare the value at the time of a definition for a \n```csharp\nconst\n```\n VS \n```csharp\nreadonly\n```\n values can be computed dynamically but need to be assigned before the constructor exits. After that it is frozen.\n\n```csharp\nconst\n```\n's are implicitly \n```csharp\nstatic\n```\n. You use a \n```csharp\nClassName.ConstantName\n```\n notation to access them.\n\nThere is a subtle difference. Consider a class defined in \n```csharp\nAssemblyA\n```\n.\n\n```csharp\npublic class Const_V_Readonly\n{\n  public const int I_CONST_VALUE = 2;\n  public readonly int I_RO_VALUE;\n  public Const_V_Readonly()\n  {\n     I_RO_VALUE = 3;\n  }\n}\n\n```\n\n\n```csharp\nAssemblyB\n```\n references \n```csharp\nAssemblyA\n```\n and uses these values in code. When this is compiled:\n\nin the case of the \n```csharp\nconst\n```\n value, it is like a find-replace.  The value 2 is 'baked into' the \n```csharp\nAssemblyB\n```\n's IL. This means that if tomorrow I update \n```csharp\nI_CONST_VALUE\n```\n to 20, \n```csharp\nAssemblyB\n```\n would still have 2 till I recompile it.\nin the case of the \n```csharp\nreadonly\n```\n value, it is like a \n```csharp\nref\n```\n to a memory location. The value is not baked into \n```csharp\nAssemblyB\n```\n's IL. This means that if the memory location is updated, \n```csharp\nAssemblyB\n```\n gets the new value without recompilation. So if \n```csharp\nI_RO_VALUE\n```\n is updated to 30, you only need to build \n```csharp\nAssemblyA\n```\n and all clients do not need to be recompiled.\n\nSo if you are confident that the value of the constant won't change, use a \n```csharp\nconst\n```\n.\n\n```csharp\npublic const int CM_IN_A_METER = 100;\n\n```\n\nBut if you have a constant that may change (e.g. w.r.t. precision) or when in doubt, use a \n```csharp\nreadonly\n```\n.\n\n```csharp\npublic readonly float PI = 3.14;\n\n```\n\nUpdate: Aku needs to get a mention because he pointed this out first. Also I need to plug where I learned this: Effective C# - Bill Wagner",
    "score": 1578,
    "tags": [
      "c#",
      ".net",
      "constants",
      "readonly"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:00.815325"
  },
  {
    "instruction": "How to Sort a List<T> by a property in the object",
    "context": "I have a class called \n```csharp\nOrder\n```\n which has properties such as \n```csharp\nOrderId\n```\n, \n```csharp\nOrderDate\n```\n, \n```csharp\nQuantity\n```\n, and \n```csharp\nTotal\n```\n. I have a list of this \n```csharp\nOrder\n```\n class:\n\n```csharp\nList<Order> objListOrder = new List<Order>();\nGetOrderList(objListOrder); // fill list of orders\n\n```\n\nI want to sort the list based on one property of the \n```csharp\nOrder\n```\n object; for example, either by \n```csharp\nOrderDate\n```\n or \n```csharp\nOrderID\n```\n.\nHow can I do this in C#?",
    "output": "The easiest way I can think of is to use Linq:\n\n```csharp\nList<Order> SortedList = objListOrder.OrderBy(o=>o.OrderDate).ToList();\n\n```",
    "score": 2340,
    "tags": [
      "c#",
      "generics",
      "list",
      "sorting"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:01.062559"
  },
  {
    "instruction": "Why is it important to override GetHashCode when Equals method is overridden?",
    "context": "Given the following class\n\n```csharp\npublic class Foo\n{\n    public int FooId { get; set; }\n    public string FooName { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        Foo fooItem = obj as Foo;\n\n        if (fooItem == null) \n        {\n           return false;\n        }\n\n        return fooItem.FooId == this.FooId;\n    }\n\n    public override int GetHashCode()\n    {\n        // Which is preferred?\n\n        return base.GetHashCode();\n\n        //return this.FooId.GetHashCode();\n    }\n}\n\n```\n\nI have overridden the \n```csharp\nEquals\n```\n method because \n```csharp\nFoo\n```\n represent a row for the \n```csharp\nFoo\n```\ns table.  Which is the preferred method for overriding the \n```csharp\nGetHashCode\n```\n?\nWhy is it important to override \n```csharp\nGetHashCode\n```\n?",
    "output": "Yes, it is important if your item will be used as a key in a dictionary, or \n```csharp\nHashSet<T>\n```\n, etc - since this is used (in the absence of a custom \n```csharp\nIEqualityComparer<T>\n```\n) to group items into buckets. If the hash-code for two items does not match, they may never be considered equal (Equals will simply never be called).\nThe GetHashCode() method should reflect the \n```csharp\nEquals\n```\n logic; the rules are:\n\nif two things are equal (\n```csharp\nEquals(...) == true\n```\n) then they must return the same value for \n```csharp\nGetHashCode()\n```\n\nif the \n```csharp\nGetHashCode()\n```\n is equal, it is not necessary for them to be the same; this is a collision, and \n```csharp\nEquals\n```\n will be called to see if it is a real equality or not.\n\nIn this case, it looks like \"\n```csharp\nreturn FooId;\n```\n\" is a suitable \n```csharp\nGetHashCode()\n```\n implementation. If you are testing multiple properties, it is common to combine them using code like below, to reduce diagonal collisions (i.e. so that \n```csharp\nnew Foo(3,5)\n```\n has a different hash-code to \n```csharp\nnew Foo(5,3)\n```\n):\nIn modern frameworks, the \n```csharp\nHashCode\n```\n type has methods to help you create a hashcode from multiple values; on older frameworks, you'd need to go without, so something like:\n\n```csharp\nunchecked // only needed if you're compiling with arithmetic checks enabled\n{ // (the default compiler behaviour is *disabled*, so most folks won't need this)\n    int hash = 13;\n    hash = (hash * 7) + field1.GetHashCode();\n    hash = (hash * 7) + field2.GetHashCode();\n    ...\n    return hash;\n}\n\n```\n\nOh - for convenience, you might also consider providing \n```csharp\n==\n```\n and \n```csharp\n!=\n```\n operators when overriding \n```csharp\nEquals\n```\n and \n```csharp\nGetHashCode\n```\n.\n\nA demonstration of what happens when you get this wrong is here.",
    "score": 1492,
    "tags": [
      "c#",
      "overriding",
      "hashcode"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:01.329904"
  },
  {
    "instruction": "How do you convert a byte array to a hexadecimal string, and vice versa?",
    "context": "How can you convert a byte array to a hexadecimal string and vice versa?",
    "output": "You can use \n```csharp\nConvert.ToHexString\n```\n starting with .NET 5. \nThere's also a method for the reverse operation: \n```csharp\nConvert.FromHexString\n```\n.\n\nFor older versions of .NET you can either use:\n\n```csharp\npublic static string ByteArrayToString(byte[] ba)\n{\n  StringBuilder hex = new StringBuilder(ba.Length * 2);\n  foreach (byte b in ba)\n    hex.AppendFormat(\"{0:x2}\", b);\n  return hex.ToString();\n}\n\n```\n\nor:\n\n```csharp\npublic static string ByteArrayToString(byte[] ba)\n{\n  return BitConverter.ToString(ba).Replace(\"-\",\"\");\n}\n\n```\n\nThere are even more variants of doing it, for example here.\nThe reverse conversion would go like this:\n\n```csharp\npublic static byte[] StringToByteArray(String hex)\n{\n  int NumberChars = hex.Length;\n  byte[] bytes = new byte[NumberChars / 2];\n  for (int i = 0; i < NumberChars; i += 2)\n    bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);\n  return bytes;\n}\n\n```\n\n\nUsing \n```csharp\nSubstring\n```\n is the best option in combination with \n```csharp\nConvert.ToByte\n```\n. See this answer for more information. If you need better performance, you must avoid \n```csharp\nConvert.ToByte\n```\n before you can drop \n```csharp\nSubString\n```\n.",
    "score": 1739,
    "tags": [
      "c#",
      "arrays",
      "hex"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:01.633567"
  },
  {
    "instruction": "Calculate relative time in C#",
    "context": "Given a specific \n```csharp\nDateTime\n```\n value, how do I display relative time, like:\n\n\n```csharp\n2 hours ago\n```\n\n\n```csharp\n3 days ago\n```\n\n\n```csharp\na month ago\n```",
    "output": "Jeff, your code is nice but could be clearer with constants (as suggested in Code Complete).\n\n```csharp\nconst int SECOND = 1;\nconst int MINUTE = 60 * SECOND;\nconst int HOUR = 60 * MINUTE;\nconst int DAY = 24 * HOUR;\nconst int MONTH = 30 * DAY;\n\nvar ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);\ndouble delta = Math.Abs(ts.TotalSeconds);\n\nif (delta < 1 * MINUTE)\n  return ts.Seconds == 1 ? \"one second ago\" : ts.Seconds + \" seconds ago\";\n\nif (delta < 2 * MINUTE)\n  return \"a minute ago\";\n\nif (delta < 45 * MINUTE)\n  return ts.Minutes + \" minutes ago\";\n\nif (delta < 90 * MINUTE)\n  return \"an hour ago\";\n\nif (delta < 24 * HOUR)\n  return ts.Hours + \" hours ago\";\n\nif (delta < 48 * HOUR)\n  return \"yesterday\";\n\nif (delta < 30 * DAY)\n  return ts.Days + \" days ago\";\n\nif (delta < 12 * MONTH)\n{\n  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));\n  return months <= 1 ? \"one month ago\" : months + \" months ago\";\n}\nelse\n{\n  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));\n  return years <= 1 ? \"one year ago\" : years + \" years ago\";\n}\n\n```",
    "score": 1071,
    "tags": [
      "c#",
      "datetime",
      "time",
      "datediff",
      "relative-time-span"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:01.923609"
  },
  {
    "instruction": "When should I use a struct rather than a class in C#?",
    "context": "When should you use struct and not class in C#? My conceptual model is that structs are used in times when the item is merely a collection of value types.  A way to logically hold them all together into a cohesive whole.\nI came across these rules here:\n\nA struct should represent a single\nvalue.\nA struct should have a memory\nfootprint less than 16 bytes.\nA struct should not be changed after\ncreation.\n\nDo these rules work? What does a struct mean semantically?",
    "output": "The source referenced by the OP has some credibility ...but what about Microsoft - what is the stance on struct usage? I sought some extra learning from Microsoft, and here is what I found:  \n\nConsider defining a structure instead of a class if instances of the\n  type are small and commonly short-lived or are commonly embedded in\n  other objects.\nDo not define a structure unless the type has all of the following characteristics: \n\nIt logically represents a single value, similar to primitive types (integer, double, and so on).\nIt has an instance size smaller than 16 bytes.\nIt is immutable.\nIt will not have to be boxed frequently.  \n\n\nMicrosoft consistently violates those rules\nOkay, #2 and #3 anyway. Our beloved dictionary has 2 internal structs:  \n\n```csharp\n[StructLayout(LayoutKind.Sequential)]  // default for structs\nprivate struct Entry  //<Tkey, TValue>\n{\n    //  View code at *Reference Source\n}\n\n[Serializable, StructLayout(LayoutKind.Sequential)]\npublic struct Enumerator : \n    IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, \n    IDictionaryEnumerator, IEnumerator\n{\n    //  View code at *Reference Source\n}\n\n```\n\n*Reference Source\nThe 'JonnyCantCode.com' source got 3 out of 4 - quite forgivable since #4 probably wouldn't be an issue. If you find yourself boxing a struct, rethink your architecture.  \nLet's look at why Microsoft would use these structs:\n\nEach struct, \n```csharp\nEntry\n```\n and \n```csharp\nEnumerator\n```\n, represent single values.\nSpeed\n\n```csharp\nEntry\n```\n is never passed as a parameter outside of the Dictionary class. Further investigation shows that in order to satisfy implementation of IEnumerable, Dictionary uses the \n```csharp\nEnumerator\n```\n struct which it copies every time an enumerator is requested ...makes sense.\nInternal to the Dictionary class. \n```csharp\nEnumerator\n```\n is public because Dictionary is enumerable and must have equal accessibility to the IEnumerator interface implementation - e.g. IEnumerator getter.  \n\nUpdate - In addition, realize that when a struct implements an interface - as Enumerator does - and is cast to that implemented type, the struct becomes a reference type and is moved to the heap. Internal to the Dictionary class, Enumerator is still a value type. However, as soon as a method calls \n```csharp\nGetEnumerator()\n```\n, a reference-type \n```csharp\nIEnumerator\n```\n is returned.\nWhat we don't see here is any attempt or proof of requirement to keep structs immutable or maintaining an instance size of only 16 bytes or less:  \n\nNothing in the structs above is declared \n```csharp\nreadonly\n```\n - not immutable\nSize of these struct could be well over 16 bytes\n\n```csharp\nEntry\n```\n has an undetermined lifetime (from \n```csharp\nAdd()\n```\n, to \n```csharp\nRemove()\n```\n, \n```csharp\nClear()\n```\n, or garbage collection);\n\nAnd ...\n 4. Both structs store TKey and TValue, which we all know are quite capable of being reference types (added bonus info)\nHashed keys notwithstanding, dictionaries are fast in part because instancing a struct is quicker than a reference type. Here, I have a \n```csharp\nDictionary<int, int>\n```\n that stores 300,000 random integers with sequentially incremented keys.\n\nCapacity: 312874\n  MemSize:  2660827 bytes\n  Completed Resize:  5ms\n  Total time to fill:  889ms\n\nCapacity:  number of elements available before the internal array must be resized.  \nMemSize:  determined by serializing the dictionary into a MemoryStream and getting a byte length (accurate enough for our purposes).  \nCompleted Resize:  the time it takes to resize the internal array from 150862 elements to 312874 elements. When you figure that each element is sequentially copied via \n```csharp\nArray.CopyTo()\n```\n, that ain't too shabby.  \nTotal time to fill: admittedly skewed due to logging and an \n```csharp\nOnResize\n```\n event I added to the source; however, still impressive to fill 300k integers while resizing 15 times during the operation. Just out of curiosity, what would the total time to fill be if I already knew the capacity? 13ms \nSo, now, what if \n```csharp\nEntry\n```\n were a class? Would these times or metrics really differ that much?  \n\nCapacity:  312874\n  MemSize:  2660827 bytes\n  Completed Resize:  26ms\n  Total time to fill:  964ms\n\nObviously, the big difference is in resizing. Any difference if Dictionary is initialized with the Capacity? Not enough to be concerned with ... 12ms.  \nWhat happens is, because \n```csharp\nEntry\n```\n is a struct, it does not require initialization like a reference type. This is both the beauty and the bane of the value type. In order to use \n```csharp\nEntry\n```\n as a reference type, I had to insert the following code:\n\n```csharp\n/*\n *  Added to satisfy initialization of entry elements --\n *  this is where the extra time is spent resizing the Entry array\n * **/\nfor (int i = 0 ; i < prime ; i++)\n{\n    destinationArray[i] = new Entry( );\n}\n/*  *********************************************** */  \n\n```\n\nThe reason I had to initialize each array element of \n```csharp\nEntry\n```\n as a reference type can be found at MSDN: Structure Design. In short:\n\nDo not provide a default constructor for a structure.\nIf a structure defines a default constructor, when arrays of the\n  structure are created, the common language runtime automatically\n  executes the default constructor on each array element.\nSome compilers, such as the C# compiler, do not allow structures to\n  have default constructors.\n\nIt is actually quite simple and we will borrow from Asimov's Three Laws of Robotics:\n\nThe struct must be safe to use\nThe struct must perform its function efficiently, unless this would violate rule #1\nThe struct must remain intact during its use unless its destruction is required to satisfy rule #1  \n\n...what do we take away from this: in short, be responsible with the use of value types. They are quick and efficient, but have the ability to cause many unexpected behaviors if not properly maintained (i.e. unintentional copies).",
    "score": 690,
    "tags": [
      "c#",
      "struct"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:02.240822"
  },
  {
    "instruction": "Try-catch speeding up my code?",
    "context": "I wrote some code for testing the impact of try-catch, but seeing some surprising results.\n\n```csharp\nstatic void Main(string[] args)\n{\n    Thread.CurrentThread.Priority = ThreadPriority.Highest;\n    Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.RealTime;\n\n    long start = 0, stop = 0, elapsed = 0;\n    double avg = 0.0;\n\n    long temp = Fibo(1);\n\n    for (int i = 1; i < 100000000; i++)\n    {\n        start = Stopwatch.GetTimestamp();\n        temp = Fibo(100);\n        stop = Stopwatch.GetTimestamp();\n\n        elapsed = stop - start;\n        avg = avg + ((double)elapsed - avg) / i;\n    }\n\n    Console.WriteLine(\"Elapsed: \" + avg);\n    Console.ReadKey();\n}\n\nstatic long Fibo(int n)\n{\n    long n1 = 0, n2 = 1, fibo = 0;\n    n++;\n\n    for (int i = 1; i < n; i++)\n    {\n        n1 = n2;\n        n2 = fibo;\n        fibo = n1 + n2;\n    }\n\n    return fibo;\n}\n\n```\n\nOn my computer, this consistently prints out a value around 0.96..\nWhen I wrap the for loop inside Fibo() with a try-catch block like this:\n\n```csharp\nstatic long Fibo(int n)\n{\n    long n1 = 0, n2 = 1, fibo = 0;\n    n++;\n\n    try\n    {\n        for (int i = 1; i < n; i++)\n        {\n            n1 = n2;\n            n2 = fibo;\n            fibo = n1 + n2;\n        }\n    }\n    catch {}\n\n    return fibo;\n}\n\n```\n\nNow it consistently prints out 0.69... -- it actually runs faster! But why?\nNote: I compiled this using the Release configuration and directly ran the EXE file (outside Visual Studio).\nEDIT: Jon Skeet's excellent analysis shows that try-catch is somehow causing the x86 CLR to use the CPU registers in a more favorable way in this specific case (and I think we're yet to understand why). I confirmed Jon's finding that x64 CLR doesn't have this difference, and that it was faster than the x86 CLR. I also tested using \n```csharp\nint\n```\n types inside the Fibo method instead of \n```csharp\nlong\n```\n types, and then the x86 CLR was as equally fast as the x64 CLR.\n\nUPDATE: It looks like this issue has been fixed by Roslyn. Same machine, same CLR version -- the issue remains as above when compiled with VS 2013, but the problem goes away when compiled with VS 2015.",
    "output": "One of the Roslyn engineers who specializes in understanding optimization of stack usage took a look at this and reports to me that there seems to be a problem in the interaction between the way the C# compiler generates local variable stores and the way the JIT compiler does register scheduling in the corresponding x86 code. The result is suboptimal code generation on the loads and stores of the locals.\nFor some reason unclear to all of us, the problematic code generation path is avoided when the JITter knows that the block is in a try-protected region. \nThis is pretty weird. We'll follow up with the JITter team and see whether we can get a bug entered so that they can fix this. \nAlso, we are working on improvements for Roslyn to the C# and VB compilers' algorithms for determining when locals can be made \"ephemeral\" -- that is, just pushed and popped on the stack, rather than allocated a specific location on the stack for the duration of the activation. We believe that the JITter will be able to do a better job of register allocation and whatnot if we give it better hints about when locals can be made \"dead\" earlier.\nThanks for bringing this to our attention, and apologies for the odd behaviour.",
    "score": 1142,
    "tags": [
      "c#",
      ".net",
      "clr",
      "try-catch",
      "performance-testing"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:02.549382"
  },
  {
    "instruction": "'Static readonly' vs. 'const'",
    "context": "I've read around about \n```csharp\nconst\n```\n and \n```csharp\nstatic readonly\n```\n fields. We have some classes which contain only constant values. They are used for various things around in our system. So I am wondering if my observation is correct:\nShould these kind of constant values always be \n```csharp\nstatic readonly\n```\n for everything that is public? And only use \n```csharp\nconst\n```\n for \n```csharp\ninternal\n```\n/\n```csharp\nprotected\n```\n/\n```csharp\nprivate\n```\n values?\nWhat do you recommend? Should I maybe even not use \n```csharp\nstatic readonly\n```\n fields, but rather use properties maybe?",
    "output": "```csharp\npublic static readonly\n```\n fields are a little unusual; \n```csharp\npublic static\n```\n properties (with only a \n```csharp\nget\n```\n) would be more common (perhaps backed by a \n```csharp\nprivate static readonly\n```\n field).\n\n```csharp\nconst\n```\n values are burned directly into the call-site; this is double edged:\n\nit is useless if the value is fetched at runtime, perhaps from config\nif you change the value of a const, you need to rebuild all the clients\nbut it can be faster, as it avoids a method call...\n...which might sometimes have been inlined by the JIT anyway\n\nIf the value will never change, then const is fine - \n```csharp\nZero\n```\n etc make reasonable consts ;p Other than that, \n```csharp\nstatic\n```\n properties are more common.",
    "score": 1089,
    "tags": [
      "c#",
      "constants"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:02.867469"
  },
  {
    "instruction": "How do I update the GUI from another thread?",
    "context": "Which is the simplest way to update a \n```csharp\nLabel\n```\n from another \n```csharp\nThread\n```\n?\n\nI have a \n```csharp\nForm\n```\n running on \n```csharp\nthread1\n```\n, and from that I'm starting another thread (\n```csharp\nthread2\n```\n). \nWhile \n```csharp\nthread2\n```\n is processing some files I would like to update a \n```csharp\nLabel\n```\n on the \n```csharp\nForm\n```\n with the current status of \n```csharp\nthread2\n```\n's work.\n\nHow could I do that?",
    "output": "The simplest way is an anonymous method passed into \n```csharp\nLabel.Invoke\n```\n:\n\n```csharp\n// Running on the worker thread\nstring newText = \"abc\";\nform.Label.Invoke((MethodInvoker)delegate {\n    // Running on the UI thread\n    form.Label.Text = newText;\n});\n// Back on the worker thread\n\n```\n\nNotice that \n```csharp\nInvoke\n```\n blocks execution until it completes--this is synchronous code. The question doesn't ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.",
    "score": 1230,
    "tags": [
      "c#",
      ".net",
      "multithreading",
      "winforms",
      "user-interface"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:03.180328"
  },
  {
    "instruction": "What is the difference between a field and a property?",
    "context": "In C#, what makes a field different from a property, and when should a field be used instead of a property?",
    "output": "Properties expose fields.  Fields should (almost always) be kept private to a class and accessed via get and set properties.  Properties provide a level of abstraction allowing you to change the fields while not affecting the external way they are accessed by the things that use your class.\n\n```csharp\npublic class MyClass\n{\n    // this is a field.  It is private to your class and stores the actual data.\n    private string _myField;\n\n    // this is a property. When accessed it uses the underlying field,\n    // but only exposes the contract, which will not be affected by the underlying field\n    public string MyProperty\n    {\n        get\n        {\n            return _myField;\n        }\n        set\n        {\n            _myField = value;\n        }\n    }\n\n    // This is an AutoProperty (C# 3.0 and higher) - which is a shorthand syntax\n    // used to generate a private field for you\n    public int AnotherProperty { get; set; } \n}\n\n```\n\n@Kent points out that Properties are not required to encapsulate fields, they could do a calculation on other fields, or serve other purposes.\n@GSS points out that you can also do other logic, such as validation, when a property is accessed, another useful feature.",
    "score": 1378,
    "tags": [
      "c#",
      "oop",
      "properties",
      "field"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:03.473233"
  },
  {
    "instruction": "Why is Dictionary preferred over Hashtable in C#?",
    "context": "In most programming languages, dictionaries are preferred over hashtables.\nWhat are the reasons behind that?",
    "output": "For what it's worth, a Dictionary is (conceptually) a hash table.\nIf you meant \"why do we use the \n```csharp\nDictionary<TKey, TValue>\n```\n class instead of the \n```csharp\nHashtable\n```\n class?\", then it's an easy answer: \n```csharp\nDictionary<TKey, TValue>\n```\n is a generic type, \n```csharp\nHashtable\n```\n is not. That means you get type safety with \n```csharp\nDictionary<TKey, TValue>\n```\n, because you can't insert any random object into it, and you don't have to cast the values you take out.\nInterestingly, the \n```csharp\nDictionary<TKey, TValue>\n```\n implementation in the .NET Framework is based on the \n```csharp\nHashtable\n```\n, as you can tell from this comment in its source code:\n\nThe generic Dictionary was copied from Hashtable's source\n\nSource",
    "score": 1732,
    "tags": [
      "c#",
      ".net",
      "vb.net",
      "data-structures"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:03.733036"
  },
  {
    "instruction": "Path.Combine for URLs?",
    "context": "Path.Combine is handy, but is there a similar function in the .NET framework for URLs?\nI'm looking for syntax like this:\n\n```csharp\nUrl.Combine(\"http://MyUrl.com/\", \"/Images/Image.jpg\")\n\n```\n\nwhich would return:\n\n```csharp\n\"http://MyUrl.com/Images/Image.jpg\"\n```",
    "output": "```csharp\nUri\n```\n has a constructor that should do this for you: \n```csharp\nnew Uri(Uri baseUri, string relativeUri)\n```\n\nHere's an example:\n\n```csharp\nUri baseUri = new Uri(\"http://www.contoso.com\");\nUri myUri = new Uri(baseUri, \"catalog/shownew.htm\");\n\n```\n\nNote from editor: Beware, this method does not work as expected. It can cut part of baseUri in some cases. See comments and other answers.",
    "score": 1355,
    "tags": [
      "c#",
      ".net",
      "url"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:04.014476"
  },
  {
    "instruction": "LINQ's Distinct() on a particular property",
    "context": "I am playing with LINQ to learn about it, but I can't figure out how to use \n```csharp\nDistinct\n```\n when I do not have a simple list (a simple list of integers is pretty easy to do, this is not the question). What I if want to use \n```csharp\nDistinct\n```\n on a \n```csharp\nList<TElement>\n```\n on one or more properties of the \n```csharp\nTElement\n```\n?\nExample: If an object is \n```csharp\nPerson\n```\n, with property \n```csharp\nId\n```\n. How can I get all \n```csharp\nPerson\n```\n and use \n```csharp\nDistinct\n```\n on them with the property \n```csharp\nId\n```\n of the object?\n\n```csharp\nPerson1: Id=1, Name=\"Test1\"\nPerson2: Id=1, Name=\"Test1\"\nPerson3: Id=2, Name=\"Test2\"\n\n```\n\nHow can I get just \n```csharp\nPerson1\n```\n and \n```csharp\nPerson3\n```\n? Is that possible?\nIf it's not possible with LINQ, what would be the best way to have a list of \n```csharp\nPerson\n```\n depending on some of its properties?",
    "output": "What if I want to obtain a distinct list based on one or more properties?\n\nSimple! You want to group them and pick a winner out of the group.\n\n```csharp\nList<Person> distinctPeople = allPeople\n  .GroupBy(p => p.PersonId)\n  .Select(g => g.First())\n  .ToList();\n\n```\n\nIf you want to define groups on multiple properties, here's how:\n\n```csharp\nList<Person> distinctPeople = allPeople\n  .GroupBy(p => new {p.PersonId, p.FavoriteColor} )\n  .Select(g => g.First())\n  .ToList();\n\n```\n\nNote: Certain query providers are unable to resolve that each group must have at least one element, and that First is the appropriate method to call in that situation. If you find yourself working with such a query provider, FirstOrDefault may help get your query through the query provider.\nNote2: Consider this answer for an EF Core (prior to EF Core 6) compatible approach. https://stackoverflow.com/a/66529949/8155",
    "score": 2458,
    "tags": [
      "c#",
      "linq",
      "duplicates",
      "unique",
      "distinct"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:04.289772"
  },
  {
    "instruction": "Virtual member call in a constructor",
    "context": "I'm getting a warning from ReSharper about a call to a virtual member from my objects constructor. \nWhy would this be something not to do?",
    "output": "When an object written in C# is constructed, what happens is that the initializers run in order from the most derived class to the base class, and then constructors run in order from the base class to the most derived class (see Eric Lippert's blog for details as to why this is).\nAlso in .NET objects do not change type as they are constructed, but start out as the most derived type, with the method table being for the most derived type. This means that virtual method calls always run on the most derived type.\nWhen you combine these two facts you are left with the problem that if you make a virtual method call in a constructor, and it is not the most derived type in its inheritance hierarchy, that it will be called on a class whose constructor has not been run, and therefore may not be in a suitable state to have that method called. \nThis problem is, of course, mitigated if you mark your class as sealed to ensure that it is the most derived type in the inheritance hierarchy - in which case it is perfectly safe to call the virtual method.",
    "score": 1298,
    "tags": [
      "c#",
      "constructor",
      "warnings",
      "resharper",
      "virtual-functions"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:04.559585"
  },
  {
    "instruction": "Send HTTP POST request in .NET",
    "context": "How can I make an HTTP POST request and send data in the body?",
    "output": "There are several ways to perform HTTP GET and POST requests:\n\nMethod A: HttpClient (Preferred)\nAvailable in: .NET Framework 4.5+, .NET Standard 1.1+, and .NET Core 1.0+.\nIt is currently the preferred approach, and is asynchronous and high performance. Use the built-in version in most cases, but for very old platforms there is a NuGet package.\n\n```csharp\nusing System.Net.Http;\n\n```\n\nSetup\nIt is recommended to instantiate one \n```csharp\nHttpClient\n```\n for your application's lifetime and share it unless you have a specific reason not to.\n\n```csharp\nprivate static readonly HttpClient client = new HttpClient();\n\n```\n\nSee \n```csharp\nHttpClientFactory\n```\n for a dependency injection solution.\n\n\nPOST\n\n```csharp\n  var values = new Dictionary<string, string>\n  {\n      { \"thing1\", \"hello\" },\n      { \"thing2\", \"world\" }\n  };\n\n  var content = new FormUrlEncodedContent(values);\n\n  var response = await client.PostAsync(\"http://www.example.com/recepticle.aspx\", content);\n\n  var responseString = await response.Content.ReadAsStringAsync();\n\n```\n\n\nGET\n\n```csharp\n  var responseString = await client.GetStringAsync(\"http://www.example.com/recepticle.aspx\");\n\n```\n\n\n\n\nMethod B: Third-Party Libraries\nRestSharp\n\nPOST\n\n```csharp\n   var client = new RestClient(\"http://example.com\");\n   // client.Authenticator = new HttpBasicAuthenticator(username, password);\n   var request = new RestRequest(\"resource/{id}\");\n   request.AddParameter(\"thing1\", \"Hello\");\n   request.AddParameter(\"thing2\", \"world\");\n   request.AddHeader(\"header\", \"value\");\n   request.AddFile(\"file\", path);\n   var response = client.Post(request);\n   var content = response.Content; // Raw content as string\n   var response2 = client.Post<Person>(request);\n   var name = response2.Data.Name;\n\n```\n\n\n\nFlurl.Http\nIt is a newer library sporting a fluent API, testing helpers, uses HttpClient under the hood, and is portable. It is available via NuGet.\n\n```csharp\n    using Flurl.Http;\n\n```\n\n\n\nPOST\n\n```csharp\n  var responseString = await \"http://www.example.com/recepticle.aspx\"\n      .PostUrlEncodedAsync(new { thing1 = \"hello\", thing2 = \"world\" })\n      .ReceiveString();\n\n```\n\n\n\n```csharp\nGET\n```\n\n\n```csharp\n  var responseString = await \"http://www.example.com/recepticle.aspx\"\n      .GetStringAsync();\n\n```\n\n\n\n\nMethod C: HttpWebRequest (not recommended for new work)\nAvailable in: .NET Framework 1.1+, .NET Standard 2.0+, .NET Core 1.0+. In .NET Core, it is mostly for compatibility -- it wraps \n```csharp\nHttpClient\n```\n, is less performant, and won't get new features.\n\n```csharp\nusing System.Net;\nusing System.Text;  // For class Encoding\nusing System.IO;    // For StreamReader\n\n```\n\n\n\nPOST\n\n```csharp\n  var request = (HttpWebRequest)WebRequest.Create(\"http://www.example.com/recepticle.aspx\");\n\n  var postData = \"thing1=\" + Uri.EscapeDataString(\"hello\");\n      postData += \"&thing2=\" + Uri.EscapeDataString(\"world\");\n  var data = Encoding.ASCII.GetBytes(postData);\n\n  request.Method = \"POST\";\n  request.ContentType = \"application/x-www-form-urlencoded\";\n  request.ContentLength = data.Length;\n\n  using (var stream = request.GetRequestStream())\n  {\n      stream.Write(data, 0, data.Length);\n  }\n\n  var response = (HttpWebResponse)request.GetResponse();\n\n  var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n```\n\n\nGET\n\n```csharp\n  var request = (HttpWebRequest)WebRequest.Create(\"http://www.example.com/recepticle.aspx\");\n\n  var response = (HttpWebResponse)request.GetResponse();\n\n  var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n```\n\n\n\n\nMethod D: WebClient (Not recommended for new work)\nThis is a wrapper around \n```csharp\nHttpWebRequest\n```\n. Compare with \n```csharp\nHttpClient\n```\n.\nAvailable in: .NET Framework 1.1+, NET Standard 2.0+, and .NET Core 2.0+.\nIn some circumstances (.NET Framework 4.5-4.8), if you need to do a HTTP request synchronously, \n```csharp\nWebClient\n```\n can still be used.\n\n```csharp\nusing System.Net;\nusing System.Collections.Specialized;\n\n```\n\n\n\nPOST\n\n```csharp\n  using (var client = new WebClient())\n  {\n      var values = new NameValueCollection();\n      values[\"thing1\"] = \"hello\";\n      values[\"thing2\"] = \"world\";\n\n      var response = client.UploadValues(\"http://www.example.com/recepticle.aspx\", values);\n\n      var responseString = Encoding.Default.GetString(response);\n  }\n\n```\n\n\nGET\n\n```csharp\n  using (var client = new WebClient())\n  {\n      var responseString = client.DownloadString(\"http://www.example.com/recepticle.aspx\");\n  }\n\n```",
    "score": 2729,
    "tags": [
      "c#",
      ".net",
      "post",
      "httpwebrequest",
      "httprequest"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:04.857978"
  },
  {
    "instruction": "How to calculate difference between two dates (number of days)?",
    "context": "How can one calculate the number of days between two dates in C#?",
    "output": "Assuming \n```csharp\nStartDate\n```\n and \n```csharp\nEndDate\n```\n are of type \n```csharp\nDateTime\n```\n:\n\n```csharp\n(EndDate - StartDate).TotalDays\n\n```",
    "score": 2649,
    "tags": [
      "c#",
      "date"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:05.132732"
  },
  {
    "instruction": "Hidden Features of C#?",
    "context": "This came to my mind after I learned the following from this question:\n\n```csharp\nwhere T : struct\n\n```\n\nWe, C# developers, all know the basics of C#. I mean declarations, conditionals, loops, operators, etc.\nSome of us even mastered the stuff like Generics, anonymous types, lambdas, LINQ, ...\nBut what are the most hidden features or tricks of C# that even C# fans, addicts, experts barely know?\nHere are the revealed features so far:\n\nKeywords\n\n\n```csharp\nyield\n```\n by Michael Stum\n\n```csharp\nvar\n```\n by Michael Stum\n\n```csharp\nusing()\n```\n statement by kokos\n\n```csharp\nreadonly\n```\n by kokos\n\n```csharp\nas\n```\n by Mike Stone\n\n```csharp\nas\n```\n / \n```csharp\nis\n```\n by Ed Swangren\n\n```csharp\nas\n```\n / \n```csharp\nis\n```\n (improved) by Rocketpants\n\n```csharp\ndefault\n```\n by deathofrats\n\n```csharp\nglobal::\n```\n by pzycoman\n\n```csharp\nusing()\n```\n blocks by AlexCuse\n\n```csharp\nvolatile\n```\n by Jakub Šturc\n\n```csharp\nextern alias\n```\n by Jakub Šturc\n\nAttributes\n\n\n```csharp\nDefaultValueAttribute\n```\n by Michael Stum\n\n```csharp\nObsoleteAttribute\n```\n by DannySmurf\n\n```csharp\nDebuggerDisplayAttribute\n```\n by Stu\n\n```csharp\nDebuggerBrowsable\n```\n and \n```csharp\nDebuggerStepThrough\n```\n by bdukes\n\n```csharp\nThreadStaticAttribute\n```\n by marxidad\n\n```csharp\nFlagsAttribute\n```\n by Martin Clarke\n\n```csharp\nConditionalAttribute\n```\n by AndrewBurns\n\nSyntax\n\n\n```csharp\n??\n```\n (coalesce nulls) operator by kokos\nNumber flaggings by Nick Berardi\n\n```csharp\nwhere T:new\n```\n by Lars Mæhlum\nImplicit generics by Keith\nOne-parameter lambdas by Keith\nAuto properties by Keith\nNamespace aliases by Keith\nVerbatim string literals with @ by Patrick\n\n```csharp\nenum\n```\n values by lfoust\n@variablenames by marxidad\n\n```csharp\nevent\n```\n operators by marxidad\nFormat string brackets by Portman\nProperty accessor accessibility modifiers by xanadont\nConditional (ternary) operator (\n```csharp\n?:\n```\n) by JasonS\n\n```csharp\nchecked\n```\n and \n```csharp\nunchecked\n```\n operators by Binoj Antony\n\n```csharp\nimplicit and explicit\n```\n operators by Flory\n\nLanguage Features\n\nNullable types by Brad Barker\nAnonymous types by Keith\n\n```csharp\n__makeref __reftype __refvalue\n```\n by Judah Himango\nObject initializers by lomaxx\nFormat strings by David in Dakota\nExtension Methods by marxidad\n\n```csharp\npartial\n```\n methods by Jon Erickson\nPreprocessor directives by John Asbeck\n\n```csharp\nDEBUG\n```\n pre-processor directive by Robert Durgin\nOperator overloading by SefBkn\nType inferrence by chakrit\nBoolean operators taken to next level by Rob Gough\nPass value-type variable as interface without boxing by Roman Boiko\nProgrammatically determine declared variable type by Roman Boiko\nStatic Constructors by Chris\nEasier-on-the-eyes / condensed ORM-mapping using LINQ by roosteronacid\n\n```csharp\n__arglist\n```\n by Zac Bowling\n\nVisual Studio Features\n\nSelect block of text in editor by Himadri\nSnippets by DannySmurf \n\nFramework\n\n\n```csharp\nTransactionScope\n```\n by KiwiBastard\n\n```csharp\nDependantTransaction\n```\n by KiwiBastard\n\n```csharp\nNullable<T>\n```\n by IainMH\n\n```csharp\nMutex\n```\n by Diago\n\n```csharp\nSystem.IO.Path\n```\n by ageektrapped\n\n```csharp\nWeakReference\n```\n by Juan Manuel\n\nMethods and Properties\n\n\n```csharp\nString.IsNullOrEmpty()\n```\n method by KiwiBastard\n\n```csharp\nList.ForEach()\n```\n method by KiwiBastard\n\n```csharp\nBeginInvoke()\n```\n, \n```csharp\nEndInvoke()\n```\n methods by Will Dean\n\n```csharp\nNullable<T>.HasValue\n```\n and \n```csharp\nNullable<T>.Value\n```\n properties by Rismo\n\n```csharp\nGetValueOrDefault\n```\n method by John Sheehan\n\nTips & Tricks\n\nNice method for event handlers by Andreas H.R. Nilsson\nUppercase comparisons by John\nAccess anonymous types without reflection by dp\nA quick way to lazily instantiate collection properties by Will\nJavaScript-like anonymous inline-functions by roosteronacid\n\nOther\n\nnetmodules by kokos \nLINQBridge by Duncan Smart \nParallel Extensions by Joel Coehoorn",
    "output": "This isn't C# per se, but I haven't seen anyone who really uses \n```csharp\nSystem.IO.Path.Combine()\n```\n to the extent that they should. In fact, the whole Path class is really useful, but no one uses it!\nI'm willing to bet that every production app has the following code, even though it shouldn't:\n\n```csharp\nstring path = dir + \"\\\\\" + fileName;\n\n```",
    "score": 751,
    "tags": [
      "c#",
      "hidden-features"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:05.419167"
  },
  {
    "instruction": "JavaScriptSerializer - JSON serialization of enum as string",
    "context": "I have a class that contains an \n```csharp\nenum\n```\n property, and upon serializing the object using \n```csharp\nJavaScriptSerializer\n```\n, my json result contains the integer value of the enumeration rather than its \n```csharp\nstring\n```\n \"name\".  Is there a way to get the enum as a \n```csharp\nstring\n```\n in my json without having to create a custom \n```csharp\nJavaScriptConverter\n```\n?  Perhaps there's an attribute that I could decorate the \n```csharp\nenum\n```\n definition, or object property, with?\nAs an example:\n\n```csharp\nenum Gender { Male, Female }\n\nclass Person\n{\n    int Age { get; set; }\n    Gender Gender { get; set; }\n}\n\n```\n\nDesired JSON result:\n\n```csharp\n{ \"Age\": 35, \"Gender\": \"Male\" }\n\n```\n\nIdeally looking for answer with built-in .NET framework classes, if not possible alternatives (like Json.net) are welcome.",
    "output": "I have found that Json.NET provides the exact functionality I'm looking for with a \n```csharp\nJsonConverter\n```\n attribute, passing in the built-in \n```csharp\nStringEnumConverter\n```\n type:\n\n```csharp\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\n\n[JsonConverter(typeof(StringEnumConverter))]\npublic Gender Gender { get; set; }\n\n```\n\nMore details at available on \n```csharp\nStringEnumConverter\n```\n documentation.\nThere are other places to configure this converter more globally:\n\nenum itself if you want enum always be serialized/deserialized as string:\n\n```csharp\n  [JsonConverter(typeof(StringEnumConverter))]  \n  enum Gender { Male, Female }\n\n```\n\n\nIn case anyone wants to avoid attribute decoration, you can add the converter to your JsonSerializer (suggested by Bjørn Egil):\n\n```csharp\n  serializer.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter()); \n\n```\n\n\n\nand it will work for every enum it sees during that serialization (suggested by Travis).\n\nor JsonConverter (suggested by banana):\n\n```csharp\n  JsonConvert.SerializeObject(MyObject, \n      new Newtonsoft.Json.Converters.StringEnumConverter());\n\n```\n\n\n\nAdditionally you can control casing and whether numbers are still accepted by using StringEnumConverter(NamingStrategy, Boolean) constructor.",
    "score": 2466,
    "tags": [
      "c#",
      "asp.net",
      "json",
      "enums",
      "javascriptserializer"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:05.710632"
  },
  {
    "instruction": "Create Generic method constraining T to an Enum",
    "context": "I'm building a function to extend the \n```csharp\nEnum.Parse\n```\n concept that\n\nAllows a default value to be parsed in case that an Enum value is not found\nIs case insensitive\n\nSo I wrote the following:\n\n```csharp\npublic static T GetEnumFromString<T>(string value, T defaultValue) where T : Enum\n{\n    if (string.IsNullOrEmpty(value)) return defaultValue;\n    foreach (T item in Enum.GetValues(typeof(T)))\n    {\n        if (item.ToString().ToLower().Equals(value.Trim().ToLower())) return item;\n    }\n    return defaultValue;\n}\n\n```\n\nI am getting a Error Constraint cannot be special class \n```csharp\nSystem.Enum\n```\n.\nFair enough, but is there a workaround to allow a Generic Enum, or am I going to have to mimic the \n```csharp\nParse\n```\n function and pass a type as an attribute, which forces the ugly boxing requirement to your code.\nEdit 1\nI have settled on (I've left the loop to maintain case insensitivity - I am using this when parsing XML)\n\n```csharp\npublic static class EnumUtils\n{\n    public static T ParseEnum<T>(string value, T defaultValue) where T : struct, IConvertible\n    {\n        if (!typeof(T).IsEnum) throw new ArgumentException(\"T must be an enumerated type\");\n        if (string.IsNullOrEmpty(value)) return defaultValue;\n\n        foreach (T item in Enum.GetValues(typeof(T)))\n        {\n            if (item.ToString().ToLower().Equals(value.Trim().ToLower())) return item;\n        }\n        return defaultValue;\n    }\n}\n\n```\n\nEdit 2: (16th Feb 2015) Christopher Currens has posted a compiler enforced type-safe generic solution in MSIL or F# below, which is well worth a look, and an upvote. I will remove this edit if the solution bubbles further up the page.\nEdit 3: (13th Apr 2021) As this has now been addressed, and supported, since C# 7.3, I have changed the accepted answer, though full perusal of the top answers is worth it for academic, and historical, interest :)",
    "output": "Since \n```csharp\nEnum\n```\n Type implements \n```csharp\nIConvertible\n```\n interface, a better implementation should be something like this:\n\n```csharp\npublic T GetEnumFromString<T>(string value) where T : struct, IConvertible\n{\n   if (!typeof(T).IsEnum) \n   {\n      throw new ArgumentException(\"T must be an enumerated type\");\n   }\n\n   //...\n}\n\n```\n\nThis will still permit passing of value types implementing \n```csharp\nIConvertible\n```\n. The chances are rare though.",
    "score": 1110,
    "tags": [
      "c#",
      "generics",
      "enums",
      "generic-constraints"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:05.982246"
  },
  {
    "instruction": "Multiline string literal in C#",
    "context": "Is there an easy way to create a multiline string literal in C#?\nHere's what I have now:\n\n```csharp\nstring query = \"SELECT foo, bar\"\n+ \" FROM table\"\n+ \" WHERE id = 42\";\n\n```\n\nI know PHP has\n\n```csharp\n<<<BLOCK\n\nBLOCK;\n\n```\n\nDoes C# have something similar?",
    "output": "You can use the \n```csharp\n@\n```\n symbol in front of a \n```csharp\nstring\n```\n to form a verbatim string literal:\n\n```csharp\nstring query = @\"SELECT foo, bar\nFROM table\nWHERE id = 42\";\n\n```\n\nYou also do not have to escape special characters when you use this method, except for double quotes as shown in Jon Skeet's answer.",
    "score": 2158,
    "tags": [
      "c#",
      "string",
      "shorthand"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:06.284576"
  },
  {
    "instruction": "How to call asynchronous method from synchronous method in C#?",
    "context": "I have a \n```csharp\npublic async Task Foo()\n```\n method that I want to call from a synchronous method. So far all I have seen from MSDN documentation is calling \n```csharp\nasync\n```\n methods via \n```csharp\nasync\n```\n methods, but my whole program is not built with \n```csharp\nasync\n```\n methods.\nIs this even possible?\nHere's one example of calling these methods from an asynchronous method:\nWalkthrough: Accessing the Web by Using Async and Await (C# and Visual Basic)\nNow I'm looking into calling these \n```csharp\nasync\n```\n methods from synchronous methods.",
    "output": "Asynchronous programming does \"grow\" through the code base. It has been compared to a zombie virus. The best solution is to allow it to grow, but sometimes that's not possible.\nI have written a few types in my Nito.AsyncEx library for dealing with a partially-asynchronous code base. There's no solution that works in every situation, though.\nSolution A\nIf you have a simple asynchronous method that doesn't need to synchronize back to its context, then you can use \n```csharp\nTask.WaitAndUnwrapException\n```\n:\n\n```csharp\nvar task = MyAsyncMethod();\nvar result = task.WaitAndUnwrapException();\n\n```\n\nYou do not want to use \n```csharp\nTask.Wait\n```\n or \n```csharp\nTask.Result\n```\n because they wrap exceptions in \n```csharp\nAggregateException\n```\n.\nThis solution is only appropriate if \n```csharp\nMyAsyncMethod\n```\n does not synchronize back to its context. In other words, every \n```csharp\nawait\n```\n in \n```csharp\nMyAsyncMethod\n```\n should end with \n```csharp\nConfigureAwait(false)\n```\n. This means it can't update any UI elements or access the ASP.NET request context.\nSolution B\nIf \n```csharp\nMyAsyncMethod\n```\n does need to synchronize back to its context, then you may be able to use \n```csharp\nAsyncContext.RunTask\n```\n to provide a nested context:\n\n```csharp\nvar result = AsyncContext.RunTask(MyAsyncMethod).Result;\n\n```\n\n\n*Update 4/14/2014: In more recent versions of the library the API is as follows:\n\n```csharp\nvar result = AsyncContext.Run(MyAsyncMethod);\n\n```\n\n\n(It's OK to use \n```csharp\nTask.Result\n```\n in this example because \n```csharp\nRunTask\n```\n will propagate \n```csharp\nTask\n```\n exceptions).\nThe reason you may need \n```csharp\nAsyncContext.RunTask\n```\n instead of \n```csharp\nTask.WaitAndUnwrapException\n```\n is because of a rather subtle deadlock possibility that happens on WinForms/WPF/SL/ASP.NET:\n\nA synchronous method calls an async method, obtaining a \n```csharp\nTask\n```\n.\nThe synchronous method does a blocking wait on the \n```csharp\nTask\n```\n.\nThe \n```csharp\nasync\n```\n method uses \n```csharp\nawait\n```\n without \n```csharp\nConfigureAwait\n```\n.\nThe \n```csharp\nTask\n```\n cannot complete in this situation because it only completes when the \n```csharp\nasync\n```\n method is finished; the \n```csharp\nasync\n```\n method cannot complete because it is attempting to schedule its continuation to the \n```csharp\nSynchronizationContext\n```\n, and WinForms/WPF/SL/ASP.NET will not allow the continuation to run because the synchronous method is already running in that context.\n\nThis is one reason why it's a good idea to use \n```csharp\nConfigureAwait(false)\n```\n within every \n```csharp\nasync\n```\n method as much as possible.\nSolution C\n\n```csharp\nAsyncContext.RunTask\n```\n won't work in every scenario. For example, if the \n```csharp\nasync\n```\n method awaits something that requires a UI event to complete, then you'll deadlock even with the nested context. In that case, you could start the \n```csharp\nasync\n```\n method on the thread pool:\n\n```csharp\nvar task = Task.Run(async () => await MyAsyncMethod());\nvar result = task.WaitAndUnwrapException();\n\n```\n\nHowever, this solution requires a \n```csharp\nMyAsyncMethod\n```\n that will work in the thread pool context. So it can't update UI elements or access the ASP.NET request context. And in that case, you may as well add \n```csharp\nConfigureAwait(false)\n```\n to its \n```csharp\nawait\n```\n statements, and use solution A.\nUpdate: 2015 MSDN article 'Async Programming - Brownfield Async Development' by Stephen Cleary.",
    "score": 1115,
    "tags": [
      "c#",
      "asynchronous",
      "async-await",
      "synchronous"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:06.566346"
  },
  {
    "instruction": "How and when to use ‘async’ and ‘await’",
    "context": "From my understanding one of the main things that \n```csharp\nasync\n```\n and \n```csharp\nawait\n```\n do is to make code easy to write and read - but is using them equal to spawning background threads to perform long duration logic?\nI'm currently trying out the most basic example. I've added some comments inline. Can you clarify it for me?\n\n```csharp\n// I don't understand why this method must be marked as `async`.\nprivate async void button1_Click(object sender, EventArgs e)\n{\n    Task<int> access = DoSomethingAsync();\n    // task independent stuff here\n\n    // this line is reached after the 5 seconds sleep from \n    // DoSomethingAsync() method. Shouldn't it be reached immediately? \n    int a = 1; \n\n    // from my understanding the waiting should be done here.\n    int x = await access; \n}\n\nasync Task<int> DoSomethingAsync()\n{\n    // is this executed on a background thread?\n    System.Threading.Thread.Sleep(5000);\n    return 1;\n}\n\n```",
    "output": "When using \n```csharp\nasync\n```\n and \n```csharp\nawait\n```\n the compiler generates a state machine in the background.\nHere's an example on which I hope I can explain some of the high-level details that are going on:\n\n```csharp\npublic async Task MyMethodAsync()\n{\n    Task<int> longRunningTask = LongRunningOperationAsync();\n    // independent work which doesn't need the result of LongRunningOperationAsync can be done here\n\n    //and now we call await on the task \n    int result = await longRunningTask;\n    //use the result \n    Console.WriteLine(result);\n}\n\npublic async Task<int> LongRunningOperationAsync() // assume we return an int from this long running operation \n{\n    await Task.Delay(1000); // 1 second delay\n    return 1;\n}\n\n```\n\nOK, so what happens here:\n\n\n```csharp\nTask<int> longRunningTask = LongRunningOperationAsync();\n```\n starts executing \n```csharp\nLongRunningOperation\n```\n\n\nIndependent work is done on let's assume the Main Thread (Thread ID = 1) then \n```csharp\nawait longRunningTask\n```\n is reached.\nNow, if the \n```csharp\nlongRunningTask\n```\n hasn't finished and it is still running, \n```csharp\nMyMethodAsync()\n```\n will return to its calling method, thus the main thread doesn't get blocked. When the \n```csharp\nlongRunningTask\n```\n is done then a thread from the ThreadPool (can be any thread) will return to \n```csharp\nMyMethodAsync()\n```\n in its previous context and continue execution (in this case printing the result to the console).\n\n\nA second case would be that the \n```csharp\nlongRunningTask\n```\n has already finished its execution and the result is available. When reaching the \n```csharp\nawait longRunningTask\n```\n we already have the result so the code will continue executing on the very same thread. (in this case printing result to console). Of course this is not the case for the above example, where there's a \n```csharp\nTask.Delay(1000)\n```\n involved.",
    "score": 964,
    "tags": [
      "c#",
      ".net",
      "asynchronous",
      "async-await"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:06.896480"
  },
  {
    "instruction": "How do I encode and decode a base64 string?",
    "context": "How do I return a base64 encoded string given a string?\nHow do I decode a base64 encoded string into a string?",
    "output": "Encode\n\n```csharp\npublic static string Base64Encode(string plainText) \n{\n    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n    return System.Convert.ToBase64String(plainTextBytes);\n}\n\n```\n\nDecode\n\n```csharp\npublic static string Base64Decode(string base64EncodedData) \n{\n    var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);\n    return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);\n}\n\n```",
    "score": 2491,
    "tags": [
      "c#",
      "base64"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:07.175534"
  },
  {
    "instruction": "Difference Between Select and SelectMany",
    "context": "I've been searching the difference between \n```csharp\nSelect\n```\n and \n```csharp\nSelectMany\n```\n but I haven't been able to find a suitable answer. I need to learn the difference when using LINQ To SQL but all I've found are standard array examples. \nCan someone provide a LINQ To SQL example?",
    "output": "```csharp\nSelectMany\n```\n flattens queries that return lists of lists. For example\n\n```csharp\npublic class PhoneNumber\n{\n    public string Number { get; set; }\n}\n\npublic class Person\n{\n    public IEnumerable<PhoneNumber> PhoneNumbers { get; set; }\n    public string Name { get; set; }\n}\n\nIEnumerable<Person> people = new List<Person>();\n\n// Select gets a list of lists of phone numbers\nIEnumerable<IEnumerable<PhoneNumber>> phoneLists = people.Select(p => p.PhoneNumbers);\n\n// SelectMany flattens it to just a list of phone numbers.\nIEnumerable<PhoneNumber> phoneNumbers = people.SelectMany(p => p.PhoneNumbers);\n\n// And to include data from the parent in the result: \n// pass an expression to the second parameter (resultSelector) in the overload:\nvar directory = people\n   .SelectMany(p => p.PhoneNumbers,\n               (parent, child) => new { parent.Name, child.Number });\n\n```\n\nLive Demo on .NET Fiddle",
    "score": 1985,
    "tags": [
      "c#",
      "linq-to-sql",
      "linq"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:07.452503"
  },
  {
    "instruction": "Convert a string to an enum in C#",
    "context": "What's the best way to convert a string to an enumeration value in C#?\nI have an HTML select tag containing the values of an enumeration. When the page is posted, I want to pick up the value (which will be in the form of a string) and convert it to the corresponding enumeration value.\nIn an ideal world, I could do something like this:\n\n```csharp\nStatusEnum MyStatus = StatusEnum.Parse(\"Active\");\n\n```\n\nbut that isn't valid code.",
    "output": "In .NET Core and .NET Framework ≥4.0 there is a generic parse method:\n\n```csharp\nEnum.TryParse(\"Active\", out StatusEnum myStatus);\n\n```\n\nThis also includes C#7's new inline \n```csharp\nout\n```\n variables, so this does the try-parse, conversion to the explicit enum type and initialises+populates the \n```csharp\nmyStatus\n```\n variable.\nIf you have access to C#7 and the latest .NET this is the best way.\nOriginal Answer\nIn .NET it's rather ugly (until 4 or above):\n\n```csharp\nStatusEnum MyStatus = (StatusEnum) Enum.Parse(typeof(StatusEnum), \"Active\", true);\n\n```\n\nI tend to simplify this with:\n\n```csharp\npublic static T ParseEnum<T>(string value)\n{\n    return (T) Enum.Parse(typeof(T), value, true);\n}\n\n```\n\nThen I can do:\n\n```csharp\nStatusEnum MyStatus = EnumUtil.ParseEnum<StatusEnum>(\"Active\");\n\n```\n\nOne option suggested in the comments is to add an extension, which is simple enough:\n\n```csharp\npublic static T ToEnum<T>(this string value)\n{\n    return (T) Enum.Parse(typeof(T), value, true);\n}\n\nStatusEnum MyStatus = \"Active\".ToEnum<StatusEnum>();\n\n```\n\nFinally, you may want to have a default enum to use if the string cannot be parsed:\n\n```csharp\npublic static T ToEnum<T>(this string value, T defaultValue) \n{\n    if (string.IsNullOrEmpty(value))\n    {\n        return defaultValue;\n    }\n\n    T result;\n    return Enum.TryParse<T>(value, true, out result) ? result : defaultValue;\n}\n\n```\n\nWhich makes this the call:\n\n```csharp\nStatusEnum MyStatus = \"Active\".ToEnum(StatusEnum.None);\n\n```\n\nHowever, I would be careful adding an extension method like this to \n```csharp\nstring\n```\n as (without namespace control) it will appear on all instances of \n```csharp\nstring\n```\n whether they hold an enum or not (so \n```csharp\n1234.ToString().ToEnum(StatusEnum.None)\n```\n would be valid but nonsensical) . It's often be best to avoid cluttering Microsoft's core classes with extra methods that only apply in very specific contexts unless your entire development team has a very good understanding of what those extensions do.",
    "score": 2211,
    "tags": [
      "c#",
      "string",
      "enums"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:07.710301"
  },
  {
    "instruction": "Call one constructor from another",
    "context": "I have two constructors which feed values to readonly fields.\n\n```csharp\npublic class Sample\n{\n    public Sample(string theIntAsString)\n    {\n        int i = int.Parse(theIntAsString);\n        _intField = i;\n    }\n\n    public Sample(int theInt) => _intField = theInt;\n    public int IntProperty    => _intField;\n\n    private readonly int _intField;\n}\n\n```\n\nOne constructor receives the values directly, and the other does some calculation and obtains the values, then sets the fields.\nNow here's the catch:\n\nI don't want to duplicate the\nsetting code. In this case, just one\nfield is set but of course there may\nwell be more than one.\nTo make the fields readonly, I need\nto set them from the constructor, so\nI can't \"extract\" the shared code to\na utility function.\nI don't know how to call one\nconstructor from another.\n\nAny ideas?",
    "output": "Like this:\n\n```csharp\npublic Sample(string str) : this(int.Parse(str)) { }\n\n```",
    "score": 2140,
    "tags": [
      "c#",
      "constructor"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:07.992953"
  },
  {
    "instruction": "\\d less efficient than [0-9]",
    "context": "I made a comment yesterday on an answer where someone had used \n```csharp\n[0123456789]\n```\n in a regex rather than \n```csharp\n[0-9]\n```\n or \n```csharp\n\\d\n```\n. I said it was probably more efficient to use a range or digit specifier than a character set.\nI decided to test that out today and found out to my surprise that (in the c# regex engine at least) \n```csharp\n\\d\n```\n appears to be less efficient than either of the other two which don't seem to differ much. Here is my test output over 10000 random strings of 1000 random characters with 5077 actually containing a digit:\n\n```csharp\nRegex \\d           took 00:00:00.2141226 result: 5077/10000\nRegex [0-9]        took 00:00:00.1357972 result: 5077/10000  63.42 % of first\nRegex [0123456789] took 00:00:00.1388997 result: 5077/10000  64.87 % of first\n\n```\n\nIt's a surprise to me for two reasons, that I would be interested if anyone can shed some light on:\n\nI would have thought the range would be implemented much more efficiently than the set.\nI can't understand why \n```csharp\n\\d\n```\n is worse than \n```csharp\n[0-9]\n```\n. Is there more to \n```csharp\n\\d\n```\n than simply shorthand for \n```csharp\n[0-9]\n```\n?\n\nHere is the test code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace SO_RegexPerformance\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var rand = new Random(1234);\n            var strings = new List<string>();\n            //10K random strings\n            for (var i = 0; i < 10000; i++)\n            {\n                //generate random string\n                var sb = new StringBuilder();\n                for (var c = 0; c < 1000; c++)\n                {\n                    //add a-z randomly\n                    sb.Append((char)('a' + rand.Next(26)));\n                }\n                //in roughly 50% of them, put a digit\n                if (rand.Next(2) == 0)\n                {\n                    //replace 1 char with a digit 0-9\n                    sb[rand.Next(sb.Length)] = (char)('0' + rand.Next(10));\n                }\n                strings.Add(sb.ToString());\n            }\n\n            var baseTime = testPerfomance(strings, @\"\\d\");\n            Console.WriteLine();\n            var testTime = testPerfomance(strings, \"[0-9]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n            testTime = testPerfomance(strings, \"[0123456789]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n        }\n\n        private static TimeSpan testPerfomance(List<string> strings, string regex)\n        {\n            var sw = new Stopwatch();\n\n            int successes = 0;\n\n            var rex = new Regex(regex);\n\n            sw.Start();\n            foreach (var str in strings)\n            {\n                if (rex.Match(str).Success)\n                {\n                    successes++;\n                }\n            }\n            sw.Stop();\n\n            Console.Write(\"Regex {0,-12} took {1} result: {2}/{3}\", regex, sw.Elapsed, successes, strings.Count);\n\n            return sw.Elapsed;\n        }\n    }\n}\n\n```",
    "output": "```csharp\n\\d\n```\n checks all Unicode digits, while \n```csharp\n[0-9]\n```\n is limited to these 10 characters. For example, Persian digits, \n```csharp\n۱۲۳۴۵۶۷۸۹\n```\n, are an example of Unicode digits which are matched with \n```csharp\n\\d\n```\n, but not \n```csharp\n[0-9]\n```\n.\nYou can generate a list of all such characters using the following code:\n\n```csharp\nvar sb = new StringBuilder();\nfor(UInt16 i = 0; i < UInt16.MaxValue; i++)\n{\n    string str = Convert.ToChar(i).ToString();\n    if (Regex.IsMatch(str, @\"\\d\"))\n        sb.Append(str);\n}\nConsole.WriteLine(sb.ToString());\n\n```\n\nWhich generates:\n\n0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９",
    "score": 1675,
    "tags": [
      "c#",
      "regex",
      "performance"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:08.264767"
  },
  {
    "instruction": "Could not find a part of the path ... bin\\roslyn\\csc.exe",
    "context": "I am trying to run an ASP.NET MVC (model-view-controller) project retrieved from TFS (Team Foundation Server) source control. I have added all assembly references and I am able to build and compile successfully without any error or warning.\nBut I get the following error in the browser:\n\nCould not find a part of the path\n'C:\\B8akWorkspace\\B8akProject\\B8akSolution\\B8AK.Portal\\bin\\roslyn\\csc.exe'.\n\nHere is a full screenshot of the error page.\n\nAfter few days of research, I understood that Roslyn is a .NET compiler platform that offers advanced compiling features. However, I do not understand why my build is trying to find \\bin\\roslyn\\csc.exe because I did not configure anything related to Roslyn. Nor did I intend to use Roslyn in my project.",
    "output": "TL; DR\nrun this in the Package Manager Console:\n\n```csharp\nUpdate-Package Microsoft.CodeDom.Providers.DotNetCompilerPlatform -r\n```\n\nMore information\nThis problem is not related to Visual Studio itself, so answers suggesting adding build steps to copy files over are rather a workaround. Same with adding compiler binaries manually to the project.\nThe Roslyn compiler comes from a NuGet package and there is/was a bug in some versions of that package (I don't know exactly which ones). The solution is to reinstall/upgrade that package to a bug-free version. Originally before I wrote the answer back in 2015 I fixed it by installing following packages at specific versions:\n\nMicrosoft.Net.Compilers 1.1.1\nMicrosoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.1\n\nThen I looked into .csproj and made sure that the paths to packages are correct (in my case ..\\..\\packages\\*.*) inside tags \n```csharp\n<ImportProject>\n```\n on top and in \n```csharp\n<Target>\n```\n with name \"EnsureNuGetPackageBuildImports\" on the bottom. This is on MVC 5 and .NET Framework 4.5.2.",
    "score": 2013,
    "tags": [
      "c#",
      "asp.net",
      ".net",
      "visual-studio",
      "roslyn"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:08.552292"
  },
  {
    "instruction": "How do you get the index of the current iteration of a foreach loop?",
    "context": "Is there some rare language construct I haven't encountered (like the few I've learned recently, some on Stack Overflow) in C# to get a value representing the current iteration of a foreach loop?\nFor instance, I currently do something like this depending on the circumstances:\n\n```csharp\nint i = 0;\nforeach (Object o in collection)\n{\n    // ...\n    i++;\n}\n\n```",
    "output": "Ian Mercer posted a similar solution as this on Phil Haack's blog:\n\n```csharp\nforeach (var item in Model.Select((value, i) => new { i, value }))\n{\n    var value = item.value;\n    var index = item.i;\n}\n\n```\n\nThis gets you the item (\n```csharp\nitem.value\n```\n) and its index (\n```csharp\nitem.i\n```\n) by using this overload of LINQ's \n```csharp\nSelect\n```\n:\n\nthe second parameter of the function [inside Select] represents the index of the source element.\n\nThe \n```csharp\nnew { i, value }\n```\n is creating a new anonymous object.\nHeap allocations can be avoided by using \n```csharp\nValueTuple\n```\n if you're using C# 7.0 or later:\n\n```csharp\nforeach (var item in Model.Select((value, i) => ( value, i )))\n{\n    var value = item.value;\n    var index = item.i;\n}\n\n```\n\nYou can also eliminate the \n```csharp\nitem.\n```\n by using automatic destructuring:\n\n```csharp\nforeach (var (value, i) in Model.Select((value, i) => ( value, i )))\n{\n    // Access `value` and `i` directly here.\n}\n\n```",
    "score": 1018,
    "tags": [
      "c#",
      "foreach"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:08.842978"
  },
  {
    "instruction": "How to mark a method as obsolete or deprecated?",
    "context": "How do I mark a method as obsolete or deprecated using C#?",
    "output": "The shortest way is by adding the \n```csharp\nObsoleteAttribute\n```\n as an attribute to the method. Make sure to include an appropriate explanation:\n\n```csharp\n[Obsolete(\"Method1 is deprecated, please use Method2 instead.\")]\npublic void Method1()\n{ … }\n\n```\n\nYou can also cause the compilation to fail, treating the usage of the method as an error instead of warning, if the method is called from somewhere in code like this:\n\n```csharp\n[Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)]\n\n```",
    "score": 2064,
    "tags": [
      "c#",
      ".net",
      "versioning",
      "deprecated"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:09.098383"
  },
  {
    "instruction": "How can I generate random alphanumeric strings?",
    "context": "How can I generate a random 8 character alphanumeric string in C#?",
    "output": "I heard LINQ is the new black, so here's my attempt using LINQ:\n\n```csharp\nprivate static Random random = new Random();\n\npublic static string RandomString(int length)\n{\n    const string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    return new string(Enumerable.Repeat(chars, length)\n        .Select(s => s[random.Next(s.Length)]).ToArray());\n}\n\n```\n\n(Note: The use of the \n```csharp\nRandom\n```\n class makes this unsuitable for anything security related, such as creating passwords or tokens. Use the \n```csharp\nRNGCryptoServiceProvider\n```\n class if you need a strong random number generator.)",
    "score": 2211,
    "tags": [
      "c#",
      ".net",
      "random"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:09.388828"
  },
  {
    "instruction": "How do I call a generic method using a Type variable?",
    "context": "What's the best way to call a generic method when the type parameter isn't known at compile time, but instead is obtained dynamically at runtime?\nConsider the following sample code - inside the \n```csharp\nExample()\n```\n method, what's the most concise way to invoke \n```csharp\nGenericMethod<T>()\n```\n using the \n```csharp\nType\n```\n stored in the \n```csharp\nmyType\n```\n variable?\n\n```csharp\npublic class Sample\n{\n    public void Example(string typeName)\n    {\n        Type myType = FindType(typeName);\n\n        // What goes here to call GenericMethod<T>()?\n        GenericMethod<myType>(); // This doesn't work\n\n        // What changes to call StaticMethod<T>()?\n        Sample.StaticMethod<myType>(); // This also doesn't work\n    }\n\n    public void GenericMethod<T>()\n    {\n        // ...\n    }\n\n    public static void StaticMethod<T>()\n    {\n        //...\n    }\n}\n\n```",
    "output": "You need to use reflection to get the method to start with, then \"construct\" it by supplying type arguments with MakeGenericMethod:\n\n```csharp\nMethodInfo method = typeof(Sample).GetMethod(nameof(Sample.GenericMethod));\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n```\n\nFor a static method, pass \n```csharp\nnull\n```\n as the first argument to \n```csharp\nInvoke\n```\n. That's nothing to do with generic methods - it's just normal reflection.\nAs noted, a lot of this is simpler as of C# 4 using \n```csharp\ndynamic\n```\n - if you can use type inference, of course. It doesn't help in cases where type inference isn't available, such as the exact example in the question.",
    "score": 1374,
    "tags": [
      "c#",
      ".net",
      "generics",
      "reflection"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:09.669922"
  },
  {
    "instruction": "Group by in LINQ",
    "context": "Let's suppose if we have a class like:\n\n```csharp\nclass Person { \n    internal int PersonID; \n    internal string car; \n}\n\n```\n\nI have a list of this class: \n```csharp\nList<Person> persons;\n```\n\nAnd this list can have multiple instances with same \n```csharp\nPersonID\n```\ns, for example: \n\n```csharp\npersons[0] = new Person { PersonID = 1, car = \"Ferrari\" }; \npersons[1] = new Person { PersonID = 1, car = \"BMW\"     }; \npersons[2] = new Person { PersonID = 2, car = \"Audi\"    }; \n\n```\n\nIs there a way I can group by \n```csharp\nPersonID\n```\n and get the list of all the cars he has? \nFor example, the expected result would be \n\n```csharp\nclass Result { \n   int PersonID;\n   List<string> cars; \n}\n\n```\n\nSo after grouping, I would get: \n\n```csharp\nresults[0].PersonID = 1; \nList<string> cars = results[0].cars; \n\nresult[1].PersonID = 2; \nList<string> cars = result[1].cars;\n\n```\n\nFrom what I have done so far: \n\n```csharp\nvar results = from p in persons\n              group p by p.PersonID into g\n              select new { PersonID = g.Key, // this is where I am not sure what to do\n\n```\n\nCould someone please point me in the right direction?",
    "output": "Absolutely - you basically want:\n\n```csharp\nvar results = from p in persons\n              group p.car by p.PersonId into g\n              select new { PersonId = g.Key, Cars = g.ToList() };\n\n```\n\nOr as a non-query expression:\n\n```csharp\nvar results = persons.GroupBy(\n    p => p.PersonId, \n    p => p.car,\n    (key, g) => new { PersonId = key, Cars = g.ToList() });\n\n```\n\nBasically the contents of the group (when viewed as an \n```csharp\nIEnumerable<T>\n```\n) is a sequence of whatever values were in the projection (\n```csharp\np.car\n```\n in this case) present for the given key.\nFor more on how \n```csharp\nGroupBy\n```\n works, see my Edulinq post on the topic.\n(I've renamed \n```csharp\nPersonID\n```\n to \n```csharp\nPersonId\n```\n in the above, to follow .NET naming conventions, which specifically call this out in the \"Capitalizing Compound Words and Common Terms\" section.)\nAlternatively, you could use a \n```csharp\nLookup\n```\n:\n\n```csharp\nvar carsByPersonId = persons.ToLookup(p => p.PersonId, p => p.car);\n\n```\n\nYou can then get the cars for each person very easily:\n\n```csharp\n// This will be an empty sequence for any personId not in the lookup\nvar carsForPerson = carsByPersonId[personId];\n\n```",
    "score": 2104,
    "tags": [
      "c#",
      "linq",
      "group-by"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:09.943571"
  },
  {
    "instruction": "How do I turn a C# object into a JSON string in .NET?",
    "context": "I have classes like these:\n\n```csharp\nclass MyDate\n{\n    int year, month, day;\n}\n\nclass Lad\n{\n    string firstName;\n    string lastName;\n    MyDate dateOfBirth;\n}\n\n```\n\nAnd I would like to turn a \n```csharp\nLad\n```\n object into a JSON string like this:\n\n```csharp\n{\n    \"firstName\":\"Markoff\",\n    \"lastName\":\"Chaney\",\n    \"dateOfBirth\":\n    {\n        \"year\":\"1901\",\n        \"month\":\"4\",\n        \"day\":\"30\"\n    }\n}\n\n```\n\n(Without the formatting). I found this link, but it uses a namespace that's not in .NET 4. I also heard about JSON.NET, but their site seems to be down at the moment, and I'm not keen on using external DLL files.\nAre there other options besides manually creating a JSON string writer?",
    "output": "Since we all love one-liners\n... this one depends on the Newtonsoft NuGet package, which is popular and better than the default serializer.\n\n```csharp\nNewtonsoft.Json.JsonConvert.SerializeObject(new {foo = \"bar\"})\n\n```\n\nDocumentation: Serializing and Deserializing JSON",
    "score": 1493,
    "tags": [
      "c#",
      ".net",
      "json",
      "serialization"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:10.229504"
  },
  {
    "instruction": "Returning IEnumerable<T> vs. IQueryable<T>",
    "context": "What is the difference between returning \n```csharp\nIQueryable<T>\n```\n vs. \n```csharp\nIEnumerable<T>\n```\n, when should one be preferred over the other?\n\n```csharp\nIQueryable<Customer> custs = from c in db.Customers\nwhere c.City == \"<City>\"\nselect c;\n\nIEnumerable<Customer> custs = from c in db.Customers\nwhere c.City == \"<City>\"\nselect c;\n\n```\n\nWill both be deferred execution and when should one be preferred over the other?",
    "output": "Yes, both will give you deferred execution.\nThe difference is that \n```csharp\nIQueryable<T>\n```\n is the interface that allows LINQ-to-SQL (LINQ.-to-anything really) to work. So if you further refine your query on an \n```csharp\nIQueryable<T>\n```\n, that query will be executed in the database, if possible. \nFor the \n```csharp\nIEnumerable<T>\n```\n case, it will be LINQ-to-object, meaning that all objects matching the original query will have to be loaded into memory from the database.\nIn code:\n\n```csharp\nIQueryable<Customer> custs = ...;\n// Later on...\nvar goldCustomers = custs.Where(c => c.IsGold);\n\n```\n\nThat code will execute SQL to only select gold customers. The following code, on the other hand, will execute the original query in the database, then filtering out the non-gold customers in the memory:\n\n```csharp\nIEnumerable<Customer> custs = ...;\n// Later on...\nvar goldCustomers = custs.Where(c => c.IsGold);\n\n```\n\nThis is quite an important difference, and working on \n```csharp\nIQueryable<T>\n```\n can in many cases save you from returning too many rows from the database. Another prime example is doing paging: If you use \n```csharp\nTake\n```\n and \n```csharp\nSkip\n```\n on \n```csharp\nIQueryable\n```\n, you will only get the number of rows requested; doing that on an \n```csharp\nIEnumerable<T>\n```\n will cause all of your rows to be loaded in memory.",
    "score": 1960,
    "tags": [
      "c#",
      "linq",
      "linq-to-sql",
      "ienumerable",
      "iqueryable"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:10.504670"
  },
  {
    "instruction": "Get property value from string using reflection",
    "context": "I am trying implement the Data transformation using Reflection1 example in my code.\nThe \n```csharp\nGetSourceValue\n```\n function has a switch comparing various types, but I want to remove these types and properties and have \n```csharp\nGetSourceValue\n```\n get the value of the property using only a single string as the parameter.  I want to pass a class and property in the string and resolve the value of the property.\nIs this possible?\n1 Web Archive version of original blog post",
    "output": "```csharp\n public static object GetPropValue(object src, string propName)\n {\n     return src.GetType().GetProperty(propName).GetValue(src, null);\n }\n\n```\n\nOf course, you will want to add validation and whatnot, but that is the gist of it.",
    "score": 2291,
    "tags": [
      "c#",
      "reflection",
      "properties"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:10.787580"
  },
  {
    "instruction": "Collection was modified; enumeration operation may not execute",
    "context": "I can't get to the bottom of this error, because when the debugger is attached, it does not seem to occur.\n\nCollection was modified; enumeration operation may not execute\n\nBelow is the code.\nThis is a WCF server in a Windows service. The method \n```csharp\nNotifySubscribers()\n```\n is called by the service whenever there is a data event (at random intervals, but not very often - about 800 times per day).\nWhen a Windows Forms client subscribes, the subscriber ID is added to the subscribers dictionary, and when the client unsubscribes, it is deleted from the dictionary. The error happens when (or after) a client unsubscribes. It appears that the next time the \n```csharp\nNotifySubscribers()\n```\n method is called, the \n```csharp\nforeach()\n```\n loop fails with the error in the subject line. The method writes the error into the application log as shown in the code below. When a debugger is attached and a client unsubscribes, the code executes fine.\nDo you see a problem with this code? Do I need to make the dictionary thread-safe?\n\n```csharp\n[ServiceBehavior(InstanceContextMode=InstanceContextMode.Single)]\npublic class SubscriptionServer : ISubscriptionServer\n{\n    private static IDictionary<Guid, Subscriber> subscribers;\n\n    public SubscriptionServer()\n    {            \n        subscribers = new Dictionary<Guid, Subscriber>();\n    }\n\n    public void NotifySubscribers(DataRecord sr)\n    {\n        foreach(Subscriber s in subscribers.Values)\n        {\n            try\n            {\n                s.Callback.SignalData(sr);\n            }\n            catch (Exception e)\n            {\n                DCS.WriteToApplicationLog(e.Message, \n                  System.Diagnostics.EventLogEntryType.Error);\n\n                UnsubscribeEvent(s.ClientId);\n            }\n        }\n    }\n    \n    public Guid SubscribeEvent(string clientDescription)\n    {\n        Subscriber subscriber = new Subscriber();\n        subscriber.Callback = OperationContext.Current.\n                GetCallbackChannel<IDCSCallback>();\n\n        subscribers.Add(subscriber.ClientId, subscriber);\n        \n        return subscriber.ClientId;\n    }\n\n    public void UnsubscribeEvent(Guid clientId)\n    {\n        try\n        {\n            subscribers.Remove(clientId);\n        }\n        catch(Exception e)\n        {\n            System.Diagnostics.Debug.WriteLine(\"Unsubscribe Error \" + \n                    e.Message);\n        }\n    }\n}\n\n```",
    "output": "What's likely happening is that \n```csharp\nSignalData\n```\n is indirectly changing the subscribers dictionary under the hood during the loop and leading to that message.  You can verify this by changing\n\n```csharp\nforeach(Subscriber s in subscribers.Values)\n\n```\n\nTo\n\n```csharp\nforeach(Subscriber s in subscribers.Values.ToList())\n\n```\n\nIf I'm right, the problem will disappear.\nCalling \n```csharp\nsubscribers.Values.ToList()\n```\n copies the values of \n```csharp\nsubscribers.Values\n```\n to a separate list at the start of the \n```csharp\nforeach\n```\n. Nothing else has access to this list (it doesn't even have a variable name!), so nothing can modify it inside the loop.",
    "score": 2138,
    "tags": [
      "c#",
      "wcf",
      "concurrency",
      "dictionary",
      "thread-safety"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:11.076013"
  },
  {
    "instruction": "Deserialize JSON into C# dynamic object?",
    "context": "Is there a way to deserialize JSON content into a C# dynamic type? It would be nice to skip creating a bunch of classes in order to use the \n```csharp\nDataContractJsonSerializer\n```\n.",
    "output": "It's pretty simple using Json.NET:\n\n```csharp\ndynamic stuff = JsonConvert.DeserializeObject(\"{ 'Name': 'Jon Smith', 'Address': { 'City': 'New York', 'State': 'NY' }, 'Age': 42 }\");\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n```\n\nAlso \n```csharp\nusing Newtonsoft.Json.Linq\n```\n:\n\n```csharp\ndynamic stuff = JObject.Parse(\"{ 'Name': 'Jon Smith', 'Address': { 'City': 'New York', 'State': 'NY' }, 'Age': 42 }\");\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n```\n\nDocumentation: Querying JSON with dynamic",
    "score": 768,
    "tags": [
      "c#",
      ".net",
      "json",
      "serialization",
      "dynamic"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:11.511417"
  },
  {
    "instruction": "How to group by multiple columns using LINQ",
    "context": "How can I do group by multiple columns in LINQ?\nSomething similar to this in SQL:\n\n```csharp\nSELECT * FROM <TableName> GROUP BY <Column1>,<Column2>\n\n```\n\nHow can I convert this to LINQ:\n\n```csharp\nQuantityBreakdown\n(\n    MaterialID int,\n    ProductID int,\n    Quantity float\n)\n\nINSERT INTO @QuantityBreakdown (MaterialID, ProductID, Quantity)\nSELECT MaterialID, ProductID, SUM(Quantity)\nFROM @Transactions\nGROUP BY MaterialID, ProductID\n\n```",
    "output": "Use an anonymous type.\nEg\n\n```csharp\ngroup x by new { x.Column1, x.Column2 }\n\n```",
    "score": 1401,
    "tags": [
      "c#",
      ".net",
      "linq",
      "group-by"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:11.785138"
  },
  {
    "instruction": "How to escape braces (curly brackets) in a format string in .NET",
    "context": "How can brackets be escaped in using \n```csharp\nstring.Format\n```\n?\nFor example:\n\n```csharp\nString val = \"1,2,3\"\nString.Format(\" foo {{0}}\", val);\n\n```\n\nThis example doesn't throw an exception, but it outputs the string \n```csharp\nfoo {0}\n```\n.\nIs there a way to escape the brackets?",
    "output": "For you to output \n```csharp\n foo {1, 2, 3}\n```\n you have to do something like:\n\n```csharp\nstring t = \"1, 2, 3\";\nstring v = String.Format(\" foo {{{0}}}\", t);\n\n```\n\nTo output a \n```csharp\n{\n```\n you use \n```csharp\n{{\n```\n and to output a \n```csharp\n}\n```\n you use \n```csharp\n}}\n```\n.\nOr now, you can also use C# string interpolation like this (a feature available in C# 6.0)\nEscaping brackets: String interpolation $(\"\"). It is new feature in C# 6.0.\n\n```csharp\nvar inVal = \"1, 2, 3\";\nvar outVal = $\" foo {{{inVal}}}\";\n// The output will be:  foo {1, 2, 3}\n\n```",
    "score": 1500,
    "tags": [
      "c#",
      ".net",
      "string",
      "parsing",
      "formatting"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:12.077158"
  },
  {
    "instruction": "How to convert UTF-8 byte[] to string",
    "context": "I have a \n```csharp\nbyte[]\n```\n array that is loaded from a file that I happen to known contains UTF-8.\nIn some debugging code, I need to convert it to a string. Is there a one-liner that will do this?\nUnder the covers it should be just an allocation and a memcopy, so even if it is not implemented, it should be possible.",
    "output": "```csharp\nstring result = System.Text.Encoding.UTF8.GetString(byteArray);\n\n```\n\nor one of the overload if you know the length:\n\n```csharp\nstring result = System.Text.Encoding.UTF8.GetString(byteArray, 0, 42);\n\n```",
    "score": 1816,
    "tags": [
      "c#",
      ".net",
      "arrays",
      "string",
      "type-conversion"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:12.348726"
  },
  {
    "instruction": "How to set the Content-Type header for an HttpClient request?",
    "context": "I'm trying to set the \n```csharp\nContent-Type\n```\n header of an \n```csharp\nHttpClient\n```\n object as required by an API I am calling.\nI tried setting the \n```csharp\nContent-Type\n```\n like below:\n\n```csharp\nusing (var httpClient = new HttpClient())\n{\n    httpClient.BaseAddress = new Uri(\"http://example.com/\");\n    httpClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n    httpClient.DefaultRequestHeaders.Add(\"Content-Type\", \"application/json\");\n    // ...\n}\n\n```\n\nIt allows me to add the \n```csharp\nAccept\n```\n header but when I try to add \n```csharp\nContent-Type\n```\n it throws the following exception:\n\nMisused header name. Make sure request headers are used with\n  \n```csharp\nHttpRequestMessage\n```\n, response headers with \n```csharp\nHttpResponseMessage\n```\n, and\n  content headers with \n```csharp\nHttpContent\n```\n objects.\n\nHow can I set the \n```csharp\nContent-Type\n```\n header in a \n```csharp\nHttpClient\n```\n request?",
    "output": "The content type is a header of the content, not of the request, which is why this is failing. \n```csharp\nAddWithoutValidation\n```\n as suggested by Robert Levy may work, but you can also set the content type when creating the request content itself (note that the code snippet adds \n```csharp\napplication/json\n```\n in two places-for Accept and Content-Type headers):\n\n```csharp\nHttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(\"http://example.com/\");\nclient.DefaultRequestHeaders\n      .Accept\n      .Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));//ACCEPT header\n\nHttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, \"relativeAddress\");\nrequest.Content = new StringContent(\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":33}\",\n                                    Encoding.UTF8, \n                                    \"application/json\");//CONTENT-TYPE header\n\nclient.SendAsync(request)\n      .ContinueWith(responseTask =>\n      {\n          Console.WriteLine(\"Response: {0}\", responseTask.Result);\n      });\n\n```",
    "score": 1449,
    "tags": [
      "c#",
      "asp.net",
      "rest",
      "content-type",
      "dotnet-httpclient"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:12.606991"
  },
  {
    "instruction": "DateTime vs DateTimeOffset",
    "context": "What is the difference between a \n```csharp\nDateTime\n```\n and a \n```csharp\nDateTimeOffset\n```\n and when should one be used?\n\nCurrently, we have a standard way of dealing with .NET \n```csharp\nDateTime\n```\ns in a TimeZone-aware way: Whenever we produce a \n```csharp\nDateTime\n```\n we do it in UTC (e.g. using \n```csharp\nDateTime.UtcNow\n```\n), and whenever we display one, we convert back from UTC to the user's local time.\nThat works fine, but I've been reading about \n```csharp\nDateTimeOffset\n```\n and how it captures the local and UTC time in the object itself.",
    "output": "```csharp\nDateTimeOffset\n```\n is a representation of instantaneous time (also known as absolute time).  By that, I mean a moment in time that is universal for everyone (not accounting for leap seconds, or the relativistic effects of time dilation).  Another way to represent instantaneous time is with a \n```csharp\nDateTime\n```\n where \n```csharp\n.Kind\n```\n is \n```csharp\nDateTimeKind.Utc\n```\n.\nThis is distinct from calendar time (also known as civil time), which is a position on someone's calendar, and there are many different calendars all over the globe.  We call these calendars time zones.  Calendar time is represented by a \n```csharp\nDateTime\n```\n where \n```csharp\n.Kind\n```\n is \n```csharp\nDateTimeKind.Unspecified\n```\n, or \n```csharp\nDateTimeKind.Local\n```\n.  And \n```csharp\n.Local\n```\n is only meaningful in scenarios where you have an implied understanding of where the computer that is using the result is positioned.  (For example, a user's workstation)\nSo then, why \n```csharp\nDateTimeOffset\n```\n instead of a UTC \n```csharp\nDateTime\n```\n?  It's all about perspective.  Let's use an analogy - we'll pretend to be photographers.\nImagine you are standing on a calendar timeline, pointing a camera at a person on the instantaneous timeline laid out in front of you.  You line up your camera according to the rules of your timezone - which change periodically due to daylight saving time, or due to other changes to the legal definition of your time zone.  (You don't have a steady hand, so your camera is shaky.)  \nThe person standing in the photo would see the angle at which your camera came from. If others were taking pictures, they could be from different angles. This is what the \n```csharp\nOffset\n```\n part of the \n```csharp\nDateTimeOffset\n```\n represents.\nSo if you label your camera \"Eastern Time\", sometimes you are pointing from -5, and sometimes you are pointing from -4.  There are cameras all over the world, all labeled different things, and all pointing at the same instantaneous timeline from different angles.  Some of them are right next to (or on top of) each other, so just knowing the offset isn't enough to determine which timezone the time is related to.\nAnd what about UTC?  Well, it's the one camera out there that is guaranteed to have a steady hand.  It's on a tripod, firmly anchored into the ground. It's not going anywhere.  We call its angle of perspective the zero offset.\n\nSo - what does this analogy tell us?  It provides some intuitive guidelines-\n\nIf you are representing time relative to some place in particular, represent it in calendar time with a \n```csharp\nDateTime\n```\n.  Just be sure you don't ever confuse one calendar with another.  \n```csharp\nUnspecified\n```\n should be your assumption.  \n```csharp\nLocal\n```\n is only useful coming from \n```csharp\nDateTime.Now\n```\n.  For example, I might get \n```csharp\nDateTime.Now\n```\n and save it in a database - but when I retrieve it, I have to assume that it is \n```csharp\nUnspecified\n```\n.  I can't rely that my local calendar is the same calendar that it was originally taken from.\nIf you must always be certain of the moment, make sure you are representing instantaneous time.  Use \n```csharp\nDateTimeOffset\n```\n to enforce it, or use UTC \n```csharp\nDateTime\n```\n by convention.\nIf you need to track a moment of instantaneous time, but you want to also know \"What time did the user think it was on their local calendar?\" - then you must use a \n```csharp\nDateTimeOffset\n```\n.  This is very important for timekeeping systems, for example - both for technical and legal concerns.\nIf you ever need to modify a previously recorded \n```csharp\nDateTimeOffset\n```\n - you don't have enough information in the offset alone to ensure that the new offset is still relevant for the user.  You must also store a timezone identifier  (think - I need the name of that camera so I can take a new picture even if the position has changed).\nIt should also be pointed out that Noda Time has a representation called \n```csharp\nZonedDateTime\n```\n for this, while the .Net base class library does not have anything similar.  You would need to store both a \n```csharp\nDateTimeOffset\n```\n and a \n```csharp\nTimeZoneInfo.Id\n```\n value.\nOccasionally, you will want to represent a calendar time that is local to \"whomever is looking at it\".  For example, when defining what today means.  Today is always midnight to midnight, but these represent a near-infinite number of overlapping ranges on the instantaneous timeline.  (In practice we have a finite number of timezones, but you can express offsets down to the tick)  So in these situations, make sure you understand how to either limit the \"who's asking?\" question down to a single time zone, or deal with translating them back to instantaneous time as appropriate.\n\nHere are a few other little bits about \n```csharp\nDateTimeOffset\n```\n that back up this analogy, and some tips for keeping it straight:\n\nIf you compare two \n```csharp\nDateTimeOffset\n```\n values, they are first normalized to zero offset before comparing.  In other words, \n```csharp\n2012-01-01T00:00:00+00:00\n```\n and \n```csharp\n2012-01-01T02:00:00+02:00\n```\n refer to the same instantaneous moment, and are therefore equivalent.\nIf you are doing any unit testing and need to be certain of the offset, test both the \n```csharp\nDateTimeOffset\n```\n value, and the \n```csharp\n.Offset\n```\n property separately.\nThere is a one-way implicit conversion built in to the .Net framework that lets you pass a \n```csharp\nDateTime\n```\n into any \n```csharp\nDateTimeOffset\n```\n parameter or variable.  When doing so, the \n```csharp\n.Kind\n```\n matters.  If you pass a UTC kind, it will carry in with a zero offset, but if you pass either \n```csharp\n.Local\n```\n or \n```csharp\n.Unspecified\n```\n, it will assume to be local.  The framework is basically saying, \"Well, you asked me to convert calendar time to instantaneous time, but I have no idea where this came from, so I'm just going to use the local calendar.\"  This is a huge gotcha if you load up an unspecified \n```csharp\nDateTime\n```\n on a computer with a different timezone.  (IMHO - that should throw an exception - but it doesn't.)\n\nShameless Plug:\nMany people have shared with me that they find this analogy extremely valuable, so I included it in my Pluralsight course, Date and Time Fundamentals.  You'll find a step-by-step walkthrough of the camera analogy in the second module, \"Context Matters\", in the clip titled \"Calendar Time vs. Instantaneous Time\".",
    "score": 1792,
    "tags": [
      "c#",
      ".net",
      "datetime",
      "timezone",
      "datetimeoffset"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:12.882511"
  },
  {
    "instruction": "Why would you use Expression<Func<T>> rather than Func<T>?",
    "context": "I understand lambdas and the \n```csharp\nFunc\n```\n and \n```csharp\nAction\n```\n delegates. But expressions \nstump me. \nIn what circumstances would you use an \n```csharp\nExpression<Func<T>>\n```\n rather than a plain old \n```csharp\nFunc<T>\n```\n?",
    "output": "When you want to treat lambda expressions as expression trees and look inside them instead of executing them. For example, LINQ to SQL gets the expression and converts it to the equivalent SQL statement and submits it to server (rather than executing the lambda).\nConceptually, \n```csharp\nExpression<Func<T>>\n```\n is completely different from \n```csharp\nFunc<T>\n```\n. \n```csharp\nFunc<T>\n```\n denotes a \n```csharp\ndelegate\n```\n which is pretty much a pointer to a method and \n```csharp\nExpression<Func<T>>\n```\n denotes a tree data structure for a lambda expression. This tree structure describes what a lambda expression does rather than doing the actual thing. It basically holds data about the composition of expressions, variables, method calls, ... (for example it holds information such as this lambda is some constant + some parameter). You can use this description to convert it to an actual method (with \n```csharp\nExpression.Compile\n```\n) or do other stuff (like the LINQ to SQL example) with it. The act of treating lambdas as anonymous methods and expression trees is purely a compile time thing.\n\n```csharp\nFunc<int> myFunc = () => 10; // similar to: int myAnonMethod() { return 10; }\n\n```\n\nwill effectively compile to an IL method that gets nothing and returns 10.\n\n```csharp\nExpression<Func<int>> myExpression = () => 10;\n\n```\n\nwill be converted to a data structure that describes an expression that gets no parameters and returns the value 10:\n larger image\nWhile they both look the same at compile time, what the compiler generates is totally different.",
    "score": 1330,
    "tags": [
      "c#",
      "delegates",
      "lambda",
      "expression-trees"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:13.159625"
  },
  {
    "instruction": "LINQ query on a DataTable",
    "context": "I'm trying to perform a LINQ query on a DataTable object and bizarrely I am finding that performing such queries on DataTables is not straightforward. For example:\n\n```csharp\nvar results = from myRow in myDataTable\nwhere results.Field(\"RowNo\") == 1\nselect results;\n\n```\n\nThis is not allowed. How do I get something like this working?\nI'm amazed that LINQ queries are not allowed on DataTables!",
    "output": "You can't query against the \n```csharp\nDataTable\n```\n's Rows collection, since \n```csharp\nDataRowCollection\n```\n doesn't implement \n```csharp\nIEnumerable<T>\n```\n. You need to use the \n```csharp\nAsEnumerable()\n```\n extension for \n```csharp\nDataTable\n```\n. Like so:\n\n```csharp\nvar results = from myRow in myDataTable.AsEnumerable()\nwhere myRow.Field<int>(\"RowNo\") == 1\nselect myRow;\n\n```\n\nAnd as @Keith says, you'll need to add a reference to System.Data.DataSetExtensions\n\n```csharp\nAsEnumerable()\n```\n returns \n```csharp\nIEnumerable<DataRow>\n```\n. If you need to convert \n```csharp\nIEnumerable<DataRow>\n```\n to a \n```csharp\nDataTable\n```\n, use the \n```csharp\nCopyToDataTable()\n```\n extension.\nBelow is query with Lambda Expression,\n\n```csharp\nvar result = myDataTable\n    .AsEnumerable()\n    .Where(myRow => myRow.Field<int>(\"RowNo\") == 1);\n\n```",
    "score": 1421,
    "tags": [
      "c#",
      ".net",
      "linq",
      "datatable",
      ".net-3.5"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:13.438640"
  },
  {
    "instruction": "How can I get the application's path in a .NET console application?",
    "context": "How do I find the application's path in a console application?\nIn Windows Forms, I can use \n```csharp\nApplication.StartupPath\n```\n to find the current path, but this doesn't seem to be available in a console application.",
    "output": "```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly()\n```\n.\n```csharp\nLocation\n```\n1\nCombine that with \n```csharp\nSystem.IO.Path.GetDirectoryName\n```\n if all you want is the directory.\n\n1As per Mr.Mindor's comment:\n\n```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly().Location\n```\n returns where the executing assembly is currently located, which may or may not be where the assembly is located when not executing. In the case of shadow copying assemblies, you will get a path in a temp directory. \n```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly().CodeBase\n```\n will return the 'permanent' path of the assembly.",
    "score": 1360,
    "tags": [
      "c#",
      ".net",
      "console",
      "console-application"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:13.714829"
  },
  {
    "instruction": "Randomize a List<T>",
    "context": "What is the best way to randomize the order of a generic list in C#? I've got a finite set of 75 numbers in a list I would like to assign a random order to, in order to draw them for a lottery type application.",
    "output": "Shuffle any \n```csharp\n(I)List\n```\n with an extension method based on the Fisher-Yates shuffle:\n\n```csharp\nprivate static Random rng = new Random();  \n\npublic static void Shuffle<T>(this IList<T> list)  \n{  \n    int n = list.Count;  \n    while (n > 1) {  \n        n--;  \n        int k = rng.Next(n + 1);  \n        T value = list[k];  \n        list[k] = list[n];  \n        list[n] = value;  \n    }  \n}\n\n```\n\nUsage:\n\n```csharp\nList<Product> products = GetProducts();\nproducts.Shuffle();\n\n```\n\nThe code above uses the much criticised System.Random method to select swap candidates. It's fast but not as random as it should be. If you need a better quality of randomness in your shuffles use the random number generator in System.Security.Cryptography like so:\n\n```csharp\nusing System.Security.Cryptography;\n...\npublic static void Shuffle<T>(this IList<T> list)\n{\n    RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();\n    int n = list.Count;\n    while (n > 1)\n    {\n        byte[] box = new byte[1];\n        do provider.GetBytes(box);\n        while (!(box[0] < n * (Byte.MaxValue / n)));\n        int k = (box[0] % n);\n        n--;\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n    }\n}\n\n```\n\nA simple comparison is available at this blog (WayBack Machine).\nEdit: Since writing this answer a couple years back, many people have commented or written to me, to point out the big silly flaw in my comparison. They are of course right. There's nothing wrong with System.Random if it's used in the way it was intended. In my first example above, I instantiate the rng variable inside of the Shuffle method, which is asking for trouble if the method is going to be called repeatedly. Below is a fixed, full example based on a really useful comment received today from @weston here on SO.\nProgram.cs:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace SimpleLottery\n{\n  class Program\n  {\n    private static void Main(string[] args)\n    {\n      var numbers = new List<int>(Enumerable.Range(1, 75));\n      numbers.Shuffle();\n      Console.WriteLine(\"The winning numbers are: {0}\", string.Join(\",  \", numbers.GetRange(0, 5)));\n    }\n  }\n\n  public static class ThreadSafeRandom\n  {\n      [ThreadStatic] private static Random Local;\n\n      public static Random ThisThreadsRandom\n      {\n          get { return Local ?? (Local = new Random(unchecked(Environment.TickCount * 31 + Thread.CurrentThread.ManagedThreadId))); }\n      }\n  }\n\n  static class MyExtensions\n  {\n    public static void Shuffle<T>(this IList<T> list)\n    {\n      int n = list.Count;\n      while (n > 1)\n      {\n        n--;\n        int k = ThreadSafeRandom.ThisThreadsRandom.Next(n + 1);\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n      }\n    }\n  }\n}\n\n```",
    "score": 1433,
    "tags": [
      "c#",
      "list",
      "random",
      "shuffle"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:13.988226"
  },
  {
    "instruction": "Creating a byte array from a stream",
    "context": "What is the prefered method for creating a byte array from an input stream? \nHere is my current solution with .NET 3.5. \n\n```csharp\nStream s;\nbyte[] b;\n\nusing (BinaryReader br = new BinaryReader(s))\n{\n    b = br.ReadBytes((int)s.Length);\n}\n\n```\n\nIs it still a better idea to read and write chunks of the stream?",
    "output": "It really depends on whether or not you can trust \n```csharp\ns.Length\n```\n. For many streams, you just don't know how much data there will be. In such cases - and before .NET 4 - I'd use code like this:\n\n```csharp\npublic static byte[] ReadFully(Stream input)\n{\n    byte[] buffer = new byte[16*1024];\n    using (MemoryStream ms = new MemoryStream())\n    {\n        int read;\n        while ((read = input.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        return ms.ToArray();\n    }\n}\n\n```\n\nWith .NET 4 and above, I'd use \n```csharp\nStream.CopyTo\n```\n, which is basically equivalent to the loop in my code - create the \n```csharp\nMemoryStream\n```\n, call \n```csharp\nstream.CopyTo(ms)\n```\n and then return \n```csharp\nms.ToArray()\n```\n. Job done.\nI should perhaps explain why my answer is longer than the others. \n```csharp\nStream.Read\n```\n doesn't guarantee that it will read everything it's asked for. If you're reading from a network stream, for example, it may read one packet's worth and then return, even if there will be more data soon. \n```csharp\nBinaryReader.Read\n```\n will keep going until the end of the stream or your specified size, but you still have to know the size to start with.\nThe above method will keep reading (and copying into a \n```csharp\nMemoryStream\n```\n) until it runs out of data. It then asks the \n```csharp\nMemoryStream\n```\n to return a copy of the data in an array. If you know the size to start with - or think you know the size, without being sure - you can construct the \n```csharp\nMemoryStream\n```\n to be that size to start with. Likewise you can put a check at the end, and if the length of the stream is the same size as the buffer (returned by \n```csharp\nMemoryStream.GetBuffer\n```\n) then you can just return the buffer. So the above code isn't quite optimised, but will at least be correct. It doesn't assume any responsibility for closing the stream - the caller should do that.\nSee this article for more info (and an alternative implementation).",
    "score": 1482,
    "tags": [
      "c#",
      ".net-3.5",
      "inputstream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:14.264874"
  },
  {
    "instruction": "How to count occurrences of a char\\string within a string?",
    "context": "I want to count how many \n```csharp\n/\n```\ns I could find in a string. There are several ways to do it, but I couldn't decide on what the best (or easiest) is.\nAt the moment I'm going with something like:\n\n```csharp\nstring source = \"/once/upon/a/time/\";\nint count = source.Length - source.Replace(\"/\", \"\").Length;\n\n```\n\nOr for strings where length > 1:\n\n```csharp\nstring haystack = \"/once/upon/a/time\";\nstring needle = \"/\";\nint needleCount = ( haystack.Length - haystack.Replace(needle,\"\").Length ) / needle.Length;\n\n```",
    "output": "If you're using .NET 3.5 you can do this in a one-liner with LINQ:\n\n```csharp\nint count = source.Count(f => f == '/');\n\n```\n\nIf you don't want to use LINQ you can do it with:\n\n```csharp\nint count = source.Split('/').Length - 1;\n\n```\n\n\nYou might be surprised to learn that your original technique seems to be about 30% faster than either of these! I've just done a quick benchmark with \"/once/upon/a/time/\" and the results are as follows:\n\nYour original = 12s\n  source.Count = 19s\n  source.Split = 17s\n  foreach (from bobwienholt's answer) = 10s \n\n(The times are for 50,000,000 iterations so you're unlikely to notice much difference in the real world.)",
    "score": 1245,
    "tags": [
      "c#",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:14.545828"
  },
  {
    "instruction": "Creating a comma separated list from IList<string> or IEnumerable<string>",
    "context": "What is the cleanest way to create a comma-separated list of string values from an \n```csharp\nIList<string>\n```\n or \n```csharp\nIEnumerable<string>\n```\n?\n\n```csharp\nString.Join(...)\n```\n operates on a \n```csharp\nstring[]\n```\n so can be cumbersome to work with when types such as \n```csharp\nIList<string>\n```\n or \n```csharp\nIEnumerable<string>\n```\n cannot easily be converted into a string array.",
    "output": ".NET 4+\n\n```csharp\nIList<string> strings = new List<string>{\"1\",\"2\",\"testing\"};\nstring joined = string.Join(\",\", strings);\n\n```\n\nDetail & Pre .Net 4.0 Solutions\n\n```csharp\nIEnumerable<string>\n```\n can be converted into a string array very easily with LINQ (.NET 3.5):\n\n```csharp\nIEnumerable<string> strings = ...;\nstring[] array = strings.ToArray();\n\n```\n\nIt's easy enough to write the equivalent helper method if you need to:\n\n```csharp\npublic static T[] ToArray(IEnumerable<T> source)\n{\n    return new List<T>(source).ToArray();\n}\n\n```\n\nThen call it like this:\n\n```csharp\nIEnumerable<string> strings = ...;\nstring[] array = Helpers.ToArray(strings);\n\n```\n\nYou can then call \n```csharp\nstring.Join\n```\n. Of course, you don't have to use a helper method:\n\n```csharp\n// C# 3 and .NET 3.5 way:\nstring joined = string.Join(\",\", strings.ToArray());\n// C# 2 and .NET 2.0 way:\nstring joined = string.Join(\",\", new List<string>(strings).ToArray());\n\n```\n\nThe latter is a bit of a mouthful though :)\nThis is likely to be the simplest way to do it, and quite performant as well - there are other questions about exactly what the performance is like, including (but not limited to) this one.\nAs of .NET 4.0, there are more overloads available in \n```csharp\nstring.Join\n```\n, so you can actually just write:\n\n```csharp\nstring joined = string.Join(\",\", strings);\n\n```\n\nMuch simpler :)",
    "score": 1813,
    "tags": [
      "c#",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:14.819612"
  },
  {
    "instruction": ".NET String.Format() to add commas in thousands place for a number",
    "context": "I want to add a comma in the thousands place for a number.\nWould \n```csharp\nString.Format()\n```\n be the correct path to take? What format would I use?",
    "output": "```csharp\n$\"{1234:n}\";  // Output: 1,234.00\n$\"{9876:n0}\"; // No digits after the decimal point. Output: 9,876\n\n```",
    "score": 1564,
    "tags": [
      "c#",
      ".net",
      "string",
      "format"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:15.091915"
  },
  {
    "instruction": "What is the yield keyword used for in C#?",
    "context": "In the How Can I Expose Only a Fragment of IList<> question one of the answers had the following code snippet:\n\n```csharp\nIEnumerable<object> FilteredList()\n{\n    foreach(object item in FullList)\n    {\n        if(IsItemInPartialList(item))\n            yield return item;\n    }\n}\n\n```\n\nWhat does the yield keyword do there?  I've seen it referenced in a couple places, and one other question, but I haven't quite figured out what it actually does.  I'm used to thinking of yield in the sense of one thread yielding to another, but that doesn't seem relevant here.",
    "output": "The \n```csharp\nyield\n```\n contextual keyword actually does quite a lot here.\nThe function returns an object that implements the \n```csharp\nIEnumerable<object>\n```\n interface. If a calling function starts \n```csharp\nforeach\n```\ning over this object, the function is called again until it \"yields\". This is syntactic sugar introduced in C# 2.0. In earlier versions you had to create your own \n```csharp\nIEnumerable\n```\n and \n```csharp\nIEnumerator\n```\n objects to do stuff like this.\nThe easiest way understand code like this is to type-in an example, set some breakpoints and see what happens. Try stepping through this example:\n\n```csharp\npublic void Consumer()\n{\n    foreach(int i in Integers())\n    {\n        Console.WriteLine(i.ToString());\n    }\n}\n\npublic IEnumerable<int> Integers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 4;\n    yield return 8;\n    yield return 16;\n    yield return 16777216;\n}\n\n```\n\nWhen you step through the example, you'll find the first call to \n```csharp\nIntegers()\n```\n returns \n```csharp\n1\n```\n. The second call returns \n```csharp\n2\n```\n and the line \n```csharp\nyield return 1\n```\n is not executed again.\nHere is a real-life example:\n\n```csharp\npublic IEnumerable<T> Read<T>(string sql, Func<IDataReader, T> make, params object[] parms)\n{\n    using (var connection = CreateConnection())\n    {\n        using (var command = CreateCommand(CommandType.Text, sql, connection, parms))\n        {\n            command.CommandTimeout = dataBaseSettings.ReadCommandTimeout;\n            using (var reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    yield return make(reader);\n                }\n            }\n        }\n    }\n}\n\n```",
    "score": 970,
    "tags": [
      "c#",
      "yield"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:15.368012"
  },
  {
    "instruction": "Escape curly brace '{' in String.Format",
    "context": "How do I display a literal curly brace character when using the String.Format method?\nExample:\n\n```csharp\nsb.AppendLine(String.Format(\"public {0} {1} { get; private set; }\", \nprop.Type, prop.Name));\n\n```\n\nI would like the output to look like this:\n\n```csharp\npublic Int32 MyProperty { get; private set; }\n\n```",
    "output": "Use double braces \n```csharp\n{{\n```\n or \n```csharp\n}}\n```\n so your code becomes:\n\n```csharp\nsb.AppendLine(String.Format(\"public {0} {1} {{ get; private set; }}\", \nprop.Type, prop.Name));\n\n// For prop.Type of \"Foo\" and prop.Name of \"Bar\", the result would be:\n// public Foo Bar { get; private set; }\n\n```",
    "score": 1614,
    "tags": [
      "c#",
      ".net",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:15.657104"
  },
  {
    "instruction": "Best way to repeat a character in C#",
    "context": "What is the best way to generate a string of \n```csharp\n\\t\n```\n's in C#?\nI am learning C# and experimenting with different ways of saying the same thing.\n\n```csharp\nTabs(uint t)\n```\n is a function that returns a \n```csharp\nstring\n```\n with \n```csharp\nt\n```\n amount of \n```csharp\n\\t\n```\n's\nFor example, \n```csharp\nTabs(3)\n```\n returns \n```csharp\n\"\\t\\t\\t\"\n```\n\nWhich of these three ways of implementing \n```csharp\nTabs(uint numTabs)\n```\n is best?\nOf course that depends on what \"best\" means.\n\nThe LINQ version is only two lines, which is nice.  But are the calls to Repeat and Aggregate unnecessarily time/resource consuming?\n\nThe \n```csharp\nStringBuilder\n```\n version is very clear, but is the \n```csharp\nStringBuilder\n```\n class somehow slower?\n\nThe \n```csharp\nstring\n```\n version is basic, which means it is easy to understand.\n\nDoes it not matter at all?  Are they all equal?\n\n\nThese are all questions to help me get a better feel for C#.\n\n```csharp\nprivate string Tabs(uint numTabs)\n{\n    IEnumerable<string> tabs = Enumerable.Repeat(\"\\t\", (int) numTabs);\n    return (numTabs > 0) ? tabs.Aggregate((sum, next) => sum + next) : \"\";\n}\n\nprivate string Tabs(uint numTabs)\n{\n    StringBuilder sb = new StringBuilder();\n    for (uint i = 0; i < numTabs; i++)\n        sb.Append(\"\\t\");\n\n    return sb.ToString();\n}\n\nprivate string Tabs(uint numTabs)\n{\n    string output = \"\";\n    for (uint i = 0; i < numTabs; i++)\n    {\n        output += '\\t';\n    }\n    return output;\n}\n\n```",
    "output": "What about this:\n\n```csharp\nstring tabs = new string('\\t', n);\n\n```\n\nWhere \n```csharp\nn\n```\n is the number of times you want to repeat the string.\nOr better:\n\n```csharp\nstatic string Tabs(int n)\n{\n    return new string('\\t', n);\n}\n\n```",
    "score": 1926,
    "tags": [
      "c#",
      ".net",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:15.929202"
  },
  {
    "instruction": "Given a DateTime object, how do I get an ISO 8601 date in string format?",
    "context": "Given:\n\n```csharp\nDateTime.UtcNow\n\n```\n\nHow do I get a string which represents the same value in an ISO 8601-compliant format?\nNote that ISO 8601 defines a number of similar formats. The specific format I am looking for is:\n\n```csharp\nyyyy-MM-ddTHH:mm:ssZ\n\n```",
    "output": "Note to readers: Several commenters have pointed out some problems in this answer (related particularly to the first suggestion). Refer to the comments section for more information.\n\n\n```csharp\n// Do not use this\nDateTime.UtcNow.ToString(\"yyyy-MM-ddTHH\\\\:mm\\\\:ss.fffffffzzz\", CultureInfo.InvariantCulture);\n\n```\n\nUsing custom date-time formatting, this gives you a date similar to\n2008-09-22T13:57:31.2311892-04:00.\nAnother way is:\n\n```csharp\n// Prefer this, to avoid having to manually define a framework-provided format\nDateTime.UtcNow.ToString(\"o\", CultureInfo.InvariantCulture);\n\n```\n\nwhich uses the standard \"round-trip\" style (ISO 8601) to give you\n2008-09-22T14:01:54.9571247Z.\nTo get the specified format, you can use:\n\n```csharp\nDateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\", CultureInfo.InvariantCulture)\n\n```",
    "score": 1032,
    "tags": [
      "c#",
      "datetime",
      "datetime-format",
      "iso8601"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:16.204255"
  },
  {
    "instruction": "How do I generate a stream from a string?",
    "context": "I need to write a unit test for a method that takes a stream which comes from a text file. I would like to do do something like this:\n\n```csharp\nStream s = GenerateStreamFromString(\"a,b \\n c,d\");\n\n```",
    "output": "```csharp\npublic static Stream GenerateStreamFromString(string s)\n{\n    var stream = new MemoryStream();\n    var writer = new StreamWriter(stream);\n    writer.Write(s);\n    writer.Flush();\n    stream.Position = 0;\n    return stream;\n}\n\n```\n\nDon't forget to use Using:\n\n```csharp\nusing (var stream = GenerateStreamFromString(\"a,b \\n c,d\"))\n{\n    // ... Do stuff to stream\n}\n\n```\n\n\nAbout the \n```csharp\nStreamWriter\n```\n not being disposed. \n```csharp\nStreamWriter\n```\n is just a wrapper around the base stream, and doesn't use any resources that need to be disposed. The \n```csharp\nDispose\n```\n method will close the underlying \n```csharp\nStream\n```\n that \n```csharp\nStreamWriter\n```\n is writing to. In this case that is the \n```csharp\nMemoryStream\n```\n we want to return.\nIn .NET 4.5 there is now an overload for \n```csharp\nStreamWriter\n```\n that keeps the underlying stream open after the writer is disposed of, but this code does the same thing and works with other versions of .NET too.\nSee Is there any way to close a StreamWriter without closing its BaseStream?",
    "score": 1276,
    "tags": [
      "c#",
      "unit-testing",
      "string",
      "stream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:16.499190"
  },
  {
    "instruction": "What's the difference between the 'ref' and 'out' keywords?",
    "context": "I'm creating a function where I need to pass an object so that it can be modified by the function. What is the difference between:\n\n```csharp\npublic void myFunction(ref MyClass someClass)\n\n```\n\nand\n\n```csharp\npublic void myFunction(out MyClass someClass)\n\n```\n\nWhich should I use and why?",
    "output": "```csharp\nref\n```\n tells the compiler that the object is initialized before entering the function, while \n```csharp\nout\n```\n tells the compiler that the object will be initialized inside the function. \nSo while \n```csharp\nref\n```\n is two-ways, \n```csharp\nout\n```\n is out-only.",
    "score": 1334,
    "tags": [
      "c#",
      "reference",
      "keyword",
      "out",
      "ref"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:16.792984"
  },
  {
    "instruction": "decimal vs double! - Which one should I use and when?",
    "context": "I keep seeing people using doubles in C#. I know I read somewhere that doubles sometimes lose precision. \nMy question is when should a use a double and when should I use a decimal type?\nWhich type is suitable for money computations? (ie. greater than $100 million)",
    "output": "For money, always decimal. It's why it was created.\nIf numbers must add up correctly or balance, use decimal. This includes any financial storage or calculations, scores, or other numbers that people might do by hand.\nIf the exact value of numbers is not important, use double for speed. This includes graphics, physics or other physical sciences computations where there is already a \"number of significant digits\".",
    "score": 1265,
    "tags": [
      "c#",
      "double",
      "decimal",
      "precision",
      "currency"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:17.055492"
  },
  {
    "instruction": "What is the difference between .NET Core and .NET Standard Class Library project types?",
    "context": "In Visual Studio, there are at least three different types of class libraries you can create:\n\nClass Library (.NET Framework)\nClass Library (.NET Standard)\nClass Library (.NET Core)\n\nWhile the first is what we've been using for years, a major point of confusion I've been having is when to use the .NET Standard and .NET Core class library types. I've been bitten by this recently when attempting to multi-target different framework versions, and creating a unit test project.\nSo, what is the difference between Class Library (.NET Standard) and Class Library (.NET Core), why do both exist, and when should we use one over the other?",
    "output": "When should we use one over the other?\n\nThe decision is a trade-off between compatibility and API access.\nUse a .NET Standard library when you want to increase the number of applications that will be compatible with your library, and you are okay with a decrease in the .NET API surface area your library can access.\nUse a .NET Core library when you want to increase the .NET API surface area your library can access, and you are okay with allowing only .NET Core applications to be compatible with your library.\nFor example, a library that targets .NET Standard 1.3 will be compatible with applications that target .NET Framework 4.6, .NET Core 1.0, Universal Windows Platform 10.0, and any other platform that supports .NET Standard 1.3. The library will not have access to some parts of the .NET API, though. For instance, the  \n```csharp\nMicrosoft.NETCore.CoreCLR\n```\n package is compatible with .NET Core, but not with .NET Standard.\n\nWhat is the difference between Class Library (.NET Standard) and Class Library (.NET Core)?\n\nCompatibility: Libraries that target .NET Standard will run on any .NET Standard compliant runtime, such as .NET Core, .NET Framework, Mono/Xamarin. On the other hand, libraries that target .NET Core can only run on the .NET Core runtime.\nAPI Surface Area: .NET Standard libraries come with everything in \n```csharp\nNETStandard.Library\n```\n, whereas .NET Core libraries come with everything in \n```csharp\nMicrosoft.NETCore.App\n```\n. The latter includes approximately 20 additional libraries, some of which we can add manually to our .NET Standard library (such as \n```csharp\nSystem.Threading.Thread\n```\n) and some of which are not compatible with the .NET Standard (such as \n```csharp\nMicrosoft.NETCore.CoreCLR\n```\n).\nAlso, .NET Core libraries specify a runtime and come with an application model. That's important, for instance, to make unit test class libraries runnable.\n\nWhy do both exist?\n\nIgnoring libraries for a moment, the reason that .NET Standard exists is for portability; it defines a set of APIs that .NET platforms agree to implement. Any platform that implements a .NET Standard is compatible with libraries that target that .NET Standard. One of those compatible platforms is .NET Core.\nComing back to libraries, the .NET Standard library templates exist to run on multiple runtimes (at the expense of API surface area). Conversely, the .NET Core library templates exist to access more API surface area (at the expense of compatibility) and to specify a platform against which to build an executable.\nHere is an interactive matrix that shows which .NET Standard supports which .NET implementation(s) and how much API surface area is available.",
    "score": 777,
    "tags": [
      "c#",
      ".net",
      ".net-core",
      ".net-standard",
      "class-library"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:17.340418"
  },
  {
    "instruction": "How can I convert a Unix timestamp to DateTime and vice versa?",
    "context": "There is this example code, but then it starts talking about millisecond / nanosecond problems.\nThe same question is on MSDN, Seconds since the Unix epoch in C#.\nThis is what I've got so far:\n\n```csharp\npublic Double CreatedEpoch\n{\n  get\n  {\n    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\n    TimeSpan span = (this.Created.ToLocalTime() - epoch);\n    return span.TotalSeconds;\n  }\n  set\n  {\n    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\n    this.Created = epoch.AddSeconds(value);\n  }\n}\n\n```",
    "output": "Here's what you need:\n\n```csharp\npublic static DateTime UnixTimeStampToDateTime( double unixTimeStamp )\n{\n    // Unix timestamp is seconds past epoch\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddSeconds( unixTimeStamp ).ToLocalTime();\n    return dateTime;\n}\n\n```\n\nOr, for Java (which is different because the timestamp is in milliseconds, not seconds):\n\n```csharp\npublic static DateTime JavaTimeStampToDateTime( double javaTimeStamp )\n{\n    // Java timestamp is milliseconds past epoch\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddMilliseconds( javaTimeStamp ).ToLocalTime();\n    return dateTime;\n}\n\n```",
    "score": 1276,
    "tags": [
      "c#",
      "datetime",
      "unix",
      "epoch",
      "data-conversion"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:17.624053"
  },
  {
    "instruction": "Metadata file '.dll' could not be found",
    "context": "I am working on a WPF, C# 3.0 project, and I get this error:\n\n```csharp\nError 1 Metadata file\n'WORK=- \\Tools\\VersionManagementSystem\\BusinessLogicLayer\\bin\\Debug\n\\BusinessLogicLayer.dll' could not be found C:\\-=WORK=- \\Tools\n\\VersionManagementSystem\\VersionManagementSystem\\CSC VersionManagementSystem\n\n```\n\nThis is how I reference my usercontrols:\n\n```csharp\nxmlns:vms=\"clr-namespace:VersionManagementSystem\"\n<vms:SignOffProjectListing Margin=\"5\"/>\n\n```\n\nIt happens after every failed build. The only way I can get the solution to compile is to comment-out all my user controls and re-build the project. Then I uncomment the usercontrols and everything is fine.\nI have checked build orders and dependency configurations.\nAs you can see, it seems to have truncated the DLL file's absolute path... I have read that there is a bug with the length. Is this a possible problem?\nIt's very annoying and having to comment, build, and uncomment, the build is becoming extremely tiresome.",
    "output": "I just had the same problem. Visual Studio isn't building the project that's being referenced.\nWritten Instructions:\n\nRight click on the solution and click Properties.\nClick Configuration on the left.\nMake sure the check box under \"Build\" for the project it can't find is checked. If it is already checked, uncheck, hit apply and check the boxes again.\n(Optional) You had to do it for both Release and Debug modes on the solution properties.\n\nScreen capture Instructions:\n\nThey say a picture is worth a thousand words. Click on the GIF to zoom in, and hopefully it will be easy to follow:",
    "score": 1219,
    "tags": [
      "c#",
      ".net",
      "wpf",
      "visual-studio-2008",
      "c#-3.0"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:17.905890"
  },
  {
    "instruction": "Is there a way to check if a file is in use?",
    "context": "I'm writing a program in C# that needs to repeatedly access 1 image file. Most of the time it works, but if my computer's running fast, it will try to access the file before it's been saved back to the filesystem and throw an error:\n\n\"File in use by another process\"\n\nI would like to find a way around this, but all my Googling has only yielded creating checks by using exception handling. This is against my religion, so I was wondering if anyone has a better way of doing it?",
    "output": "Updated NOTE on this solution: Checking with \n```csharp\nFileAccess.ReadWrite\n```\n will fail for Read-Only files so the solution has been modified to check with \n```csharp\nFileAccess.Read\n```\n.\nORIGINAL:\nI've used this code for the past several years, and I haven't had any issues with it.\nUnderstand your hesitation about using exceptions, but you can't avoid them all of the time:\n\n```csharp\nprotected virtual bool IsFileLocked(FileInfo file)\n{\n    try\n    {\n        using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n        {\n            stream.Close();\n        }\n    }\n    catch (IOException)\n    {\n        //the file is unavailable because it is:\n        //still being written to\n        //or being processed by another thread\n        //or does not exist (has already been processed)\n        return true;\n    }\n\n    //file is not locked\n    return false;\n}\n\n```",
    "score": 689,
    "tags": [
      "c#",
      ".net",
      "file",
      "file-io",
      "file-locking"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:18.185815"
  },
  {
    "instruction": "How do I force my .NET application to run as administrator?",
    "context": "Once my program is installed on a client machine, how do I force my program to run as an administrator on Windows 7?",
    "output": "You'll want to modify the manifest that gets embedded in the program. This works on Visual Studio 2008 and higher: Project + Add New Item, select \"Application Manifest File\". Change the \n```csharp\n<requestedExecutionLevel>\n```\n element to:\n\n```csharp\n <requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\" />\n\n```\n\nThe user gets the UAC prompt when they start the program. Use wisely; their patience can wear out quickly.",
    "score": 1281,
    "tags": [
      "c#",
      ".net",
      "windows-7",
      "administrator",
      "elevated-privileges"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:18.459218"
  },
  {
    "instruction": "Proper use of 'yield return'",
    "context": "The yield keyword is one of those keywords in C# that continues to mystify me, and I've never been confident that I'm using it correctly.\nOf the following two pieces of code, which is the preferred and why?\nVersion 1: Using yield return\n\n```csharp\npublic static IEnumerable<Product> GetAllProducts()\n{\n    using (AdventureWorksEntities db = new AdventureWorksEntities())\n    {\n        var products = from product in db.Product\n                       select product;\n\n        foreach (Product product in products)\n        {\n            yield return product;\n        }\n    }\n}\n\n```\n\nVersion 2: Return the list\n\n```csharp\npublic static IEnumerable<Product> GetAllProducts()\n{\n    using (AdventureWorksEntities db = new AdventureWorksEntities())\n    {\n        var products = from product in db.Product\n                       select product;\n\n        return products.ToList<Product>();\n    }\n}\n\n```",
    "output": "I tend to use \n```csharp\nyield return\n```\n when I calculate the next item in the list (or even the next group of items).\nUsing your Version 2, you must have the complete list before returning.\nBy using \n```csharp\nyield return\n```\n, you really only need to have the next item before returning.\nAmong other things, this helps spread the computational cost of complex calculations over a larger time-frame.  For example, if the list is hooked up to a GUI and the user never goes to the last page, you never calculate the final items in the list.\nAnother case where \n```csharp\nyield return\n```\n is preferable is if the \n```csharp\nIEnumerable\n```\n represents an infinite set. Consider the list of Prime Numbers, or an infinite list of random numbers. You can never return the full \n```csharp\nIEnumerable\n```\n at once,  so you use \n```csharp\nyield return\n```\n to return the list incrementally.\nIn your particular example, you have the full list of products, so I'd use Version 2.",
    "score": 868,
    "tags": [
      "c#",
      "yield-return"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:18.716159"
  },
  {
    "instruction": "If a folder does not exist, create it",
    "context": "I use a \n```csharp\nFileUploader\n```\n control in my application. I want to save a file to a specified folder. If this folder does not exist, I want to first create it, and then save my file to this folder.  If the folder already exists, then just save the file in it.\nHow can I do this?",
    "output": "Use \n```csharp\nSystem.IO.Directory.CreateDirectory\n```\n.\n\nAccording to the official \".NET\" docs, you don't need to check if it exists first.\n\nSystem.io   >   Directory   >    Directory.CreateDirectory\nAny and all directories specified in \n```csharp\npath\n```\n are created, unless they already exist or unless some part of \n```csharp\npath\n```\n is invalid. If the directory already exists, this method does not create a new directory, but it returns a \n```csharp\nDirectoryInfo\n```\n object for the existing directory.\n        — learn.microsoft.com/dotnet/api/",
    "score": 1555,
    "tags": [
      "c#",
      "asp.net",
      "directory"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:18.997552"
  },
  {
    "instruction": "split a string on newlines in .NET",
    "context": "I need to split a string into newlines in .NET and the only way I know of to split strings is with the Split method. However that will not allow me to (easily) split on a newline, so what is the best way to do it?",
    "output": "To split on a string you need to use the overload that takes an array of strings:\n\n```csharp\nstring[] lines = theText.Split(\n    new string[] { Environment.NewLine },\n    StringSplitOptions.None\n);\n\n```\n\nEdit:\nIf you want to handle different types of line breaks in a text, you can use the ability to match more than one string. This will correctly split on either type of line break, and preserve empty lines and spacing in the text:\n\n```csharp\nstring[] lines = theText.Split(\n    new string[] { \"\\r\\n\", \"\\r\", \"\\n\" },\n    StringSplitOptions.None\n);\n\n```",
    "score": 1721,
    "tags": [
      "c#",
      ".net",
      "string",
      "split"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:19.302354"
  },
  {
    "instruction": "Converting string to byte array in C#",
    "context": "I'm converting something from VB into C#. Having a problem with the syntax of this statement:\n\n```csharp\nif ((searchResult.Properties[\"user\"].Count > 0))\n{\n    profile.User = System.Text.Encoding.UTF8.GetString(searchResult.Properties[\"user\"][0]);\n}\n\n```\n\nI then see the following errors:\n\nArgument 1: cannot convert from 'object' to 'byte[]'\nThe best overloaded method match for\n'System.Text.Encoding.GetString(byte[])' has some invalid arguments\n\nI tried to fix the code based on this post, but still no success:\n\n```csharp\nstring User = Encoding.UTF8.GetString(\"user\", 0);\n\n```\n\nAny suggestions?",
    "output": "If you already have a byte array then you will need to know what type of encoding was used to make it into that byte array.\nFor example, if the byte array was created like this:\n\n```csharp\nbyte[] bytes = Encoding.ASCII.GetBytes(someString);\n\n```\n\nYou will need to turn it back into a string like this:\n\n```csharp\nstring someString = Encoding.ASCII.GetString(bytes);\n\n```\n\nIf you can find in the code you inherited, the encoding used to create the byte array then you should be set.\nBesides ASCII, the System.Text.Encoding class also includes \n```csharp\nUTF8\n```\n, \n```csharp\nUnicode\n```\n (for UTF-16), and \n```csharp\nUTF32\n```\n. A full list is in the docs.",
    "score": 1750,
    "tags": [
      "c#",
      "string",
      "encoding",
      "byte"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:19.574332"
  },
  {
    "instruction": "How do I convert struct System.Byte byte[] to a System.IO.Stream object in C#?",
    "context": "How do I convert struct \n```csharp\nSystem.Byte\n```\n \n```csharp\nbyte[]\n```\n to a \n```csharp\nSystem.IO.Stream\n```\n object in C#?",
    "output": "The easiest way to convert a byte array to a stream is using the \n```csharp\nMemoryStream\n```\n class:\n\n```csharp\nStream stream = new MemoryStream(byteArray);\n\n```",
    "score": 1660,
    "tags": [
      "c#",
      ".net",
      "arrays",
      "stream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:19.978518"
  },
  {
    "instruction": "How do I use Assert to verify that an exception has been thrown with MSTest?",
    "context": "How do I use \n```csharp\nAssert\n```\n (or other Test class) to verify that an exception has been thrown when using MSTest/Microsoft.VisualStudio.TestTools.UnitTesting?",
    "output": "For \"Visual Studio Team Test\" it appears you apply the ExpectedException attribute to the test's method.\nSample from the documentation here: A Unit Testing Walkthrough with Visual Studio Team Test\n\n```csharp\n[TestMethod]\n[ExpectedException(typeof(ArgumentException),\n    \"A userId of null was inappropriately allowed.\")]\npublic void NullUserIdInConstructor()\n{\n   LogonInfo logonInfo = new LogonInfo(null, \"P@ss0word\");\n}\n\n```",
    "score": 1110,
    "tags": [
      "c#",
      "unit-testing",
      "mstest",
      "assert",
      "vs-unit-testing-framework"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:20.327968"
  },
  {
    "instruction": "Reading settings from app.config or web.config in .NET",
    "context": "I'm working on a C# class library that needs to be able to read settings from the \n```csharp\nweb.config\n```\n or \n```csharp\napp.config\n```\n file (depending on whether the DLL is referenced from an ASP.NET web application or a Windows Forms application).\nI've found that\n\n```csharp\nConfigurationSettings.AppSettings.Get(\"MySetting\")\n\n```\n\nworks, but that code has been marked as deprecated by Microsoft.\nI've read that I should be using:\n\n```csharp\nConfigurationManager.AppSettings[\"MySetting\"]\n\n```\n\nHowever, the \n```csharp\nSystem.Configuration.ConfigurationManager\n```\n class doesn't seem to be available from a C# Class Library project.\nWhat is the best way to do this?",
    "output": "For a sample app.config file like below:\n\n```csharp\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <appSettings>\n    <add key=\"countoffiles\" value=\"7\" />\n    <add key=\"logfilelocation\" value=\"abc.txt\" />\n  </appSettings>\n</configuration>\n\n```\n\nYou read the above application settings using the code shown below:\n\n```csharp\nusing System.Configuration;\n\n```\n\nYou may also need to also add a reference to \n```csharp\nSystem.Configuration\n```\n in your project if there isn't one already. You can then access the values like so:\n\n```csharp\nstring configvalue1 = ConfigurationManager.AppSettings[\"countoffiles\"];\nstring configvalue2 = ConfigurationManager.AppSettings[\"logfilelocation\"];\n\n```",
    "score": 1059,
    "tags": [
      "c#",
      ".net",
      "configuration",
      "appsettings"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:20.602838"
  },
  {
    "instruction": "Sending email in .NET through Gmail",
    "context": "Instead of relying on my host to send an email, I was thinking of sending the email messages using my Gmail account. The emails are personalized emails to the bands I play on my show. \nIs it possible to do it?",
    "output": "Be sure to use \n```csharp\nSystem.Net.Mail\n```\n, not the deprecated \n```csharp\nSystem.Web.Mail\n```\n. Doing SSL with \n```csharp\nSystem.Web.Mail\n```\n is a gross mess of hacky extensions.\n\n```csharp\nusing System.Net;\nusing System.Net.Mail;\n\nvar fromAddress = new MailAddress(\"from@gmail.com\", \"From Name\");\nvar toAddress = new MailAddress(\"to@example.com\", \"To Name\");\nconst string fromPassword = \"fromPassword\";\nconst string subject = \"Subject\";\nconst string body = \"Body\";\n\nvar smtp = new SmtpClient\n{\n    Host = \"smtp.gmail.com\",\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    UseDefaultCredentials = false,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword)\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n```\n\nAdditionally go to the Google Account > Security page and look at the Signing in to Google > 2-Step Verification setting.\n\nIf it is enabled, then you have to generate a password allowing .NET to bypass the 2-Step Verification. To do this, click on Signing in to Google > App passwords, select app = Mail, and device = Windows Computer, and finally generate the password. Use the generated password in the \n```csharp\nfromPassword\n```\n constant instead of your standard Gmail password.\nIf it is disabled, then you have to turn on Less secure app access, which is not recommended! So better enable the 2-Step verification.",
    "score": 1175,
    "tags": [
      "c#",
      ".net",
      "email",
      "smtp",
      "gmail"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:20.891271"
  },
  {
    "instruction": "How do you sort a dictionary by value?",
    "context": "I often have to sort a dictionary (consisting of keys & values) by value. For example, I have a hash of words and respective frequencies that I want to order by frequency.\nThere is a \n```csharp\nSortedList\n```\n which is good for a single value (say frequency), that I want to map back to the word.\nSortedDictionary orders by key, not value. Some resort to a custom class, but is there a cleaner way?",
    "output": "Use LINQ:\n\n```csharp\nDictionary<string, int> myDict = new Dictionary<string, int>();\nmyDict.Add(\"one\", 1);\nmyDict.Add(\"four\", 4);\nmyDict.Add(\"two\", 2);\nmyDict.Add(\"three\", 3);\n\nvar sortedDict = from entry in myDict orderby entry.Value ascending select entry;\n\n```\n\nThis would also allow for great flexibility in that you can select the top 10, 20 10%, etc. Or if you are using your word frequency index for \n```csharp\ntype-ahead\n```\n, you could also include \n```csharp\nStartsWith\n```\n clause as well.",
    "score": 598,
    "tags": [
      "c#",
      ".net",
      "sorting",
      "dictionary"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:21.169725"
  },
  {
    "instruction": "When to use .First and when to use .FirstOrDefault with LINQ?",
    "context": "I've searched around and haven't really found a clear answer as to when you'd want to use \n```csharp\n.First\n```\n and when you'd want to use \n```csharp\n.FirstOrDefault\n```\n with LINQ.\n\nWhen would you want to use \n```csharp\n.First\n```\n? Only when you'd want to catch the exception if no results where returned?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").First();\n\n```\n\nAnd when would you want to use \n```csharp\n.FirstOrDefault\n```\n? When you'd always want the default type if no result?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").FirstOrDefault();\n\n```\n\nAnd for that matter, what about Take?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").Take(1);\n\n```",
    "output": "I would use \n```csharp\nFirst()\n```\n when I know or expect the sequence to have at least one element. In other words, when it is an exceptional occurrence that the sequence is empty.\nUse \n```csharp\nFirstOrDefault()\n```\n when you know that you will need to check whether there was an element or not. In other words, when it is legal for the sequence to be empty. You should not rely on exception handling for the check. (It is bad practice and might hurt performance).\nFinally, the difference between \n```csharp\nFirst()\n```\n and \n```csharp\nTake(1)\n```\n is that \n```csharp\nFirst()\n```\n returns the element itself, while \n```csharp\nTake(1)\n```\n returns a sequence of elements that contains exactly one element.",
    "score": 932,
    "tags": [
      "c#",
      ".net",
      "linq"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:21.453270"
  },
  {
    "instruction": "Identify if a string is a number",
    "context": "If I have these strings:\n\n\n```csharp\n\"abc\"\n```\n  =  \n```csharp\nfalse\n```\n\n\n```csharp\n\"123\"\n```\n  = \n```csharp\ntrue\n```\n\n\n```csharp\n\"ab2\"\n```\n  = \n```csharp\nfalse\n```\n\n\nIs there a command, like \n```csharp\nIsNumeric()\n```\n or something else, that can identify if a string is a valid number?",
    "output": "```csharp\nint n;\nbool isNumeric = int.TryParse(\"123\", out n);\n\n```\n\nUpdate As of C# 7:\n\n```csharp\nvar isNumeric = int.TryParse(\"123\", out int n);\n\n```\n\nor if you don't need the number you can discard the out parameter\n\n```csharp\nvar isNumeric = int.TryParse(\"123\", out _);\n\n```\n\nThe var s can be replaced by their respective types!",
    "score": 1548,
    "tags": [
      "c#",
      "string",
      "parsing",
      "isnumeric"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:21.737770"
  },
  {
    "instruction": "What is the difference between String and string in C#?",
    "context": "What are the differences between these two, and which one should I use?\n\n```csharp\nstring s = \"Hello world!\";\nString s = \"Hello world!\";\n\n```",
    "output": "```csharp\nstring\n```\n is an alias in C# for \n```csharp\nSystem.String\n```\n.\nSo technically, there is no difference.  It's like \n```csharp\nint\n```\n vs. \n```csharp\nSystem.Int32\n```\n.\nAs far as guidelines, it's generally recommended to use \n```csharp\nstring\n```\n any time you're referring to an object.\ne.g.\n\n```csharp\nstring place = \"world\";\n\n```\n\nLikewise, I think it's generally recommended to use \n```csharp\nString\n```\n if you need to refer specifically to the class.\ne.g.\n\n```csharp\nstring greet = String.Format(\"Hello {0}!\", place);\n\n```\n\nThis is the style that Microsoft tends to use in their examples.\nIt appears that the guidance in this area may have changed, as StyleCop now enforces the use of the C# specific aliases.",
    "score": 7114,
    "tags": [
      "c#",
      ".net",
      "string",
      "types",
      "alias"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:23.368069"
  },
  {
    "instruction": "How can I enumerate an enum?",
    "context": "How can you enumerate an \n```csharp\nenum\n```\n in C#?\nE.g., the following code does not compile:\n\n```csharp\npublic enum Suit\n{\n    Spades,\n    Hearts,\n    Clubs,\n    Diamonds\n}\n\npublic void EnumerateAllSuitsDemoMethod()\n{\n    foreach (Suit suit in Suit)\n    {\n        DoSomething(suit);\n    }\n}\n\n```\n\nAnd it gives the following compile-time error:\n\n'Suit' is a 'type' but is used like a 'variable'\n\nIt fails on the \n```csharp\nSuit\n```\n keyword, the second one.",
    "output": "Update: If you're using .NET 5 or newer, use this solution.\n\n```csharp\nforeach (Suit suit in (Suit[]) Enum.GetValues(typeof(Suit)))\n{\n}\n\n```\n\nNote: The cast to \n```csharp\n(Suit[])\n```\n is not strictly necessary, but it does make the code 0.5 ns faster.",
    "score": 5323,
    "tags": [
      "c#",
      ".net",
      "loops",
      "enums",
      "enumeration"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:23.646119"
  },
  {
    "instruction": "How do I cast int to enum in C#?",
    "context": "How do I cast an \n```csharp\nint\n```\n to an \n```csharp\nenum\n```\n in C#?",
    "output": "From an int:\n\n```csharp\nYourEnum foo = (YourEnum)yourInt;\n\n```\n\nFrom a string:\n\n```csharp\nYourEnum foo = (YourEnum) Enum.Parse(typeof(YourEnum), yourString);\n\n// The foo.ToString().Contains(\",\") check is necessary for \n// enumerations marked with a [Flags] attribute.\nif (!Enum.IsDefined(typeof(YourEnum), foo) && !foo.ToString().Contains(\",\"))\n{\n    throw new InvalidOperationException(\n        $\"{yourString} is not an underlying value of the YourEnum enumeration.\"\n    );\n}\n\n```\n\nDynamically (type not known at compile-time):\n\n```csharp\nType enumType = ...;\n\n// NB: Enums can specify a base type other than 'int'\nint numericValue = ...;\n\nobject boxedEnumValue = Enum.ToObject(enumType, numericValue);\n\n```",
    "score": 4730,
    "tags": [
      "c#",
      "enums",
      "casting",
      "integer"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:24.060160"
  },
  {
    "instruction": "Case insensitive 'Contains(string)'",
    "context": "Is there a way to make the following return true?\n\n```csharp\nstring title = \"ASTRINGTOTEST\";\ntitle.Contains(\"string\");\n\n```\n\nThere doesn't seem to be an overload that allows me to set the case sensitivity. Currently I UPPERCASE them both, but that's just silly (by which I am referring to the i18n issues that come with up- and down casing).\nUPDATE\nThis question is ancient and since then I have realized I asked for a simple answer for a really vast and difficult topic if you care to investigate it fully.\nFor most cases, in mono-lingual, English code bases this answer will suffice. I'm suspecting because most people coming here fall in this category this is the most popular answer.\nThis answer however brings up the inherent problem that we can't compare text case insensitive until we know both texts are the same culture and we know  what that culture is. This is maybe a less popular answer, but I think it is more correct and that's why I marked it as such.",
    "output": "You could use the \n```csharp\nString.IndexOf\n```\n Method and pass \n```csharp\nStringComparison.OrdinalIgnoreCase\n```\n as the type of search to use:\n\n```csharp\nstring title = \"STRING\";\nbool contains = title.IndexOf(\"string\", StringComparison.OrdinalIgnoreCase) >= 0;\n\n```\n\nEven better is defining a new extension method for string:\n\n```csharp\npublic static class StringExtensions\n{\n    public static bool Contains(this string source, string toCheck, StringComparison comp)\n    {\n        return source?.IndexOf(toCheck, comp) >= 0;\n    }\n}\n\n```\n\nNote, that null propagation \n```csharp\n?.\n```\n is available since C# 6.0 (VS 2015), for older versions use\n\n```csharp\nif (source == null) return false;\nreturn source.IndexOf(toCheck, comp) >= 0;\n\n```\n\nUSAGE:\n\n```csharp\nstring title = \"STRING\";\nbool contains = title.Contains(\"string\", StringComparison.OrdinalIgnoreCase);\n\n```",
    "score": 3169,
    "tags": [
      "c#",
      "string",
      "contains",
      "case-insensitive"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:24.340142"
  },
  {
    "instruction": "How to iterate over a dictionary?",
    "context": "I've seen a few different ways to iterate over a dictionary in C#.  Is there a standard way?",
    "output": "```csharp\nforeach(KeyValuePair<string, string> entry in myDictionary)\n{\n    // do something with entry.Value or entry.Key\n}\n\n```",
    "score": 4589,
    "tags": [
      "c#",
      "dictionary",
      "loops"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:24.624732"
  },
  {
    "instruction": "What are the correct version numbers for C#?",
    "context": "What are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?\nThis question is primarily to aid those who are searching for an answer using an incorrect version number, e.g. C# 3.5. The hope is that anyone failing to find an answer with the wrong version number will find this question and then search again with the right version number.",
    "output": "C# language version history:\nThese are the versions of C# known about at the time of this writing:\n\nC# 1.0 released with .NET 1.0 and VS2002 (January 2002)\nC# 1.2 (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call \n```csharp\nDispose\n```\n on \n```csharp\nIEnumerator\n```\ns which implemented \n```csharp\nIDisposable\n```\n. A few other small features.\nC# 2.0 released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, and iterator blocks\nC# 3.0 released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (\n```csharp\nvar\n```\n), and query expressions\nC# 4.0 released with .NET 4 and VS2010 (April 2010). Major new features: late binding (\n```csharp\ndynamic\n```\n), delegate and interface generic variance, more COM support, named arguments, tuple data type and optional parameters\nC# 5.0 released with .NET 4.5 and VS2012 (August 2012). Major features: async programming, and caller info attributes. Breaking change: loop variable closure.\nC# 6.0 released with .NET 4.6 and VS2015 (July 2015). Implemented by Roslyn. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, \n```csharp\nawait\n```\n in \n```csharp\ncatch\n```\n and \n```csharp\nfinally\n```\n, extension \n```csharp\nAdd\n```\n methods in collection initializers.\nC# 7.0 released with .NET 4.7 and VS2017 (March 2017). Major new features: tuples, ref locals and ref return, pattern matching (including pattern-based switch statements), inline \n```csharp\nout\n```\n parameter declarations, local functions, binary literals, digit separators, and arbitrary async returns.\nC# 7.1 released with VS2017 v15.3 (August 2017). New features: async main, tuple member name inference, default expression, and pattern matching with generics.\nC# 7.2 released with VS2017 v15.5 (November 2017). New features: private protected access modifier, Span<T>, aka interior pointer, aka stackonly struct, and everything else.\nC# 7.3 released with VS2017 v15.7 (May 2018). New features: enum, delegate and \n```csharp\nunmanaged\n```\n generic type constraints. \n```csharp\nref\n```\n reassignment. Unsafe improvements: \n```csharp\nstackalloc\n```\n initialization, unpinned indexed \n```csharp\nfixed\n```\n buffers, custom \n```csharp\nfixed\n```\n statements. Improved overloading resolution. Expression variables in initializers and queries. \n```csharp\n==\n```\n and \n```csharp\n!=\n```\n defined for tuples. Auto-properties' backing fields can now be targeted by attributes.\nC# 8.0 released with .NET Core 3.0 and VS2019 v16.3 (September 2019). Major new features: nullable reference-types, asynchronous streams, indices and ranges, readonly members, using declarations, default interface methods, static local functions, and enhancement of interpolated verbatim strings.\nC# 9 released with .NET 5.0 and VS2019 v16.8 (November 2020). Major new features: init-only properties, records, with-expressions, data classes, positional records, top-level programs, improved pattern matching (simple type patterns, relational patterns, logical patterns), improved target typing (target-type \n```csharp\nnew\n```\n expressions, target typed \n```csharp\n??\n```\n and \n```csharp\n?\n```\n), and covariant returns. Minor features: relax ordering of \n```csharp\nref\n```\n and \n```csharp\npartial\n```\n modifiers, parameter null checking, lambda discard parameters, native \n```csharp\nint\n```\ns, attributes on local functions, function pointers, static lambdas, extension \n```csharp\nGetEnumerator\n```\n, module initializers, and extending partial.\nC# 10 released with .NET 6.0 (November 2021). Major new features: record structs, struct parameterless constructors, interpolated string handlers, global \n```csharp\nusing\n```\n directives, file-scoped namespace declarations, extended property patterns, const interpolated strings, mixed assignment and declaration in deconstruction, async method builders (via attributes) for individual methods, the \n```csharp\nCallerArgumentExpression\n```\n attribute for parameters, enhanced \n```csharp\n#line\n```\n pragmas.\nC# 11 released with .NET 7.0 (November 2022). Major new features: file-scoped types, generic math support, auto-default structs, pattern match \n```csharp\nSpan<char>\n```\n on a constant string, extended nameof scope, numeric \n```csharp\nIntPtr\n```\n, UTF-8 string literals, required members, \n```csharp\nref\n```\n fields and \n```csharp\nscoped ref\n```\n, raw string literals, improved method group conversion to delegate, warning wave 7, generic attributes, newlines in string interpolation expressions, list patterns\nC# 12 released with .NET 8.0 (November 2023). Major new features: primary constructors, collection expressions, inline arrays, optional parameters in lambda expressions, \n```csharp\nref readonly\n```\n parameters, alias any type, \n```csharp\nExperimental\n```\n attribute, interceptors\nC# 13 releasing with .NET 9.0 (November 2024). Major new features: params collections, new \n```csharp\nLock\n```\n type and semantics, new Escape sequence \n```csharp\n\\e\n```\n, method group natural type improvements, implicit indexer access in object initializers, ref locals and unsafe contexts in iterators and async methods, ref struct types to can implement interfaces, partial properties and indexers, ref struct types, overload resolution priority\n\nIn response to the OP's question:\n\nWhat are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?\n\nThere is no such thing as C# 3.5 - the cause of confusion here is that the C# 3.0 is present in .NET 3.5. The language and framework are versioned independently, however - as is the CLR, which is at version 2.0 for .NET 2.0 through 3.5, .NET 4 introducing CLR 4.0, service packs notwithstanding. The CLR in .NET 4.5 has various improvements, but the versioning is unclear: in some places it may be referred to as CLR 4.5 (this MSDN page used to refer to it that way, for example), but the \n```csharp\nEnvironment.Version\n```\n property still reports 4.0.xxx.\nAs of May 3, 2017, the C# Language Team created a history of C# versions and features on their GitHub repository: Features Added in C# Language Versions. There is also a page that tracks upcoming and recently implemented language features.",
    "score": 3230,
    "tags": [
      "c#",
      ".net",
      "visual-studio",
      ".net-core",
      ".net-framework-version"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:24.882365"
  },
  {
    "instruction": "Deep cloning objects",
    "context": "I want to do something like:\n\n```csharp\nMyObject myObj = GetMyObj(); // Create and fill a new object\nMyObject newObj = myObj.Clone();\n\n```\n\nAnd then make changes to the new object that are not reflected in the original object.\nI don't often need this functionality, so when it's been necessary, I've resorted to creating a new object and then copying each property individually, but it always leaves me with the feeling that there is a better or more elegant way of handling the situation.\nHow can I clone or deep copy an object so that the cloned object can be modified without any changes being reflected in the original object?",
    "output": "Whereas one approach is to implement the \n```csharp\nICloneable\n```\n interface (described here, so I won't regurgitate), here's a nice deep clone object copier I found on The Code Project a while ago and incorporated it into our code.\nAs mentioned elsewhere, it requires your objects to be serializable.\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n/// <summary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// </summary>\npublic static class ObjectCopier\n{\n    /// <summary>\n    /// Perform a deep copy of the object via serialization.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of object being copied.</typeparam>\n    /// <param name=\"source\">The object instance to copy.</param>\n    /// <returns>A deep copy of the object.</returns>\n    public static T Clone<T>(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", nameof(source));\n        }\n\n        // Don't serialize a null object, simply return the default for that object\n        if (ReferenceEquals(source, null)) return default;\n\n        using var stream = new MemoryStream();\n        IFormatter formatter = new BinaryFormatter();\n        formatter.Serialize(stream, source);\n        stream.Seek(0, SeekOrigin.Begin);\n        return (T)formatter.Deserialize(stream);\n    }\n}\n\n```\n\nThe idea is that it serializes your object and then deserializes it into a fresh object. The benefit is that you don't have to concern yourself about cloning everything when an object gets too complex.\nIn case of you prefer to use the new extension methods of C# 3.0, change the method to have the following signature:\n\n```csharp\npublic static T Clone<T>(this T source)\n{\n   // ...\n}\n\n```\n\nNow the method call simply becomes \n```csharp\nobjectBeingCloned.Clone();\n```\n.\nEDIT (January 10 2015) Thought I'd revisit this, to mention I recently started using (Newtonsoft) Json to do this, it should be lighter, and avoids the overhead of [Serializable] tags. (NB @atconway has pointed out in the comments that private members are not cloned using the JSON method)\n\n```csharp\n/// <summary>\n/// Perform a deep Copy of the object, using Json as a serialization method. NOTE: Private members are not cloned using this method.\n/// </summary>\n/// <typeparam name=\"T\">The type of object being copied.</typeparam>\n/// <param name=\"source\">The object instance to copy.</param>\n/// <returns>The copied object.</returns>\npublic static T CloneJson<T>(this T source)\n{            \n    // Don't serialize a null object, simply return the default for that object\n    if (ReferenceEquals(source, null)) return default;\n\n    // initialize inner objects individually\n    // for example in default constructor some list property initialized with some values,\n    // but in 'source' these items are cleaned -\n    // without ObjectCreationHandling.Replace default constructor values will be added to result\n    var deserializeSettings = new JsonSerializerSettings {ObjectCreationHandling = ObjectCreationHandling.Replace};\n\n    return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(source), deserializeSettings);\n}\n\n```",
    "score": 1934,
    "tags": [
      "c#",
      ".net",
      "clone",
      "deep-copy"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:25.184112"
  },
  {
    "instruction": "Catch multiple exceptions at once?",
    "context": "It is discouraged to catch \n```csharp\nSystem.Exception\n```\n errors. Instead, only the \"known\" exceptions should be caught.\nThis sometimes leads to unnecessary repetitive code, for example:\n\n```csharp\ntry\n{\n    WebId = new Guid(queryString[\"web\"]);\n}\ncatch (FormatException)\n{\n    WebId = Guid.Empty;\n}\ncatch (OverflowException)\n{\n    WebId = Guid.Empty;\n}\n\n```\n\nIs there a way to catch both exceptions and only set \n```csharp\nWebId = Guid.Empty\n```\n once?\nThe given example is rather simple, as it's only a \n```csharp\nGUID\n```\n, but imagine code where you modify an object multiple times, and if one of the manipulations fails as expected, you want to \"reset\" the object. However, if there is an unexpected exception, I still want to throw that higher.",
    "output": "Catch \n```csharp\nSystem.Exception\n```\n and switch on the types\n\n```csharp\ncatch (Exception ex)            \n{                \n    if (ex is FormatException || ex is OverflowException)\n    {\n        WebId = Guid.Empty;\n    }\n    else\n        throw;\n}\n\n```",
    "score": 2486,
    "tags": [
      "c#",
      ".net",
      "exception"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:25.484893"
  },
  {
    "instruction": "How do I generate a random integer in C#?",
    "context": "How do I generate a random integer in C#?",
    "output": "The \n```csharp\nRandom\n```\n class is used to create random numbers. (Pseudo-random that is of course.).\nExample:\n\n```csharp\nRandom rnd = new Random();\nint month  = rnd.Next(1, 13);  // creates a number between 1 and 12\nint dice   = rnd.Next(1, 7);   // creates a number between 1 and 6\nint card   = rnd.Next(52);     // creates a number between 0 and 51\n\n```\n\nIf you are going to create more than one random number, you should keep the \n```csharp\nRandom\n```\n instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.",
    "score": 3123,
    "tags": [
      "c#",
      "random"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:25.765907"
  },
  {
    "instruction": "Should 'using' directives be inside or outside the namespace in C#?",
    "context": "I have been running StyleCop over some C# code, and it keeps reporting that my \n```csharp\nusing\n```\n directives should be inside the namespace.\nIs there a technical reason for putting the \n```csharp\nusing\n```\n directives inside instead of outside the namespace?",
    "output": "There is actually a (subtle) difference between the two. Imagine you have the following code in File1.cs:\n\n```csharp\n// File1.cs\nusing System;\nnamespace Outer.Inner\n{\n    class Foo\n    {\n        static void Bar()\n        {\n            double d = Math.PI;\n        }\n    }\n}\n\n```\n\nNow imagine that someone adds another file (File2.cs) to the project that looks like this:\n\n```csharp\n// File2.cs\nnamespace Outer\n{\n    class Math\n    {\n    }\n}\n\n```\n\nThe compiler searches \n```csharp\nOuter\n```\n before looking at those \n```csharp\nusing\n```\n directives outside the namespace, so it finds \n```csharp\nOuter.Math\n```\n instead of \n```csharp\nSystem.Math\n```\n. Unfortunately (or perhaps fortunately?), \n```csharp\nOuter.Math\n```\n has no \n```csharp\nPI\n```\n member, so File1 is now broken.\nThis changes if you put the \n```csharp\nusing\n```\n inside your namespace declaration, as follows:\n\n```csharp\n// File1b.cs\nnamespace Outer.Inner\n{\n    using System;\n    class Foo\n    {\n        static void Bar()\n        {\n            double d = Math.PI;\n        }\n    }\n}\n\n```\n\nNow the compiler searches \n```csharp\nSystem\n```\n before searching \n```csharp\nOuter\n```\n, finds \n```csharp\nSystem.Math\n```\n, and all is well.\nSome would argue that \n```csharp\nMath\n```\n might be a bad name for a user-defined class, since there's already one in \n```csharp\nSystem\n```\n; the point here is just that there is a difference, and it affects the maintainability of your code.\nIt's also interesting to note what happens if \n```csharp\nFoo\n```\n is in namespace \n```csharp\nOuter\n```\n, rather than \n```csharp\nOuter.Inner\n```\n. In that case, adding \n```csharp\nOuter.Math\n```\n in File2 breaks File1 regardless of where the \n```csharp\nusing\n```\n goes. This implies that the compiler searches the innermost enclosing namespace before it looks at any \n```csharp\nusing\n```\n directive.",
    "score": 2418,
    "tags": [
      "c#",
      ".net",
      "namespaces",
      "stylecop",
      "code-organization"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:26.041729"
  },
  {
    "instruction": "Get int value from enum in C#",
    "context": "I have a class called \n```csharp\nQuestions\n```\n (plural). In this class there is an enum called \n```csharp\nQuestion\n```\n (singular) which looks like this.\n\n```csharp\npublic enum Question\n{\n    Role = 2,\n    ProjectFunding = 3,\n    TotalEmployee = 4,\n    NumberOfServers = 5,\n    TopBusinessConcern = 6\n}\n\n```\n\nIn the \n```csharp\nQuestions\n```\n class I have a \n```csharp\nget(int foo)\n```\n function that returns a \n```csharp\nQuestions\n```\n object for that \n```csharp\nfoo\n```\n. Is there an easy way to get the integer value off the enum so I can do something like this \n```csharp\nQuestions.Get(Question.Role)\n```\n?",
    "output": "Just cast the enum, e.g.\n\n```csharp\nint something = (int) Question.Role;\n\n```\n\nThe above will work for the vast majority of enums you see in the wild, as the default underlying type for an enum is \n```csharp\nint\n```\n.\nHowever, as cecilphillip points out, enums can have different underlying types.\nIf an enum is declared as a \n```csharp\nuint\n```\n, \n```csharp\nlong\n```\n, or \n```csharp\nulong\n```\n, it should be cast to the type of the enum; e.g. for\n\n```csharp\nenum StarsInMilkyWay:long {Sun = 1, V645Centauri = 2 .. Wolf424B = 2147483649};\n\n```\n\nyou should use\n\n```csharp\nlong something = (long)StarsInMilkyWay.Wolf424B;\n\n```",
    "score": 3019,
    "tags": [
      "c#",
      "enums",
      "casting",
      "int"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:26.322803"
  },
  {
    "instruction": "How do I get a consistent byte representation of strings in C# without manually specifying an encoding?",
    "context": "How do I convert a \n```csharp\nstring\n```\n to a \n```csharp\nbyte[]\n```\n in .NET (C#) without manually specifying a specific encoding?\nI'm going to encrypt the string. I can encrypt it without converting, but I'd still like to know why encoding comes to play here.\nAlso, why should encoding even be taken into consideration? Can't I simply get what bytes the string has been stored in? Why is there a dependency on character encodings?",
    "output": "Contrary to the answers here, you DON'T need to worry about encoding if the bytes don't need to be interpreted!\nLike you mentioned, your goal is, simply, to \"get what bytes the string has been stored in\".\n(And, of course, to be able to re-construct the string from the bytes.)\nFor those goals, I honestly do not understand why people keep telling you that you need the encodings. You certainly do NOT need to worry about encodings for this.\nJust do this instead:\n\n```csharp\nstatic byte[] GetBytes(string str)\n{\n    byte[] bytes = new byte[str.Length * sizeof(char)];\n    System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);\n    return bytes;\n}\n\n// Do NOT use on arbitrary bytes; only use on GetBytes's output on the SAME system\nstatic string GetString(byte[] bytes)\n{\n    char[] chars = new char[bytes.Length / sizeof(char)];\n    System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);\n    return new string(chars);\n}\n\n```\n\nAs long as your program (or other programs) don't try to interpret the bytes somehow, which you obviously didn't mention you intend to do, then there is nothing wrong with this approach! Worrying about encodings just makes your life more complicated for no real reason.\nAdditional benefit to this approach: It doesn't matter if the string contains invalid characters, because you can still get the data and reconstruct the original string anyway!\nIt will be encoded and decoded just the same, because you are just looking at the bytes.\nIf you used a specific encoding, though, it would've given you trouble with encoding/decoding invalid characters.",
    "score": 1947,
    "tags": [
      "c#",
      ".net",
      "string",
      "character-encoding"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:26.603152"
  },
  {
    "instruction": "What is the best way to give a C# auto-property an initial value?",
    "context": "How do you give a C# auto-property an initial value?\nI either use the constructor, or revert to the old syntax. \n Using the Constructor:\n\n```csharp\nclass Person \n{\n    public Person()\n    {\n        Name = \"Initial Name\";\n    }\n    public string Name { get; set; }\n}\n\n```\n\nUsing normal property syntax  (with an initial value)\n\n```csharp\nprivate string name = \"Initial Name\";\npublic string Name \n{\n    get \n    {\n        return name;\n    }\n    set\n    {\n        name = value;\n    }\n}\n\n```\n\nIs there a better way?",
    "output": "In C# 5 and earlier, to give auto implemented properties an initial value, you have to do it in a constructor.\nSince C# 6.0, you can specify initial value in-line. The syntax is:\n\n```csharp\npublic int X { get; set; } = x; // C# 6 or higher\n\n```\n\n\n```csharp\nDefaultValueAttribute\n```\n is intended to be used by the VS designer (or any other consumer) to specify a default value, not an initial value. (Even if in designed object, initial value is the default value).\nAt compile time \n```csharp\nDefaultValueAttribute\n```\n will not impact the generated IL and it will not be read to initialize the property to that value (see DefaultValue attribute is not working with my Auto Property).\nExample of attributes that impact the IL are \n```csharp\nThreadStaticAttribute\n```\n, \n```csharp\nCallerMemberNameAttribute\n```\n, ...",
    "score": 2975,
    "tags": [
      "c#",
      "constructor",
      "getter",
      "setter",
      "automatic-properties"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:26.888589"
  },
  {
    "instruction": "How do I calculate someone's age based on a DateTime type birthday?",
    "context": "Given a \n```csharp\nDateTime\n```\n representing a person's birthday, how do I calculate their age in years?",
    "output": "An easy to understand and simple solution.\n\n```csharp\n// Save today's date.\nvar today = DateTime.Today;\n\n// Calculate the age.\nvar age = today.Year - birthdate.Year;\n\n// If the birthdate hasn't arrived yet, subtract one year.\nif (birthdate.Date > today.AddYears(-age)) age--;\n\n```\n\nHowever, this assumes you are looking for the western idea of the age and not using East Asian reckoning.",
    "score": 2430,
    "tags": [
      "c#",
      ".net",
      "datetime"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:27.169718"
  },
  {
    "instruction": "How do I create an Excel (.XLS and .XLSX) file in C# without installing Microsoft Office?",
    "context": "How can I create an Excel spreadsheet with C# without requiring Excel to be installed on the machine that's running the code?",
    "output": "You can use a library called ExcelLibrary. It's a free, open source library posted on Google Code:\nExcelLibrary\nThis looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.\nIt's very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.\nExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats. \nYou can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files). There's also NPOI which works with both.\nThere are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.\nAlso, as noted by @АртёмЦарионов below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)\nHere are a couple links for quick reference:\nExcelLibrary - GNU Lesser GPL\nEPPlus - GNU (LGPL) - No longer maintained\nEPPlus 5 - Polyform Noncommercial - Starting May 2020\nNPOI - Apache License\nHere some example code for ExcelLibrary:\nHere is an example taking data from a database and creating a workbook from it. Note that the ExcelLibrary code is the single line at the bottom:\n\n```csharp\n//Create the data set and table\nDataSet ds = new DataSet(\"New_DataSet\");\nDataTable dt = new DataTable(\"New_DataTable\");\n\n//Set the locale for each\nds.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\ndt.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\n\n//Open a DB connection (in this example with OleDB)\nOleDbConnection con = new OleDbConnection(dbConnectionString);\ncon.Open();\n\n//Create a query and fill the data table with the data from the DB\nstring sql = \"SELECT Whatever FROM MyDBTable;\";\nOleDbCommand cmd = new OleDbCommand(sql, con);\nOleDbDataAdapter adptr = new OleDbDataAdapter();\n\nadptr.SelectCommand = cmd;\nadptr.Fill(dt);\ncon.Close();\n\n//Add the table to the data set\nds.Tables.Add(dt);\n\n//Here's the easy part. Create the Excel worksheet from the data set\nExcelLibrary.DataSetHelper.CreateWorkbook(\"MyExcelFile.xls\", ds);\n\n```\n\nCreating the Excel file is as easy as that. You can also manually create Excel files, but the above functionality is what really impressed me.",
    "score": 1198,
    "tags": [
      "c#",
      ".net",
      "excel",
      "file-io"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:27.462598"
  },
  {
    "instruction": "AddTransient, AddScoped and AddSingleton Services Differences",
    "context": "I want to implement dependency injection (DI) in ASP.NET Core. So after adding this code to \n```csharp\nConfigureServices\n```\n method, both ways work.\nWhat is the difference between the \n```csharp\nservices.AddTransient\n```\n and \n```csharp\nservice.AddScoped\n```\n methods in ASP.NET Core?\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add framework services.\n\n    // Add application services.\n    services.AddTransient<IEmailSender, AuthMessageSender>();\n    services.AddScoped<IEmailSender, AuthMessageSender>();\n}\n\n```",
    "output": "TL;DR\n\nTransient objects are always different; a new instance is provided to\nevery controller and every service.\nScoped objects are the same within a request, but different across\ndifferent requests.\nSingleton objects are the same for every object and every request.\n\nFor more clarification, this example from .NET documentation shows the difference:\nTo demonstrate the difference between these lifetime and registration options, consider a simple interface that represents one or more tasks as an operation with a unique identifier, \n```csharp\nOperationId\n```\n. Depending on how we configure the lifetime for this service, the container will provide either the same or different instances of the service to the requesting class. To make it clear which lifetime is being requested, we will create one type per lifetime option:\n\n```csharp\nusing System;\n\nnamespace DependencyInjectionSample.Interfaces\n{\n    public interface IOperation\n    {\n        Guid OperationId { get; }\n    }\n\n    public interface IOperationTransient : IOperation\n    {\n    }\n\n    public interface IOperationScoped : IOperation\n    {\n    }\n\n    public interface IOperationSingleton : IOperation\n    {\n    }\n\n    public interface IOperationSingletonInstance : IOperation\n    {\n    }\n}\n\n```\n\nWe implement these interfaces using a single class, \n```csharp\nOperation\n```\n, that accepts a GUID in its constructor, or uses a new GUID if none is provided:\n\n```csharp\nusing System;\nusing DependencyInjectionSample.Interfaces;\nnamespace DependencyInjectionSample.Classes\n{\n    public class Operation : IOperationTransient, IOperationScoped, IOperationSingleton, IOperationSingletonInstance\n    {\n        Guid _guid;\n        public Operation() : this(Guid.NewGuid())\n        {\n\n        }\n\n        public Operation(Guid guid)\n        {\n            _guid = guid;\n        }\n\n        public Guid OperationId => _guid;\n    }\n}\n\n```\n\nNext, in \n```csharp\nConfigureServices\n```\n, each type is added to the container according to its named lifetime:\n\n```csharp\nservices.AddTransient<IOperationTransient, Operation>();\nservices.AddScoped<IOperationScoped, Operation>();\nservices.AddSingleton<IOperationSingleton, Operation>();\nservices.AddSingleton<IOperationSingletonInstance>(new Operation(Guid.Empty));\nservices.AddTransient<OperationService, OperationService>();\n\n```\n\nNote that the \n```csharp\nIOperationSingletonInstance\n```\n service is using a specific instance with a known ID of \n```csharp\nGuid.Empty\n```\n, so it will be clear when this type is in use. We have also registered an \n```csharp\nOperationService\n```\n that depends on each of the other \n```csharp\nOperation\n```\n types, so that it will be clear within a request whether this service is getting the same instance as the controller, or a new one, for each operation type. All this service does is expose its dependencies as properties, so they can be displayed in the view.\n\n```csharp\nusing DependencyInjectionSample.Interfaces;\n\nnamespace DependencyInjectionSample.Services\n{\n    public class OperationService\n    {\n        public IOperationTransient TransientOperation { get; }\n        public IOperationScoped ScopedOperation { get; }\n        public IOperationSingleton SingletonOperation { get; }\n        public IOperationSingletonInstance SingletonInstanceOperation { get; }\n\n        public OperationService(IOperationTransient transientOperation,\n            IOperationScoped scopedOperation,\n            IOperationSingleton singletonOperation,\n            IOperationSingletonInstance instanceOperation)\n        {\n            TransientOperation = transientOperation;\n            ScopedOperation = scopedOperation;\n            SingletonOperation = singletonOperation;\n            SingletonInstanceOperation = instanceOperation;\n        }\n    }\n}\n\n```\n\nTo demonstrate the object lifetimes within and between separate individual requests to the application, the sample includes an \n```csharp\nOperationsController\n```\n that requests each kind of \n```csharp\nIOperation\n```\n type as well as an \n```csharp\nOperationService\n```\n. The \n```csharp\nIndex\n```\n action then displays all of the controller’s and service’s \n```csharp\nOperationId\n```\n values.\n\n```csharp\nusing DependencyInjectionSample.Interfaces;\nusing DependencyInjectionSample.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DependencyInjectionSample.Controllers\n{\n    public class OperationsController : Controller\n    {\n        private readonly OperationService _operationService;\n        private readonly IOperationTransient _transientOperation;\n        private readonly IOperationScoped _scopedOperation;\n        private readonly IOperationSingleton _singletonOperation;\n        private readonly IOperationSingletonInstance _singletonInstanceOperation;\n\n        public OperationsController(OperationService operationService,\n            IOperationTransient transientOperation,\n            IOperationScoped scopedOperation,\n            IOperationSingleton singletonOperation,\n            IOperationSingletonInstance singletonInstanceOperation)\n        {\n            _operationService = operationService;\n            _transientOperation = transientOperation;\n            _scopedOperation = scopedOperation;\n            _singletonOperation = singletonOperation;\n            _singletonInstanceOperation = singletonInstanceOperation;\n        }\n\n        public IActionResult Index()\n        {\n            // ViewBag contains controller-requested services\n            ViewBag.Transient = _transientOperation;\n            ViewBag.Scoped = _scopedOperation;\n            ViewBag.Singleton = _singletonOperation;\n            ViewBag.SingletonInstance = _singletonInstanceOperation;\n\n            // Operation service has its own requested services\n            ViewBag.Service = _operationService;\n            return View();\n        }\n    }\n}\n\n```\n\nNow two separate requests are made to this controller action:\n\n\nObserve which of the \n```csharp\nOperationId\n```\n values varies within a request, and between requests.\n\nTransient objects are always different; a new instance is provided to every controller and every service.\n\nScoped objects are the same within a request, but different across different requests\n\nSingleton objects are the same for every object and every request (regardless of whether an instance is provided in \n```csharp\nConfigureServices\n```\n)",
    "score": 3457,
    "tags": [
      "c#",
      "asp.net-core",
      ".net-core"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:27.744694"
  },
  {
    "instruction": "How do I remedy \"The breakpoint will not currently be hit. No symbols have been loaded for this document.\" warning?",
    "context": "A C# desktop application (on the Visual Studio Express edition) worked, but then it didn't work 5 seconds later.\nI tried the following:\n\nEnsure debug configuration, debug flag, and full debug information are set on all assemblies.\nDelete all bin and obj folders and all DLL files related to the project from my entire machine.\nRecreate projects causing the problem from scratch.\nReboot.\n\nI have two Windows Forms projects in the solution. One of them loads the debug information, one doesn't. They both refer to the assembly I'm trying to get debug information on in exactly the same way in the project file. Any ideas?\n\nI want to add here, mostly for myself when I come back to review this question, that symbols are not loaded until the assembly is loaded, and the assembly is not loaded until it is needed. If the breakpoint is in a library that is only used in one function in your main assembly, the symbols will not be loaded (and it will show the breakpoint as not being hit) until that function is called.",
    "output": "Start debugging, as soon as you've arrived at a breakpoint or used \n```csharp\nDebug > Break All\n```\n, use \n```csharp\nDebug > Windows > Modules\n```\n.  You'll see a list of all the assemblies that are loaded into the process.  Locate the one you want to get debug info for.  Right-click it and select Symbol Load Information.  You'll get a dialog that lists all the directories where it looked for the \n```csharp\n.pdb\n```\n file for the assembly.  Verify that list against the actual \n```csharp\n.pdb\n```\n location.  Make sure it doesn't find an old one.\nIn normal projects, the assembly and its \n```csharp\n.pdb\n```\n file should always have been copied by the IDE into the same folder as your \n```csharp\n.exe\n```\n, i.e. the \n```csharp\nbin\\Debug\n```\n folder of your project.  Make sure you remove one from the GAC if you've been playing with it.",
    "score": 1344,
    "tags": [
      "c#",
      ".net",
      "debugging",
      "breakpoints",
      "visual-studio-express"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:28.024139"
  },
  {
    "instruction": "What do two question marks together mean in C#?",
    "context": "Ran across this line of code:\n\n```csharp\nFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();\n\n```\n\nWhat do the two question marks mean, is it some kind of ternary operator?\nIt's hard to look up in Google.",
    "output": "It's the null coalescing operator, and quite like the ternary (immediate-if) operator. See also ?? Operator - MSDN.\n\n```csharp\nFormsAuth = formsAuth ?? new FormsAuthenticationWrapper();\n\n```\n\nexpands to:\n\n```csharp\nFormsAuth = formsAuth != null ? formsAuth : new FormsAuthenticationWrapper();\n\n```\n\nwhich further expands to:\n\n```csharp\nif(formsAuth != null)\n    FormsAuth = formsAuth;\nelse\n    FormsAuth = new FormsAuthenticationWrapper();\n\n```\n\nIn English, it means \"If whatever is to the left is not null, use that, otherwise use what's to the right.\"\nNote that you can use any number of these in sequence. The following statement will assign the first non-null \n```csharp\nAnswer#\n```\n to \n```csharp\nAnswer\n```\n (if all Answers are null then the \n```csharp\nAnswer\n```\n is null):\n\n```csharp\nstring Answer = Answer1 ?? Answer2 ?? Answer3 ?? Answer4;\n\n```\n\n\nAlso it's worth mentioning while the expansion above is conceptually equivalent, the result of each expression is only evaluated once. This is important if for example an expression is a method call with side effects. (Credit to @Joey for pointing this out.)",
    "score": 2674,
    "tags": [
      "c#",
      "null-coalescing-operator"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:28.311939"
  },
  {
    "instruction": "Type Checking: typeof, GetType, or is?",
    "context": "I've seen many people use the following code:\n\n```csharp\nType t = typeof(SomeType);\nif (t == typeof(int))\n    // Some code here\n\n```\n\nBut I know you could also do this:\n\n```csharp\nif (obj1.GetType() == typeof(int))\n    // Some code here\n\n```\n\nOr this:\n\n```csharp\nif (obj1 is int)\n    // Some code here\n\n```\n\nPersonally, I feel the last one is the cleanest, but is there something I'm missing? Which one is the best to use, or is it personal preference?",
    "output": "All are different.\n\n\n```csharp\ntypeof\n```\n takes a type name (which you specify at compile time).\n\n```csharp\nGetType\n```\n gets the runtime type of an instance.\n\n```csharp\nis\n```\n returns true if an instance is in the inheritance tree.\n\nExample\n\n```csharp\nclass Animal { } \nclass Dog : Animal { }\n\nvoid PrintTypes(Animal a) { \n    Console.WriteLine(a.GetType() == typeof(Animal)); // false \n    Console.WriteLine(a is Animal);                   // true \n    Console.WriteLine(a.GetType() == typeof(Dog));    // true\n    Console.WriteLine(a is Dog);                      // true \n}\n\nDog spot = new Dog(); \nPrintTypes(spot);\n\n```\n\n\n\nWhat about \n```csharp\ntypeof(T)\n```\n? Is it also resolved at compile time?\n\nYes. T is always what the type of the expression is. Remember, a generic method is basically a whole bunch of methods with the appropriate type. Example:\n\n```csharp\nstring Foo<T>(T parameter) { return typeof(T).Name; }\n\nAnimal probably_a_dog = new Dog();\nDog    definitely_a_dog = new Dog();\n\nFoo(probably_a_dog); // this calls Foo<Animal> and returns \"Animal\"\nFoo<Animal>(probably_a_dog); // this is exactly the same as above\nFoo<Dog>(probably_a_dog); // !!! This will not compile. The parameter expects a Dog, you cannot pass in an Animal.\n\nFoo(definitely_a_dog); // this calls Foo<Dog> and returns \"Dog\"\nFoo<Dog>(definitely_a_dog); // this is exactly the same as above.\nFoo<Animal>(definitely_a_dog); // this calls Foo<Animal> and returns \"Animal\". \nFoo((Animal)definitely_a_dog); // this does the same as above, returns \"Animal\"\n\n```",
    "score": 2303,
    "tags": [
      "c#",
      "types",
      "typeof",
      "gettype"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:28.608828"
  },
  {
    "instruction": "Proper use of the IDisposable interface",
    "context": "I know from reading Microsoft documentation that the \"primary\" use of the \n```csharp\nIDisposable\n```\n interface is to clean up unmanaged resources.\nTo me, \"unmanaged\" means things like database connections, sockets, window handles, etc.  But, I've seen code where the \n```csharp\nDispose()\n```\n method is implemented to free managed resources, which seems redundant to me, since the garbage collector should take care of that for you.\nFor example:\n\n```csharp\npublic class MyCollection : IDisposable\n{\n    private List<String> _theList = new List<String>();\n    private Dictionary<String, Point> _theDict = new Dictionary<String, Point>();\n\n    // Die, clear it up! (free unmanaged resources)\n    public void Dispose()\n    {\n        _theList.clear();\n        _theDict.clear();\n        _theList = null;\n        _theDict = null;\n    }\n}\n\n```\n\nMy question is, does this make the garbage collector free memory used by \n```csharp\nMyCollection\n```\n any faster than it normally would?\n\nEdit:  So far people have posted some good examples of using \n```csharp\nIDisposable\n```\n to clean up unmanaged resources such as database connections and bitmaps.  But suppose that \n```csharp\n_theList\n```\n in the above code contained a million strings, and you wanted to free that memory now, rather than waiting for the garbage collector.  Would the above code accomplish that?",
    "output": "The point of Dispose is to free unmanaged resources. It needs to be done at some point, otherwise they will never be cleaned up. The garbage collector doesn't know how to call \n```csharp\nDeleteHandle()\n```\n on a variable of type \n```csharp\nIntPtr\n```\n, it doesn't know whether or not it needs to call \n```csharp\nDeleteHandle()\n```\n.\n\nNote: What is an unmanaged resource? If you found it in the Microsoft .NET Framework: it's managed. If you went poking around MSDN yourself, it's unmanaged. Anything you've used P/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framework is unmanaged – and you're now responsible for cleaning it up.\n\nThe object that you've created needs to expose some method, that the outside world can call, in order to clean up unmanaged resources. The method can be named whatever you like:\n\n```csharp\npublic void Cleanup()\n\n```\n\nor\n\n```csharp\npublic void Shutdown()\n\n```\n\nBut instead there is a standardized name for this method:\n\n```csharp\npublic void Dispose()\n\n```\n\nThere was even an interface created, \n```csharp\nIDisposable\n```\n, that has just that one method:\n\n```csharp\npublic interface IDisposable\n{\n   void Dispose();\n}\n\n```\n\nSo you make your object expose the \n```csharp\nIDisposable\n```\n interface, and that way you promise that you've written that single method to clean up your unmanaged resources:\n\n```csharp\npublic void Dispose()\n{\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n}\n\n```\n\nAnd you're done.\nExcept you can do better\nWhat if your object has allocated a 250MB System.Drawing.Bitmap (i.e. the .NET managed Bitmap class) as some sort of frame buffer? Sure, this is a managed .NET object, and the garbage collector will free it. But do you really want to leave 250MB of memory just sitting there – waiting for the garbage collector to eventually come along and free it? What if there's an open database connection? Surely we don't want that connection sitting open, waiting for the GC to finalize the object.\nIf the user has called \n```csharp\nDispose()\n```\n (meaning they no longer plan to use the object) why not get rid of those wasteful bitmaps and database connections?\nSo now we will:\n\nget rid of unmanaged resources (because we have to), and\nget rid of managed resources (because we want to be helpful)\n\nSo let's update our \n```csharp\nDispose()\n```\n method to get rid of those managed objects:\n\n```csharp\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose();\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose();\n      this.frameBufferImage = null;\n   }\n}\n\n```\n\nAnd all is good.\nExcept you can do better!\nWhat if the person forgot to call \n```csharp\nDispose()\n```\n on your object? Then they would leak some unmanaged resources!\n\nNote: They won't leak managed resources, because eventually the garbage collector is going to run, on a background thread, and free the memory associated with any unused objects. This will include your object, and any managed objects you use (e.g. the \n```csharp\nBitmap\n```\n and the \n```csharp\nDbConnection\n```\n).\n\nIf the person forgot to call \n```csharp\nDispose()\n```\n, we can still save their bacon! We still have a way to call it for them: when the garbage collector finally gets around to freeing (i.e. finalizing) our object.\n\nNote: The garbage collector will eventually free all managed objects.\nWhen it does, it calls the \n```csharp\nFinalize\n```\n\nmethod on the object. The GC doesn't know, or\ncare, about your Dispose method.\nThat was just a name we chose for\na method we call when we want to get\nrid of unmanaged stuff.\n\nThe destruction of our object by the Garbage collector is the perfect time to free those pesky unmanaged resources. We do this by overriding the \n```csharp\nFinalize()\n```\n method.\n\nNote: In C#, you don't explicitly override the \n```csharp\nFinalize()\n```\n method.\nYou write a method that looks like a C++ destructor, and the\ncompiler takes that to be your implementation of the \n```csharp\nFinalize()\n```\n method:\n\n\n```csharp\n~MyObject()\n{\n    //we're being finalized (i.e. destroyed), call Dispose in case the user forgot to\n    Dispose(); //<--Warning: subtle bug! Keep reading!\n}\n\n```\n\nBut there's a bug in that code. You see, the garbage collector runs on a background thread; you don't know the order in which two objects are destroyed. It is entirely possible that in your \n```csharp\nDispose()\n```\n code, the managed object you're trying to get rid of (because you wanted to be helpful) is no longer there:\n\n```csharp\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose(); //<-- crash, GC already destroyed it\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose(); //<-- crash, GC already destroyed it\n      this.frameBufferImage = null;\n   }\n}\n\n```\n\nSo what you need is a way for \n```csharp\nFinalize()\n```\n to tell \n```csharp\nDispose()\n```\n that it should not touch any managed resources (because they might not be there anymore), while still freeing unmanaged resources.\nThe standard pattern to do this is to have \n```csharp\nFinalize()\n```\n and \n```csharp\nDispose()\n```\n both call a third(!) method; where you pass a Boolean saying if you're calling it from \n```csharp\nDispose()\n```\n (as opposed to \n```csharp\nFinalize()\n```\n), meaning it's safe to free managed resources.\nThis internal method could be given some arbitrary name like \"CoreDispose\", or \"MyInternalDispose\", but is tradition to call it \n```csharp\nDispose(Boolean)\n```\n:\n\n```csharp\nprotected void Dispose(Boolean disposing)\n\n```\n\nBut a more helpful parameter name might be:\n\n```csharp\nprotected void Dispose(Boolean itIsSafeToAlsoFreeManagedObjects)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too, but only if I'm being called from Dispose\n   //(If I'm being called from Finalize then the objects might not exist\n   //anymore\n   if (itIsSafeToAlsoFreeManagedObjects)  \n   {    \n      if (this.databaseConnection != null)\n      {\n         this.databaseConnection.Dispose();\n         this.databaseConnection = null;\n      }\n      if (this.frameBufferImage != null)\n      {\n         this.frameBufferImage.Dispose();\n         this.frameBufferImage = null;\n      }\n   }\n}\n\n```\n\nAnd you change your implementation of the \n```csharp\nIDisposable.Dispose()\n```\n method to:\n\n```csharp\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it's safe\n}\n\n```\n\nand your finalizer to:\n\n```csharp\n~MyObject()\n{\n   Dispose(false); //I am *not* calling you from Dispose, it's *not* safe\n}\n\n```\n\n\nNote: If your object descends from an object that implements \n```csharp\nDispose\n```\n, then don't forget to call their base Dispose method when you override Dispose:\n\n\n```csharp\npublic override void Dispose()\n{\n    try\n    {\n        Dispose(true); //true: safe to free managed resources\n    }\n    finally\n    {\n        base.Dispose();\n    }\n}\n\n```\n\nAnd all is good.\nExcept you can do better!\nIf the user calls \n```csharp\nDispose()\n```\n on your object, then everything has been cleaned up. Later on, when the garbage collector comes along and calls Finalize, it will then call \n```csharp\nDispose\n```\n again.\nNot only is this wasteful, but if your object has junk references to objects you already disposed of from the last call to \n```csharp\nDispose()\n```\n, you'll try to dispose them again!\nYou'll notice in my code I was careful to remove references to objects that I've disposed, so I don't try to call \n```csharp\nDispose\n```\n on a junk object reference. But that didn't stop a subtle bug from creeping in.\nWhen the user calls \n```csharp\nDispose()\n```\n: the handle CursorFileBitmapIconServiceHandle is destroyed. Later when the garbage collector runs, it will try to destroy the same handle again.\n\n```csharp\nprotected void Dispose(Boolean iAmBeingCalledFromDisposeAndNotFinalize)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle); //<--double destroy \n   ...\n}\n\n```\n\nThe way you fix this is tell the garbage collector that it doesn't need to bother finalizing the object – its resources have already been cleaned up, and no more work is needed. You do this by calling \n```csharp\nGC.SuppressFinalize()\n```\n in the \n```csharp\nDispose()\n```\n method:\n\n```csharp\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it's safe\n   GC.SuppressFinalize(this); //Hey, GC: don't bother calling finalize later\n}\n\n```\n\nNow that the user has called \n```csharp\nDispose()\n```\n, we have:\n\nfreed unmanaged resources\nfreed managed resources\n\nThere's no point in the GC running the finalizer – everything's taken care of.\nCouldn't I use Finalize to cleanup unmanaged resources?\nThe documentation for \n```csharp\nObject.Finalize\n```\n says:\n\nThe Finalize method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.\n\nBut the MSDN documentation also says, for \n```csharp\nIDisposable.Dispose\n```\n:\n\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n\nSo which is it? Which one is the place for me to cleanup unmanaged resources? The answer is:\n\nIt's your choice! But choose \n```csharp\nDispose\n```\n.\n\nYou certainly could place your unmanaged cleanup in the finalizer:\n\n```csharp\n~MyObject()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //A C# destructor automatically calls the destructor of its base class.\n}\n\n```\n\nThe problem with that is you have no idea when the garbage collector will get around to finalizing your object. Your un-managed, un-needed, un-used native resources will stick around until the garbage collector eventually runs. Then it will call your finalizer method; cleaning up unmanaged resources. The documentation of Object.Finalize points this out:\n\nThe exact time when the finalizer executes is undefined. To ensure deterministic release of resources for instances of your class, implement a Close method or provide a \n```csharp\nIDisposable.Dispose\n```\n implementation.\n\nThis is the virtue of using \n```csharp\nDispose\n```\n to cleanup unmanaged resources; you get to know, and control, when unmanaged resource are cleaned up. Their destruction is \"deterministic\".\n\nTo answer your original question: Why not release memory now, rather than for when the GC decides to do it? I have a facial recognition software that needs to get rid of 530 MB of internal images now, since they're no longer needed. When we don't: the machine grinds to a swapping halt.\nBonus Reading\nFor anyone who likes the style of this answer (explaining the why, so the how becomes obvious), I suggest you read Chapter One of Don Box's Essential COM:\n\nDirect link: Chapter 1 sample by Pearson Publishing\nmagnet: 84bf0b960936d677190a2be355858e80ef7542c0\n\nIn 35 pages he explains the problems of using binary objects, and invents COM before your eyes. Once you realize the why of COM, the remaining 300 pages are obvious, and just detail Microsoft's implementation.\nI think every programmer who has ever dealt with objects or COM should, at the very least, read the first chapter. It is the best explanation of anything ever.\nExtra Bonus Reading\nWhen everything you know is wrong archiveby Eric Lippert\n\nIt is therefore very difficult indeed to write a correct finalizer,\nand the best advice I can give you is to not try.",
    "score": 2991,
    "tags": [
      "c#",
      ".net",
      "garbage-collection",
      "idisposable"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:28.921113"
  },
  {
    "instruction": "Calling the base constructor in C#",
    "context": "If I inherit from a base class and want to pass something from the constructor of the inherited class to the constructor of the base class, how do I do that?\nFor example, if I inherit from the Exception class I want to do something like this:\n\n```csharp\nclass MyExceptionClass : Exception\n{\n     public MyExceptionClass(string message, string extraInfo)\n     {\n         //This is where it's all falling apart\n         base(message);\n     }\n}\n\n```\n\nBasically what I want is to be able to pass the string message to the base Exception class.",
    "output": "Modify your constructor to the following so that it calls the base class constructor properly:\n\n```csharp\npublic class MyExceptionClass : Exception\n{\n    public MyExceptionClass(string message, string extrainfo) : base(message)\n    {\n        //other stuff here\n    }\n}\n\n```\n\nNote that a constructor is not something that you can call anytime within a method. That's the reason you're getting errors in your call in the constructor body.",
    "score": 2249,
    "tags": [
      "c#",
      ".net",
      "inheritance",
      "constructor"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:29.220879"
  },
  {
    "instruction": "Is there a reason for C#'s reuse of the variable in a foreach?",
    "context": "When using lambda expressions or anonymous methods in C#, we have to be wary of the access to modified closure pitfall. For example:\n\n```csharp\nforeach (var s in strings)\n{\n   query = query.Where(i => i.Prop == s); // access to modified closure\n   ...\n}\n\n```\n\nDue to the modified closure, the above code will cause all of the \n```csharp\nWhere\n```\n clauses on the query to be based on the final value of \n```csharp\ns\n```\n.\nAs explained here, this happens because the \n```csharp\ns\n```\n variable declared in \n```csharp\nforeach\n```\n loop above is translated like this in the compiler:\n\n```csharp\nstring s;\nwhile (enumerator.MoveNext())\n{\n   s = enumerator.Current;\n   ...\n}\n\n```\n\ninstead of like this:\n\n```csharp\nwhile (enumerator.MoveNext())\n{\n   string s;\n   s = enumerator.Current;\n   ...\n}\n\n```\n\nAs pointed out here, there are no performance advantages to declaring a variable outside the loop, and under normal circumstances the only reason I can think of for doing this is if you plan to use the variable outside the scope of the loop:\n\n```csharp\nstring s;\nwhile (enumerator.MoveNext())\n{\n   s = enumerator.Current;\n   ...\n}\nvar finalString = s;\n\n```\n\nHowever variables defined in a \n```csharp\nforeach\n```\n loop cannot be used outside the loop:\n\n```csharp\nforeach(string s in strings)\n{\n}\nvar finalString = s; // won't work: you're outside the scope.\n\n```\n\nSo the compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.\nIs there something you can do with \n```csharp\nforeach\n```\n loops this way that you couldn't if they were compiled with an inner-scoped variable, or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?",
    "output": "The compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.\n\nYour criticism is entirely justified.\nI discuss this problem in detail here:\nClosing over the loop variable considered harmful\n\nIs there something you can do with foreach loops this way that you couldn't if they were compiled with an inner-scoped variable? or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?\n\nThe latter. The C# 1.0 specification actually did not say whether the loop variable was inside or outside the loop body, as it made no observable difference. When closure semantics were introduced in C# 2.0, the choice was made to put the loop variable outside the loop, consistent with the \"for\" loop.\nI think it is fair to say that all regret that decision. This is one of the worst \"gotchas\" in C#, and we are going to take the breaking change to fix it. In C# 5 the foreach loop variable will be logically inside the body of the loop, and therefore closures will get a fresh copy every time.\nThe \n```csharp\nfor\n```\n loop will not be changed, and the change will not be \"back ported\" to previous versions of C#. You should therefore continue to be careful when using this idiom.",
    "score": 1528,
    "tags": [
      "c#",
      "foreach",
      "lambda",
      "scope",
      "anonymous-methods"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:29.494621"
  },
  {
    "instruction": "What is a NullReferenceException, and how do I fix it?",
    "context": "I have some code and when it executes, it throws a \n```csharp\nNullReferenceException\n```\n, saying:\n\nObject reference not set to an instance of an object.\n\nWhat does this mean, and what can I do to fix this error?",
    "output": "What is the cause?\nBottom Line\nYou are trying to use something that is \n```csharp\nnull\n```\n (or \n```csharp\nNothing\n```\n in VB.NET). This means you either set it to \n```csharp\nnull\n```\n, or you never set it to anything at all.\nLike anything else, \n```csharp\nnull\n```\n gets passed around. If it is \n```csharp\nnull\n```\n in method \"A\", it could be that method \"B\" passed a \n```csharp\nnull\n```\n to method \"A\".\n\n```csharp\nnull\n```\n can have different meanings:\n\nObject variables that are uninitialized and hence point to nothing. In this case, if you access members of such objects, it causes a \n```csharp\nNullReferenceException\n```\n.\nThe developer is using \n```csharp\nnull\n```\n intentionally to indicate there is no meaningful value available. Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign \n```csharp\nnull\n```\n to them to indicate there is no value stored in it, for example \n```csharp\nint? a = null;\n```\n (which is a shortcut for \n```csharp\nNullable<int> a = null;\n```\n) where the question mark indicates it is allowed to store \n```csharp\nnull\n```\n in variable \n```csharp\na\n```\n. You can check that either with \n```csharp\nif (a.HasValue) {...}\n```\n or with \n```csharp\nif (a==null) {...}\n```\n. Nullable variables, like \n```csharp\na\n```\n in this example, allow to access the value via \n```csharp\na.Value\n```\n explicitly, or just as normal via \n```csharp\na\n```\n. Note that accessing it via \n```csharp\na.Value\n```\n throws an \n```csharp\nInvalidOperationException\n```\n instead of a \n```csharp\nNullReferenceException\n```\n if \n```csharp\na\n```\n is \n```csharp\nnull\n```\n - you should do the check beforehand, i.e. if you have another non-nullable variable \n```csharp\nint b;\n```\n then you should do assignments like \n```csharp\nif (a.HasValue) { b = a.Value; }\n```\n or shorter \n```csharp\nif (a != null) { b = a; }\n```\n.\n\nThe rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a \n```csharp\nNullReferenceException\n```\n.\nMore Specifically\nThe \n```csharp\nruntime\n```\n throwing a \n```csharp\nNullReferenceException\n```\n always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).\nThis means the reference is \n```csharp\nnull\n```\n, and you cannot access members (such as methods) through a \n```csharp\nnull\n```\n reference. The simplest case:\n\n```csharp\nstring foo = null;\nfoo.ToUpper();\n\n```\n\nThis will throw a \n```csharp\nNullReferenceException\n```\n at the second line because you can't call the instance method \n```csharp\nToUpper()\n```\n on a \n```csharp\nstring\n```\n reference pointing to \n```csharp\nnull\n```\n.\nDebugging\nHow do you find the source of a \n```csharp\nNullReferenceException\n```\n? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.\nIf you want to find out where the reference is or isn't set, right-click its name and select \"Find All References\". You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.\nBy following the program flow this way, you can find the location where the instance should not be null, and why it isn't properly set.\nExamples\nSome common scenarios where the exception can be thrown:\nGeneric\n\n```csharp\nref1.ref2.ref3.member\n\n```\n\nIf ref1 or ref2 or ref3 is null, then you'll get a \n```csharp\nNullReferenceException\n```\n. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:\n\n```csharp\nvar r1 = ref1;\nvar r2 = r1.ref2;\nvar r3 = r2.ref3;\nr3.member\n\n```\n\nSpecifically, in \n```csharp\nHttpContext.Current.User.Identity.Name\n```\n, the \n```csharp\nHttpContext.Current\n```\n could be null, or the \n```csharp\nUser\n```\n property could be null, or the \n```csharp\nIdentity\n```\n property could be null.\nIndirect\n\n```csharp\npublic class Person \n{\n    public int Age { get; set; }\n}\npublic class Book \n{\n    public Person Author { get; set; }\n}\npublic class Example \n{\n    public void Foo() \n    {\n        Book b1 = new Book();\n        int authorAge = b1.Author.Age; // You never initialized the Author property.\n                                       // There is no Person to get an Age from.\n    }\n}\n\n```\n\nIf you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object's constructor.\nNested Object Initializers\nThe same applies to nested object initializers:\n\n```csharp\nBook b1 = new Book \n{ \n   Author = { Age = 45 } \n};\n\n```\n\nThis translates to:\n\n```csharp\nBook b1 = new Book();\nb1.Author.Age = 45;\n\n```\n\nWhile the \n```csharp\nnew\n```\n keyword is used, it only creates a new instance of \n```csharp\nBook\n```\n, but not a new instance of \n```csharp\nPerson\n```\n, so the \n```csharp\nAuthor\n```\n property is still \n```csharp\nnull\n```\n.\nNested Collection Initializers\n\n```csharp\npublic class Person \n{\n    public ICollection<Book> Books { get; set; }\n}\npublic class Book \n{\n    public string Title { get; set; }\n}\n\n```\n\nThe nested collection \n```csharp\nInitializers\n```\n behave the same:\n\n```csharp\nPerson p1 = new Person \n{\n    Books = {\n         new Book { Title = \"Title1\" },\n         new Book { Title = \"Title2\" },\n    }\n};\n\n```\n\nThis translates to:\n\n```csharp\nPerson p1 = new Person();\np1.Books.Add(new Book { Title = \"Title1\" });\np1.Books.Add(new Book { Title = \"Title2\" });\n\n```\n\nThe \n```csharp\nnew Person\n```\n only creates an instance of \n```csharp\nPerson\n```\n, but the \n```csharp\nBooks\n```\n collection is still \n```csharp\nnull\n```\n. The collection \n```csharp\nInitializer\n```\n syntax does not create a collection\nfor \n```csharp\np1.Books\n```\n, it only translates to the \n```csharp\np1.Books.Add(...)\n```\n statements.\nArray\n\n```csharp\nint[] numbers = null;\nint n = numbers[0]; // numbers is null. There is no array to index.\n\n```\n\nArray Elements\n\n```csharp\nPerson[] people = new Person[5];\npeople[0].Age = 20 // people[0] is null. The array was allocated but not\n                   // initialized. There is no Person to set the Age for.\n\n```\n\nJagged Arrays\n\n```csharp\nlong[][] array = new long[1][];\narray[0][0] = 3; // is null because only the first dimension is yet initialized.\n                 // Use array[0] = new long[2]; first.\n\n```\n\nCollection/List/Dictionary\n\n```csharp\nDictionary<string, int> agesForNames = null;\nint age = agesForNames[\"Bob\"]; // agesForNames is null.\n                               // There is no Dictionary to perform the lookup.\n\n```\n\nRange Variable (Indirect/Deferred)\n\n```csharp\npublic class Person \n{\n    public string Name { get; set; }\n}\nvar people = new List<Person>();\npeople.Add(null);\nvar names = from p in people select p.Name;\nstring firstName = names.First(); // Exception is thrown here, but actually occurs\n                                  // on the line above.  \"p\" is null because the\n                                  // first element we added to the list is null.\n\n```\n\nEvents (C#)\n\n```csharp\npublic class Demo\n{\n    public event EventHandler StateChanged;\n    \n    protected virtual void OnStateChanged(EventArgs e)\n    {        \n        StateChanged(this, e); // Exception is thrown here \n                               // if no event handlers have been attached\n                               // to StateChanged event\n    }\n}\n\n```\n\n(Note: The VB.NET compiler inserts null checks for event usage, so it's not necessary to check events for \n```csharp\nNothing\n```\n in VB.NET.)\nBad Naming Conventions:\nIf you named fields differently from locals, you might have realized that you never initialized the field.\n\n```csharp\npublic class Form1\n{\n    private Customer customer;\n    \n    private void Form1_Load(object sender, EventArgs e) \n    {\n        Customer customer = new Customer();\n        customer.Name = \"John\";\n    }\n    \n    private void Button_Click(object sender, EventArgs e)\n    {\n        MessageBox.Show(customer.Name);\n    }\n}\n\n```\n\nThis can be solved by following the convention to prefix fields with an underscore:\n\n```csharp\n    private Customer _customer;\n\n```\n\nASP.NET Page Life cycle:\n\n```csharp\npublic partial class Issues_Edit : System.Web.UI.Page\n{\n    protected TestIssue myIssue;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n             // Only called on first load, not when button clicked\n             myIssue = new TestIssue(); \n        }\n    }\n        \n    protected void SaveButton_Click(object sender, EventArgs e)\n    {\n        myIssue.Entry = \"NullReferenceException here!\";\n    }\n}\n\n```\n\nASP.NET Session Values\n\n```csharp\n// if the \"FirstName\" session value has not yet been set,\n// then this line will throw a NullReferenceException\nstring firstName = Session[\"FirstName\"].ToString();\n\n```\n\nASP.NET MVC empty view models\nIf the exception occurs when referencing a property of \n```csharp\n@Model\n```\n in an \n```csharp\nASP.NET MVC View\n```\n, you need to understand that the \n```csharp\nModel\n```\n gets set in your action method, when you \n```csharp\nreturn\n```\n a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:\n\n```csharp\n// Controller\npublic class Restaurant:Controller\n{\n    public ActionResult Search()\n    {\n        return View();  // Forgot the provide a Model here.\n    }\n}\n\n// Razor view \n@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.\n{\n}\n    \n<p>@Model.somePropertyName</p> <!-- Also throws -->\n\n```\n\nWPF Control Creation Order and Events\n\n```csharp\nWPF\n```\n controls are created during the call to \n```csharp\nInitializeComponent\n```\n in the order they appear in the visual tree.  A \n```csharp\nNullReferenceException\n```\n will be raised in the case of early-created controls with event handlers, etc., that fire during \n```csharp\nInitializeComponent\n```\n which reference late-created controls.\nFor example:\n\n```csharp\n<Grid>\n    <!-- Combobox declared first -->\n    <ComboBox Name=\"comboBox1\" \n              Margin=\"10\"\n              SelectedIndex=\"0\" \n              SelectionChanged=\"comboBox1_SelectionChanged\">\n       <ComboBoxItem Content=\"Item 1\" />\n       <ComboBoxItem Content=\"Item 2\" />\n       <ComboBoxItem Content=\"Item 3\" />\n    </ComboBox>\n        \n    <!-- Label declared later -->\n    <Label Name=\"label1\" \n           Content=\"Label\"\n           Margin=\"10\" />\n</Grid>\n\n```\n\nHere \n```csharp\ncomboBox1\n```\n is created before \n```csharp\nlabel1\n```\n. If \n```csharp\ncomboBox1_SelectionChanged\n```\n attempts to reference \n```csharp\nlabel1\n```\n, it will not yet have been created.\n\n```csharp\nprivate void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReferenceException here!!\n}\n\n```\n\nChanging the order of the declarations in the \n```csharp\nXAML\n```\n (i.e., listing \n```csharp\nlabel1\n```\n before \n```csharp\ncomboBox1\n```\n, ignoring issues of design philosophy) would at least resolve the \n```csharp\nNullReferenceException\n```\n here.\nCast with \n```csharp\nas\n```\n\n\n```csharp\nvar myThing = someObject as Thing;\n\n```\n\nThis doesn't throw an \n```csharp\nInvalidCastException\n```\n but returns a \n```csharp\nnull\n```\n when the cast fails (and when \n```csharp\nsomeObject\n```\n is itself null). So be aware of that.\nLINQ \n```csharp\nFirstOrDefault()\n```\n and \n```csharp\nSingleOrDefault()\n```\n\nThe plain versions \n```csharp\nFirst()\n```\n and \n```csharp\nSingle()\n```\n throw exceptions when there is nothing. The \"OrDefault\" versions return \n```csharp\nnull\n```\n in that case. So be aware of that.\nforeach\n\n```csharp\nforeach\n```\n throws when you try to iterate on a \n```csharp\nnull\n```\n collection. Usually caused by unexpected \n```csharp\nnull\n```\n result from methods that return collections.\n\n```csharp\nList<int> list = null;    \nforeach(var v in list) { } // NullReferenceException here\n\n```\n\nMore realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:\n\n```csharp\nforeach (var node in myData.MyXml.DocumentNode.SelectNodes(\"//Data\"))\n\n```\n\n\nWays to Avoid\nExplicitly check for \n```csharp\nnull\n```\n and ignore \n```csharp\nnull\n```\n values.\nIf you expect the reference sometimes to be \n```csharp\nnull\n```\n, you can check for it being \n```csharp\nnull\n```\n before accessing instance members:\n\n```csharp\nvoid PrintName(Person p)\n{\n    if (p != null) \n    {\n        Console.WriteLine(p.Name);\n    }\n}\n\n```\n\nExplicitly check for \n```csharp\nnull\n```\n and provide a default value.\nMethods you call expecting an instance can return \n```csharp\nnull\n```\n, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:\n\n```csharp\nstring GetCategory(Book b) \n{\n    if (b == null)\n        return \"Unknown\";\n    return b.Category;\n}\n\n```\n\nExplicitly check for \n```csharp\nnull\n```\n from method calls and throw a custom exception.\nYou can also throw a custom exception, only to catch it in the calling code:\n\n```csharp\nstring GetCategory(string bookTitle) \n{\n    var book = library.FindBook(bookTitle);  // This may return null\n    if (book == null)\n        throw new BookNotFoundException(bookTitle);  // Your custom exception\n    return book.Category;\n}\n\n```\n\nUse \n```csharp\nDebug.Assert\n```\n if a value should never be \n```csharp\nnull\n```\n, to catch the problem earlier than the exception occurs.\nWhen you know during development that a method could, but never should return \n```csharp\nnull\n```\n, you can use \n```csharp\nDebug.Assert()\n```\n to break as soon as possible when it does occur:\n\n```csharp\nstring GetTitle(int knownBookID) \n{\n    // You know this should never return null.\n    var book = library.GetBook(knownBookID);  \n\n    // Exception will occur on the next line instead of at the end of this method.\n    Debug.Assert(book != null, \"Library didn't return a book for known book ID.\");\n\n    // Some other code\n\n    return book.Title; // Will never throw NullReferenceException in Debug mode.\n}\n\n```\n\nThough this check will not end up in your release build, causing it to throw the \n```csharp\nNullReferenceException\n```\n again when \n```csharp\nbook == null\n```\n at runtime in release mode.\nUse \n```csharp\nGetValueOrDefault()\n```\n for \n```csharp\nnullable\n```\n value types to provide a default value when they are \n```csharp\nnull\n```\n.\n\n```csharp\nDateTime? appointment = null;\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the default value provided (DateTime.Now), because appointment is null.\n\nappointment = new DateTime(2022, 10, 20);\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the appointment date, not the default\n\n```\n\nUse the null coalescing operator: \n```csharp\n??\n```\n [C#] or \n```csharp\nIf()\n```\n [VB].\nThe shorthand to providing a default value when a \n```csharp\nnull\n```\n is encountered:\n\n```csharp\nIService CreateService(ILogger log, Int32? frobPowerLevel)\n{\n   var serviceImpl = new MyService(log ?? NullLog.Instance);\n \n   // Note that the above \"GetValueOrDefault()\" can also be rewritten to use\n   // the coalesce operator:\n   serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;\n}\n\n```\n\nUse the null condition operator: \n```csharp\n?.\n```\n or \n```csharp\n?[x]\n```\n for arrays (available in C# 6 and VB.NET 14):\nThis is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:\n\n```csharp\nvar title = person.Title.ToUpper();\n\n```\n\nIf the person does not have a title, this will throw an exception because it is trying to call \n```csharp\nToUpper\n```\n on a property with a null value.\nIn \n```csharp\nC# 5\n```\n and below, this can be guarded with:\n\n```csharp\nvar title = person.Title == null ? null : person.Title.ToUpper();\n\n```\n\nNow the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:\n\n```csharp\nvar title = person.Title?.ToUpper();\n\n```\n\nThis will result in the title variable being \n```csharp\nnull\n```\n, and the call to \n```csharp\nToUpper\n```\n is not made if \n```csharp\nperson.Title\n```\n is \n```csharp\nnull\n```\n.\nOf course, you still have to check \n```csharp\ntitle\n```\n for \n```csharp\nnull\n```\n or use the null condition operator together with the null coalescing operator (\n```csharp\n??\n```\n) to supply a default value:\n\n```csharp\n// regular null check\nint titleLength = 0;\nif (title != null)\n    titleLength = title.Length; // If title is null, this would throw NullReferenceException\n    \n// combining the `?` and the `??` operator\nint titleLength = title?.Length ?? 0;\n\n```\n\nLikewise, for arrays you can use \n```csharp\n?[i]\n```\n as follows:\n\n```csharp\nint[] myIntArray = null;\nvar i = 5;\nint? elem = myIntArray?[i];\nif (!elem.HasValue) Console.WriteLine(\"No value\");\n\n```\n\nThis will do the following: If \n```csharp\nmyIntArray\n```\n is \n```csharp\nnull\n```\n, the expression returns \n```csharp\nnull\n```\n and you can safely check it. If it contains an array, it will do the same as:\n\n```csharp\nelem = myIntArray[i];\n```\n and returns the ith element.\nUse null context (available in C# 8):\nIntroduced in \n```csharp\nC# 8\n```\n, null contexts and nullable reference types perform static analysis on variables and provide a compiler warning if a value can be potentially \n```csharp\nnull\n```\n or have been set to \n```csharp\nnull\n```\n. The nullable reference types allow types to be explicitly allowed to be \n```csharp\nnull\n```\n.\nThe nullable annotation context and nullable warning context can be set for a project using the \n```csharp\nNullable\n```\n element in your \n```csharp\ncsproj\n```\n file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:\n\n\n```csharp\nenable\n```\n: The nullable annotation context is enabled. The nullable warning context is enabled. Variables of a reference type, string, for example, are non-nullable. All nullability warnings are enabled.\n\n```csharp\ndisable\n```\n: The nullable annotation context is disabled. The nullable warning context is disabled. Variables of a reference type are oblivious, just like earlier versions of C#. All nullability warnings are disabled.\n\n```csharp\nsafeonly\n```\n: The nullable annotation context is enabled. The nullable warning context is safeonly. Variables of a reference type are non-nullable. All safety nullability warnings are enabled.\n\n```csharp\nwarnings\n```\n: The nullable annotation context is disabled. The nullable warning context is enabled. Variables of a reference type are oblivious. All nullability warnings are enabled.\n\n```csharp\nsafeonlywarnings\n```\n: The nullable annotation context is disabled. The nullable warning context is safeonly.\nVariables of a reference type are oblivious. All safety nullability warnings are enabled.\n\nA nullable reference type is noted using the same syntax as nullable value types: a \n```csharp\n?\n```\n is appended to the type of the variable.\nSpecial techniques for debugging and fixing null derefs in iterators\n\n```csharp\nC#\n```\n supports \"iterator blocks\" (called \"generators\" in some other popular languages). \n```csharp\nNullReferenceException\n```\n can be particularly tricky to debug in iterator blocks because of deferred execution:\n\n```csharp\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n    for (int i = 0; i < count; ++i)\n    yield return f.MakeFrob();\n}\n...\nFrobFactory factory = whatever;\nIEnumerable<Frobs> frobs = GetFrobs();\n...\nforeach(Frob frob in frobs) { ... }\n\n```\n\nIf \n```csharp\nwhatever\n```\n results in \n```csharp\nnull\n```\n then \n```csharp\nMakeFrob\n```\n will throw. Now, you might think that the right thing to do is this:\n\n```csharp\n// DON'T DO THIS\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n   if (f == null) \n      throw new ArgumentNullException(\"f\", \"factory must not be null\");\n   for (int i = 0; i < count; ++i)\n      yield return f.MakeFrob();\n}\n\n```\n\nWhy is this wrong?  Because the iterator block does not actually run until the \n```csharp\nforeach\n```\n!  The call to \n```csharp\nGetFrobs\n```\n simply returns an object which when iterated will run the iterator block.\nBy writing a \n```csharp\nnull\n```\n check like this you prevent the \n```csharp\nNullReferenceException\n```\n, but you move the \n```csharp\nNullArgumentException\n```\n to the point of the iteration, not to the point of the call, and that is very confusing to debug.\nThe correct fix is:\n\n```csharp\n// DO THIS\npublic IEnumerable<Frob> GetFrobs(FrobFactory f, int count)\n{\n   // No yields in a public method that throws!\n   if (f == null) \n       throw new ArgumentNullException(\"f\", \"factory must not be null\");\n   return GetFrobsForReal(f, count);\n}\nprivate IEnumerable<Frob> GetFrobsForReal(FrobFactory f, int count)\n{\n   // Yields in a private method\n   Debug.Assert(f != null);\n   for (int i = 0; i < count; ++i)\n        yield return f.MakeFrob();\n}\n\n```\n\nThat is, make a private helper method that has the iterator block logic and a public surface method that does the \n```csharp\nnull\n```\n check and returns the iterator. Now when \n```csharp\nGetFrobs\n```\n is called, the \n```csharp\nnull\n```\n check happens immediately, and then \n```csharp\nGetFrobsForReal\n```\n executes when the sequence is iterated.\nIf you examine the reference source for \n```csharp\nLINQ\n```\n to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier. Optimize your code for the convenience of the caller, not the convenience of the author.\nA note on null dereferences in unsafe code\n\n```csharp\nC#\n```\n has an \"unsafe\" mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works.\nIn unsafe mode, you should be aware of two important facts:\n\ndereferencing a null pointer produces the same exception as dereferencing a null reference\ndereferencing an invalid non-null pointer can produce that exception in some circumstances\n\nTo understand why that is, it helps to understand how .NET produces \n```csharp\nNullReferenceException\n```\n in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)\nMemory is virtualized in \n```csharp\nWindows\n```\n; each process gets a virtual memory space of many \"pages\" of memory that are tracked by the operating system. Each page of memory has flags set on it that determine how it may be used: read from, written to, executed, and so on. The lowest page is marked as \"produce an error if ever used in any way\".\nBoth a null pointer and a null reference in \n```csharp\nC#\n```\n are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the \n```csharp\nNullReferenceException\n```\n.\nThat's why dereferencing both a null pointer and a null reference produces the same exception.\nWhat about the second point? Dereferencing any invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.\nWhy does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the \n```csharp\nCLR\n```\n will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address via the null.\nIf you are working with unsafe code and you get a \n```csharp\nNullReferenceException\n```\n, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.",
    "score": 2739,
    "tags": [
      "c#",
      ".net",
      "vb.net",
      "null",
      "nullreferenceexception"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:29.860129"
  },
  {
    "instruction": "What does the [Flags] Enum Attribute mean in C#?",
    "context": "From time to time I see an enum like the following:\n\n```csharp\n[Flags]\npublic enum Options \n{\n    None    = 0,\n    Option1 = 1,\n    Option2 = 2,\n    Option3 = 4,\n    Option4 = 8\n}\n\n```\n\nI don't understand what exactly the \n```csharp\n[Flags]\n```\n attribute does.\nAnyone have a good explanation or example they could post?",
    "output": "The \n```csharp\n[Flags]\n```\n attribute should be used whenever the enumerable represents a collection of possible values, rather than a single value. Such collections are often used with bitwise operators, for example:\n\n```csharp\nvar allowedColors = MyColor.Red | MyColor.Green | MyColor.Blue;\n\n```\n\nNote that the \n```csharp\n[Flags]\n```\n attribute doesn't enable this by itself - all it does is allow a nice representation by the \n```csharp\n.ToString()\n```\n method:\n\n```csharp\nenum Suits { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }\n[Flags] enum SuitsFlags { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }\n\n...\n\nvar str1 = (Suits.Spades | Suits.Diamonds).ToString();\n           // \"5\"\nvar str2 = (SuitsFlags.Spades | SuitsFlags.Diamonds).ToString();\n           // \"Spades, Diamonds\"\n\n```\n\nIt is also important to note that \n```csharp\n[Flags]\n```\n does not automatically make the enum values powers of two. If you omit the numeric values, the enum will not work as one might expect in bitwise operations, because by default the values start with 0 and increment. \nIncorrect declaration:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    Yellow,  // 0\n    Green,   // 1\n    Red,     // 2\n    Blue     // 3\n}\n\n```\n\nThe values, if declared this way, will be Yellow = 0, Green = 1, Red = 2, Blue = 3. This will render it useless as flags.\nHere's an example of a correct declaration:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    Yellow = 1,\n    Green = 2,\n    Red = 4,\n    Blue = 8\n}\n\n```\n\nTo retrieve the distinct values in your property, one can do this:\n\n```csharp\nif (myProperties.AllowedColors.HasFlag(MyColor.Yellow))\n{\n    // Yellow is allowed...\n}\n\n```\n\nor prior to .NET 4:\n\n```csharp\nif((myProperties.AllowedColors & MyColor.Yellow) == MyColor.Yellow)\n{\n    // Yellow is allowed...\n}\n\nif((myProperties.AllowedColors & MyColor.Green) == MyColor.Green)\n{\n    // Green is allowed...\n}    \n\n```\n\nUnder the covers\nThis works because you used powers of two in your enumeration. Under the covers, your enumeration values look like this in binary ones and zeros:\n\n```csharp\n Yellow: 00000001\n Green:  00000010\n Red:    00000100\n Blue:   00001000\n\n```\n\nSimilarly, after you've set your property AllowedColors to Red, Green and Blue using the binary bitwise OR \n```csharp\n|\n```\n operator, AllowedColors looks like this:\n\n```csharp\nmyProperties.AllowedColors: 00001110\n\n```\n\nSo when you retrieve the value you are actually performing bitwise AND \n```csharp\n&\n```\n on the values:\n\n```csharp\nmyProperties.AllowedColors: 00001110\n             MyColor.Green: 00000010\n             -----------------------\n                            00000010 // Hey, this is the same as MyColor.Green!\n\n```\n\nThe None = 0 value\nAnd regarding the use of \n```csharp\n0\n```\n in your enumeration, quoting from MSDN:\n\n```csharp\n[Flags]\npublic enum MyColors\n{\n    None = 0,\n    ....\n}\n\n```\n\n\nUse None as the name of the flag enumerated constant whose value is zero. You cannot use the None enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the None enumerated constant to determine whether any bits in the numeric value are set. \n\nYou can find more info about the flags attribute and its usage at msdn and designing flags at msdn",
    "score": 2591,
    "tags": [
      "c#",
      "enums",
      "flags"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:30.140564"
  },
  {
    "instruction": "How to loop through all enum values in C#?",
    "context": "```csharp\npublic enum Foos\n{\n    A,\n    B,\n    C\n}\n\n```\n\nIs there a way to loop through the possible values of \n```csharp\nFoos\n```\n?\nBasically?\n\n```csharp\nforeach(Foo in Foos)\n\n```",
    "output": "Yes you can use the ‍\n```csharp\nGetValue‍‍‍s\n```\n method:\n\n```csharp\nvar values = Enum.GetValues(typeof(Foos));\n\n```\n\nOr the typed version:\n\n```csharp\nvar values = Enum.GetValues(typeof(Foos)).Cast<Foos>();\n\n```\n\nI long ago added a helper function to my private library for just such an occasion:\n\n```csharp\npublic static class EnumUtil {\n    public static IEnumerable<T> GetValues<T>() {\n        return Enum.GetValues(typeof(T)).Cast<T>();\n    }\n}\n\n```\n\nUsage:\n\n```csharp\nvar values = EnumUtil.GetValues<Foos>();\n\n```",
    "score": 2531,
    "tags": [
      "c#",
      ".net",
      "enums",
      "language-features"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:30.413233"
  },
  {
    "instruction": "Why not inherit from List<T>?",
    "context": "When planning out my programs, I often start with a chain of thought like so:\n\nA football team is just a list of football players. Therefore, I should represent it with:\n\n```csharp\nvar football_team = new List<FootballPlayer>();\n\n```\n\nThe ordering of this list represent the order in which the players are listed in the roster.\n\nBut I realize later that teams also have other properties, besides the mere list of players, that must be recorded. For example, the running total of scores this season, the current budget, the uniform colors, a \n```csharp\nstring\n```\n representing the name of the team, etc..\nSo then I think:\n\nOkay, a football team is just like a list of players, but additionally, it has a name (a \n```csharp\nstring\n```\n) and a running total of scores (an \n```csharp\nint\n```\n). .NET does not provide a class for storing football teams, so I will make my own class. The most similar and relevant existing structure is \n```csharp\nList<FootballPlayer>\n```\n, so I will inherit from it:\n\n```csharp\nclass FootballTeam : List<FootballPlayer> \n{ \n    public string TeamName; \n    public int RunningTotal \n}\n\n```\n\n\nBut it turns out that a guideline says you shouldn't inherit from \n```csharp\nList<T>\n```\n. I'm thoroughly confused by this guideline in two respects.\nWhy not?\nApparently \n```csharp\nList\n```\n is somehow optimized for performance. How so? What performance problems will I cause if I extend \n```csharp\nList\n```\n? What exactly will break?\nAnother reason I've seen is that \n```csharp\nList\n```\n is provided by Microsoft, and I have no control over it, so I cannot change it later, after exposing a \"public API\". But I struggle to understand this. What is a public API and why should I care? If my current project does not and is not likely to ever have this public API, can I safely ignore this guideline? If I do inherit from \n```csharp\nList\n```\n and it turns out I need a public API, what difficulties will I have?\nWhy does it even matter? A list is a list. What could possibly change? What could I possibly want to change?\nAnd lastly, if Microsoft did not want me to inherit from \n```csharp\nList\n```\n, why didn't they make the class \n```csharp\nsealed\n```\n?\nWhat else am I supposed to use?\nApparently, for custom collections, Microsoft has provided a \n```csharp\nCollection\n```\n class which should be extended instead of \n```csharp\nList\n```\n. But this class is very bare, and does not have many useful things, such as \n```csharp\nAddRange\n```\n, for instance. jvitor83's answer provides a performance rationale for that particular method, but how is a slow \n```csharp\nAddRange\n```\n not better than no \n```csharp\nAddRange\n```\n?\nInheriting from \n```csharp\nCollection\n```\n is way more work than inheriting from \n```csharp\nList\n```\n, and I see no benefit. Surely Microsoft wouldn't tell me to do extra work for no reason, so I can't help feeling like I am somehow misunderstanding something, and inheriting \n```csharp\nCollection\n```\n is actually not the right solution for my problem.\nI've seen suggestions such as implementing \n```csharp\nIList\n```\n. Just no. This is dozens of lines of boilerplate code which gains me nothing.\nLastly, some suggest wrapping the \n```csharp\nList\n```\n in something: \n\n```csharp\nclass FootballTeam \n{ \n    public List<FootballPlayer> Players; \n}\n\n```\n\nThere are two problems with this:\n\nIt makes my code needlessly verbose. I must now call \n```csharp\nmy_team.Players.Count\n```\n instead of just \n```csharp\nmy_team.Count\n```\n. Thankfully, with C# I can define indexers to make indexing transparent, and forward all the methods of the internal \n```csharp\nList\n```\n... But that's a lot of code! What do I get for all that work?\nIt just plain doesn't make any sense. A football team doesn't \"have\" a list of players. It is the list of players. You don't say \"John McFootballer has joined SomeTeam's players\". You say \"John has joined SomeTeam\". You don't add a letter to \"a string's characters\", you add a letter to a string. You don't add a book to a library's books, you add a book to a library.\n\nI realize that what happens \"under the hood\" can be said to be \"adding X to Y's internal list\", but this seems like a very counter-intuitive way of thinking about the world.\nMy question (summarized)\nWhat is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a \n```csharp\nlist\n```\n of \n```csharp\nthings\n```\n with a few bells and whistles?\nIs inheriting from \n```csharp\nList<T>\n```\n always unacceptable? When is it acceptable? Why/why not? What must a programmer consider, when deciding whether to inherit from \n```csharp\nList<T>\n```\n or not?",
    "output": "There are some good answers here. I would add to them the following points.\n\nWhat is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a list of things with a few bells and whistles?\n\nAsk any ten non-computer-programmer people who are familiar with the existence of football to fill in the blank:\n\nA football team is a particular kind of _____\n\nDid anyone say \"list of football players with a few bells and whistles\", or did they all say \"sports team\" or \"club\" or \"organization\"?  Your notion that a football team is a particular kind of list of players is in your human mind and your human mind alone.\n\n```csharp\nList<T>\n```\n is a mechanism.  Football team is a business object -- that is, an object that represents some concept that is in the business domain of the program. Don't mix those! A football team is a kind of team; it has a roster, a roster is a list of players. A roster is not a particular kind of list of players. A roster is a list of players. So make a property called \n```csharp\nRoster\n```\n that is a \n```csharp\nList<Player>\n```\n. And make it \n```csharp\nReadOnlyList<Player>\n```\n while you're at it, unless you believe that everyone who knows about a football team gets to delete players from the roster.\n\nIs inheriting from \n```csharp\nList<T>\n```\n always unacceptable?\n\nUnacceptable to whom? Me? No.\n\nWhen is it acceptable?\n\nWhen you're building a mechanism that extends the \n```csharp\nList<T>\n```\n mechanism.\n\nWhat must a programmer consider, when deciding whether to inherit from \n```csharp\nList<T>\n```\n or not?\n\nAm I building a mechanism or a business object?\n\nBut that's a lot of code! What do I get for all that work?\n\nYou spent more time typing up your question that it would have taken you to write forwarding methods for the relevant members of \n```csharp\nList<T>\n```\n fifty times over. You're clearly not afraid of verbosity, and we are talking about a very small amount of code here; this is a few minutes work.\nUPDATE\nI gave it some more thought and there is another reason to not model a football team as a list of players. In fact it might be a bad idea to model a football team as having a list of players too. The problem with a team as/having a list of players is that what you've got is a snapshot of the team at a moment in time. I don't know what your business case is for this class, but if I had a class that represented a football team I would want to ask it questions like \"how many Seahawks players missed games due to injury between 2003 and 2013?\" or \"What Denver player who previously played for another team had the largest year-over-year increase in yards ran?\" or \"Did the Piggers go all the way this year?\"\nThat is, a football team seems to me to be well modeled as a collection of historical facts such as when a player was recruited, injured, retired, etc. Obviously the current player roster is an important fact that should probably be front-and-center, but there may be other interesting things you want to do with this object that require a more historical perspective.",
    "score": 1848,
    "tags": [
      "c#",
      ".net",
      "list",
      "oop",
      "inheritance"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:30.700358"
  },
  {
    "instruction": "What is the difference between const and readonly in C#?",
    "context": "What is the difference between \n```csharp\nconst\n```\n and \n```csharp\nreadonly\n```\n in C#? \nWhen would you use one over the other?",
    "output": "Apart from the apparent difference of\n\nhaving to declare the value at the time of a definition for a \n```csharp\nconst\n```\n VS \n```csharp\nreadonly\n```\n values can be computed dynamically but need to be assigned before the constructor exits. After that it is frozen.\n\n```csharp\nconst\n```\n's are implicitly \n```csharp\nstatic\n```\n. You use a \n```csharp\nClassName.ConstantName\n```\n notation to access them.\n\nThere is a subtle difference. Consider a class defined in \n```csharp\nAssemblyA\n```\n.\n\n```csharp\npublic class Const_V_Readonly\n{\n  public const int I_CONST_VALUE = 2;\n  public readonly int I_RO_VALUE;\n  public Const_V_Readonly()\n  {\n     I_RO_VALUE = 3;\n  }\n}\n\n```\n\n\n```csharp\nAssemblyB\n```\n references \n```csharp\nAssemblyA\n```\n and uses these values in code. When this is compiled:\n\nin the case of the \n```csharp\nconst\n```\n value, it is like a find-replace.  The value 2 is 'baked into' the \n```csharp\nAssemblyB\n```\n's IL. This means that if tomorrow I update \n```csharp\nI_CONST_VALUE\n```\n to 20, \n```csharp\nAssemblyB\n```\n would still have 2 till I recompile it.\nin the case of the \n```csharp\nreadonly\n```\n value, it is like a \n```csharp\nref\n```\n to a memory location. The value is not baked into \n```csharp\nAssemblyB\n```\n's IL. This means that if the memory location is updated, \n```csharp\nAssemblyB\n```\n gets the new value without recompilation. So if \n```csharp\nI_RO_VALUE\n```\n is updated to 30, you only need to build \n```csharp\nAssemblyA\n```\n and all clients do not need to be recompiled.\n\nSo if you are confident that the value of the constant won't change, use a \n```csharp\nconst\n```\n.\n\n```csharp\npublic const int CM_IN_A_METER = 100;\n\n```\n\nBut if you have a constant that may change (e.g. w.r.t. precision) or when in doubt, use a \n```csharp\nreadonly\n```\n.\n\n```csharp\npublic readonly float PI = 3.14;\n\n```\n\nUpdate: Aku needs to get a mention because he pointed this out first. Also I need to plug where I learned this: Effective C# - Bill Wagner",
    "score": 1578,
    "tags": [
      "c#",
      ".net",
      "constants",
      "readonly"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:30.975686"
  },
  {
    "instruction": "How to Sort a List<T> by a property in the object",
    "context": "I have a class called \n```csharp\nOrder\n```\n which has properties such as \n```csharp\nOrderId\n```\n, \n```csharp\nOrderDate\n```\n, \n```csharp\nQuantity\n```\n, and \n```csharp\nTotal\n```\n. I have a list of this \n```csharp\nOrder\n```\n class:\n\n```csharp\nList<Order> objListOrder = new List<Order>();\nGetOrderList(objListOrder); // fill list of orders\n\n```\n\nI want to sort the list based on one property of the \n```csharp\nOrder\n```\n object; for example, either by \n```csharp\nOrderDate\n```\n or \n```csharp\nOrderID\n```\n.\nHow can I do this in C#?",
    "output": "The easiest way I can think of is to use Linq:\n\n```csharp\nList<Order> SortedList = objListOrder.OrderBy(o=>o.OrderDate).ToList();\n\n```",
    "score": 2340,
    "tags": [
      "c#",
      "generics",
      "list",
      "sorting"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:31.253181"
  },
  {
    "instruction": "Why is it important to override GetHashCode when Equals method is overridden?",
    "context": "Given the following class\n\n```csharp\npublic class Foo\n{\n    public int FooId { get; set; }\n    public string FooName { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        Foo fooItem = obj as Foo;\n\n        if (fooItem == null) \n        {\n           return false;\n        }\n\n        return fooItem.FooId == this.FooId;\n    }\n\n    public override int GetHashCode()\n    {\n        // Which is preferred?\n\n        return base.GetHashCode();\n\n        //return this.FooId.GetHashCode();\n    }\n}\n\n```\n\nI have overridden the \n```csharp\nEquals\n```\n method because \n```csharp\nFoo\n```\n represent a row for the \n```csharp\nFoo\n```\ns table.  Which is the preferred method for overriding the \n```csharp\nGetHashCode\n```\n?\nWhy is it important to override \n```csharp\nGetHashCode\n```\n?",
    "output": "Yes, it is important if your item will be used as a key in a dictionary, or \n```csharp\nHashSet<T>\n```\n, etc - since this is used (in the absence of a custom \n```csharp\nIEqualityComparer<T>\n```\n) to group items into buckets. If the hash-code for two items does not match, they may never be considered equal (Equals will simply never be called).\nThe GetHashCode() method should reflect the \n```csharp\nEquals\n```\n logic; the rules are:\n\nif two things are equal (\n```csharp\nEquals(...) == true\n```\n) then they must return the same value for \n```csharp\nGetHashCode()\n```\n\nif the \n```csharp\nGetHashCode()\n```\n is equal, it is not necessary for them to be the same; this is a collision, and \n```csharp\nEquals\n```\n will be called to see if it is a real equality or not.\n\nIn this case, it looks like \"\n```csharp\nreturn FooId;\n```\n\" is a suitable \n```csharp\nGetHashCode()\n```\n implementation. If you are testing multiple properties, it is common to combine them using code like below, to reduce diagonal collisions (i.e. so that \n```csharp\nnew Foo(3,5)\n```\n has a different hash-code to \n```csharp\nnew Foo(5,3)\n```\n):\nIn modern frameworks, the \n```csharp\nHashCode\n```\n type has methods to help you create a hashcode from multiple values; on older frameworks, you'd need to go without, so something like:\n\n```csharp\nunchecked // only needed if you're compiling with arithmetic checks enabled\n{ // (the default compiler behaviour is *disabled*, so most folks won't need this)\n    int hash = 13;\n    hash = (hash * 7) + field1.GetHashCode();\n    hash = (hash * 7) + field2.GetHashCode();\n    ...\n    return hash;\n}\n\n```\n\nOh - for convenience, you might also consider providing \n```csharp\n==\n```\n and \n```csharp\n!=\n```\n operators when overriding \n```csharp\nEquals\n```\n and \n```csharp\nGetHashCode\n```\n.\n\nA demonstration of what happens when you get this wrong is here.",
    "score": 1492,
    "tags": [
      "c#",
      "overriding",
      "hashcode"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:31.515786"
  },
  {
    "instruction": "How do you convert a byte array to a hexadecimal string, and vice versa?",
    "context": "How can you convert a byte array to a hexadecimal string and vice versa?",
    "output": "You can use \n```csharp\nConvert.ToHexString\n```\n starting with .NET 5. \nThere's also a method for the reverse operation: \n```csharp\nConvert.FromHexString\n```\n.\n\nFor older versions of .NET you can either use:\n\n```csharp\npublic static string ByteArrayToString(byte[] ba)\n{\n  StringBuilder hex = new StringBuilder(ba.Length * 2);\n  foreach (byte b in ba)\n    hex.AppendFormat(\"{0:x2}\", b);\n  return hex.ToString();\n}\n\n```\n\nor:\n\n```csharp\npublic static string ByteArrayToString(byte[] ba)\n{\n  return BitConverter.ToString(ba).Replace(\"-\",\"\");\n}\n\n```\n\nThere are even more variants of doing it, for example here.\nThe reverse conversion would go like this:\n\n```csharp\npublic static byte[] StringToByteArray(String hex)\n{\n  int NumberChars = hex.Length;\n  byte[] bytes = new byte[NumberChars / 2];\n  for (int i = 0; i < NumberChars; i += 2)\n    bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);\n  return bytes;\n}\n\n```\n\n\nUsing \n```csharp\nSubstring\n```\n is the best option in combination with \n```csharp\nConvert.ToByte\n```\n. See this answer for more information. If you need better performance, you must avoid \n```csharp\nConvert.ToByte\n```\n before you can drop \n```csharp\nSubString\n```\n.",
    "score": 1739,
    "tags": [
      "c#",
      "arrays",
      "hex"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:31.807943"
  },
  {
    "instruction": "Calculate relative time in C#",
    "context": "Given a specific \n```csharp\nDateTime\n```\n value, how do I display relative time, like:\n\n\n```csharp\n2 hours ago\n```\n\n\n```csharp\n3 days ago\n```\n\n\n```csharp\na month ago\n```",
    "output": "Jeff, your code is nice but could be clearer with constants (as suggested in Code Complete).\n\n```csharp\nconst int SECOND = 1;\nconst int MINUTE = 60 * SECOND;\nconst int HOUR = 60 * MINUTE;\nconst int DAY = 24 * HOUR;\nconst int MONTH = 30 * DAY;\n\nvar ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);\ndouble delta = Math.Abs(ts.TotalSeconds);\n\nif (delta < 1 * MINUTE)\n  return ts.Seconds == 1 ? \"one second ago\" : ts.Seconds + \" seconds ago\";\n\nif (delta < 2 * MINUTE)\n  return \"a minute ago\";\n\nif (delta < 45 * MINUTE)\n  return ts.Minutes + \" minutes ago\";\n\nif (delta < 90 * MINUTE)\n  return \"an hour ago\";\n\nif (delta < 24 * HOUR)\n  return ts.Hours + \" hours ago\";\n\nif (delta < 48 * HOUR)\n  return \"yesterday\";\n\nif (delta < 30 * DAY)\n  return ts.Days + \" days ago\";\n\nif (delta < 12 * MONTH)\n{\n  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));\n  return months <= 1 ? \"one month ago\" : months + \" months ago\";\n}\nelse\n{\n  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));\n  return years <= 1 ? \"one year ago\" : years + \" years ago\";\n}\n\n```",
    "score": 1071,
    "tags": [
      "c#",
      "datetime",
      "time",
      "datediff",
      "relative-time-span"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:32.096093"
  },
  {
    "instruction": "When should I use a struct rather than a class in C#?",
    "context": "When should you use struct and not class in C#? My conceptual model is that structs are used in times when the item is merely a collection of value types.  A way to logically hold them all together into a cohesive whole.\nI came across these rules here:\n\nA struct should represent a single\nvalue.\nA struct should have a memory\nfootprint less than 16 bytes.\nA struct should not be changed after\ncreation.\n\nDo these rules work? What does a struct mean semantically?",
    "output": "The source referenced by the OP has some credibility ...but what about Microsoft - what is the stance on struct usage? I sought some extra learning from Microsoft, and here is what I found:  \n\nConsider defining a structure instead of a class if instances of the\n  type are small and commonly short-lived or are commonly embedded in\n  other objects.\nDo not define a structure unless the type has all of the following characteristics: \n\nIt logically represents a single value, similar to primitive types (integer, double, and so on).\nIt has an instance size smaller than 16 bytes.\nIt is immutable.\nIt will not have to be boxed frequently.  \n\n\nMicrosoft consistently violates those rules\nOkay, #2 and #3 anyway. Our beloved dictionary has 2 internal structs:  \n\n```csharp\n[StructLayout(LayoutKind.Sequential)]  // default for structs\nprivate struct Entry  //<Tkey, TValue>\n{\n    //  View code at *Reference Source\n}\n\n[Serializable, StructLayout(LayoutKind.Sequential)]\npublic struct Enumerator : \n    IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, \n    IDictionaryEnumerator, IEnumerator\n{\n    //  View code at *Reference Source\n}\n\n```\n\n*Reference Source\nThe 'JonnyCantCode.com' source got 3 out of 4 - quite forgivable since #4 probably wouldn't be an issue. If you find yourself boxing a struct, rethink your architecture.  \nLet's look at why Microsoft would use these structs:\n\nEach struct, \n```csharp\nEntry\n```\n and \n```csharp\nEnumerator\n```\n, represent single values.\nSpeed\n\n```csharp\nEntry\n```\n is never passed as a parameter outside of the Dictionary class. Further investigation shows that in order to satisfy implementation of IEnumerable, Dictionary uses the \n```csharp\nEnumerator\n```\n struct which it copies every time an enumerator is requested ...makes sense.\nInternal to the Dictionary class. \n```csharp\nEnumerator\n```\n is public because Dictionary is enumerable and must have equal accessibility to the IEnumerator interface implementation - e.g. IEnumerator getter.  \n\nUpdate - In addition, realize that when a struct implements an interface - as Enumerator does - and is cast to that implemented type, the struct becomes a reference type and is moved to the heap. Internal to the Dictionary class, Enumerator is still a value type. However, as soon as a method calls \n```csharp\nGetEnumerator()\n```\n, a reference-type \n```csharp\nIEnumerator\n```\n is returned.\nWhat we don't see here is any attempt or proof of requirement to keep structs immutable or maintaining an instance size of only 16 bytes or less:  \n\nNothing in the structs above is declared \n```csharp\nreadonly\n```\n - not immutable\nSize of these struct could be well over 16 bytes\n\n```csharp\nEntry\n```\n has an undetermined lifetime (from \n```csharp\nAdd()\n```\n, to \n```csharp\nRemove()\n```\n, \n```csharp\nClear()\n```\n, or garbage collection);\n\nAnd ...\n 4. Both structs store TKey and TValue, which we all know are quite capable of being reference types (added bonus info)\nHashed keys notwithstanding, dictionaries are fast in part because instancing a struct is quicker than a reference type. Here, I have a \n```csharp\nDictionary<int, int>\n```\n that stores 300,000 random integers with sequentially incremented keys.\n\nCapacity: 312874\n  MemSize:  2660827 bytes\n  Completed Resize:  5ms\n  Total time to fill:  889ms\n\nCapacity:  number of elements available before the internal array must be resized.  \nMemSize:  determined by serializing the dictionary into a MemoryStream and getting a byte length (accurate enough for our purposes).  \nCompleted Resize:  the time it takes to resize the internal array from 150862 elements to 312874 elements. When you figure that each element is sequentially copied via \n```csharp\nArray.CopyTo()\n```\n, that ain't too shabby.  \nTotal time to fill: admittedly skewed due to logging and an \n```csharp\nOnResize\n```\n event I added to the source; however, still impressive to fill 300k integers while resizing 15 times during the operation. Just out of curiosity, what would the total time to fill be if I already knew the capacity? 13ms \nSo, now, what if \n```csharp\nEntry\n```\n were a class? Would these times or metrics really differ that much?  \n\nCapacity:  312874\n  MemSize:  2660827 bytes\n  Completed Resize:  26ms\n  Total time to fill:  964ms\n\nObviously, the big difference is in resizing. Any difference if Dictionary is initialized with the Capacity? Not enough to be concerned with ... 12ms.  \nWhat happens is, because \n```csharp\nEntry\n```\n is a struct, it does not require initialization like a reference type. This is both the beauty and the bane of the value type. In order to use \n```csharp\nEntry\n```\n as a reference type, I had to insert the following code:\n\n```csharp\n/*\n *  Added to satisfy initialization of entry elements --\n *  this is where the extra time is spent resizing the Entry array\n * **/\nfor (int i = 0 ; i < prime ; i++)\n{\n    destinationArray[i] = new Entry( );\n}\n/*  *********************************************** */  \n\n```\n\nThe reason I had to initialize each array element of \n```csharp\nEntry\n```\n as a reference type can be found at MSDN: Structure Design. In short:\n\nDo not provide a default constructor for a structure.\nIf a structure defines a default constructor, when arrays of the\n  structure are created, the common language runtime automatically\n  executes the default constructor on each array element.\nSome compilers, such as the C# compiler, do not allow structures to\n  have default constructors.\n\nIt is actually quite simple and we will borrow from Asimov's Three Laws of Robotics:\n\nThe struct must be safe to use\nThe struct must perform its function efficiently, unless this would violate rule #1\nThe struct must remain intact during its use unless its destruction is required to satisfy rule #1  \n\n...what do we take away from this: in short, be responsible with the use of value types. They are quick and efficient, but have the ability to cause many unexpected behaviors if not properly maintained (i.e. unintentional copies).",
    "score": 690,
    "tags": [
      "c#",
      "struct"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:32.542242"
  },
  {
    "instruction": "Try-catch speeding up my code?",
    "context": "I wrote some code for testing the impact of try-catch, but seeing some surprising results.\n\n```csharp\nstatic void Main(string[] args)\n{\n    Thread.CurrentThread.Priority = ThreadPriority.Highest;\n    Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.RealTime;\n\n    long start = 0, stop = 0, elapsed = 0;\n    double avg = 0.0;\n\n    long temp = Fibo(1);\n\n    for (int i = 1; i < 100000000; i++)\n    {\n        start = Stopwatch.GetTimestamp();\n        temp = Fibo(100);\n        stop = Stopwatch.GetTimestamp();\n\n        elapsed = stop - start;\n        avg = avg + ((double)elapsed - avg) / i;\n    }\n\n    Console.WriteLine(\"Elapsed: \" + avg);\n    Console.ReadKey();\n}\n\nstatic long Fibo(int n)\n{\n    long n1 = 0, n2 = 1, fibo = 0;\n    n++;\n\n    for (int i = 1; i < n; i++)\n    {\n        n1 = n2;\n        n2 = fibo;\n        fibo = n1 + n2;\n    }\n\n    return fibo;\n}\n\n```\n\nOn my computer, this consistently prints out a value around 0.96..\nWhen I wrap the for loop inside Fibo() with a try-catch block like this:\n\n```csharp\nstatic long Fibo(int n)\n{\n    long n1 = 0, n2 = 1, fibo = 0;\n    n++;\n\n    try\n    {\n        for (int i = 1; i < n; i++)\n        {\n            n1 = n2;\n            n2 = fibo;\n            fibo = n1 + n2;\n        }\n    }\n    catch {}\n\n    return fibo;\n}\n\n```\n\nNow it consistently prints out 0.69... -- it actually runs faster! But why?\nNote: I compiled this using the Release configuration and directly ran the EXE file (outside Visual Studio).\nEDIT: Jon Skeet's excellent analysis shows that try-catch is somehow causing the x86 CLR to use the CPU registers in a more favorable way in this specific case (and I think we're yet to understand why). I confirmed Jon's finding that x64 CLR doesn't have this difference, and that it was faster than the x86 CLR. I also tested using \n```csharp\nint\n```\n types inside the Fibo method instead of \n```csharp\nlong\n```\n types, and then the x86 CLR was as equally fast as the x64 CLR.\n\nUPDATE: It looks like this issue has been fixed by Roslyn. Same machine, same CLR version -- the issue remains as above when compiled with VS 2013, but the problem goes away when compiled with VS 2015.",
    "output": "One of the Roslyn engineers who specializes in understanding optimization of stack usage took a look at this and reports to me that there seems to be a problem in the interaction between the way the C# compiler generates local variable stores and the way the JIT compiler does register scheduling in the corresponding x86 code. The result is suboptimal code generation on the loads and stores of the locals.\nFor some reason unclear to all of us, the problematic code generation path is avoided when the JITter knows that the block is in a try-protected region. \nThis is pretty weird. We'll follow up with the JITter team and see whether we can get a bug entered so that they can fix this. \nAlso, we are working on improvements for Roslyn to the C# and VB compilers' algorithms for determining when locals can be made \"ephemeral\" -- that is, just pushed and popped on the stack, rather than allocated a specific location on the stack for the duration of the activation. We believe that the JITter will be able to do a better job of register allocation and whatnot if we give it better hints about when locals can be made \"dead\" earlier.\nThanks for bringing this to our attention, and apologies for the odd behaviour.",
    "score": 1142,
    "tags": [
      "c#",
      ".net",
      "clr",
      "try-catch",
      "performance-testing"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:32.853716"
  },
  {
    "instruction": "'Static readonly' vs. 'const'",
    "context": "I've read around about \n```csharp\nconst\n```\n and \n```csharp\nstatic readonly\n```\n fields. We have some classes which contain only constant values. They are used for various things around in our system. So I am wondering if my observation is correct:\nShould these kind of constant values always be \n```csharp\nstatic readonly\n```\n for everything that is public? And only use \n```csharp\nconst\n```\n for \n```csharp\ninternal\n```\n/\n```csharp\nprotected\n```\n/\n```csharp\nprivate\n```\n values?\nWhat do you recommend? Should I maybe even not use \n```csharp\nstatic readonly\n```\n fields, but rather use properties maybe?",
    "output": "```csharp\npublic static readonly\n```\n fields are a little unusual; \n```csharp\npublic static\n```\n properties (with only a \n```csharp\nget\n```\n) would be more common (perhaps backed by a \n```csharp\nprivate static readonly\n```\n field).\n\n```csharp\nconst\n```\n values are burned directly into the call-site; this is double edged:\n\nit is useless if the value is fetched at runtime, perhaps from config\nif you change the value of a const, you need to rebuild all the clients\nbut it can be faster, as it avoids a method call...\n...which might sometimes have been inlined by the JIT anyway\n\nIf the value will never change, then const is fine - \n```csharp\nZero\n```\n etc make reasonable consts ;p Other than that, \n```csharp\nstatic\n```\n properties are more common.",
    "score": 1089,
    "tags": [
      "c#",
      "constants"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:33.124456"
  },
  {
    "instruction": "How do I update the GUI from another thread?",
    "context": "Which is the simplest way to update a \n```csharp\nLabel\n```\n from another \n```csharp\nThread\n```\n?\n\nI have a \n```csharp\nForm\n```\n running on \n```csharp\nthread1\n```\n, and from that I'm starting another thread (\n```csharp\nthread2\n```\n). \nWhile \n```csharp\nthread2\n```\n is processing some files I would like to update a \n```csharp\nLabel\n```\n on the \n```csharp\nForm\n```\n with the current status of \n```csharp\nthread2\n```\n's work.\n\nHow could I do that?",
    "output": "The simplest way is an anonymous method passed into \n```csharp\nLabel.Invoke\n```\n:\n\n```csharp\n// Running on the worker thread\nstring newText = \"abc\";\nform.Label.Invoke((MethodInvoker)delegate {\n    // Running on the UI thread\n    form.Label.Text = newText;\n});\n// Back on the worker thread\n\n```\n\nNotice that \n```csharp\nInvoke\n```\n blocks execution until it completes--this is synchronous code. The question doesn't ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.",
    "score": 1230,
    "tags": [
      "c#",
      ".net",
      "multithreading",
      "winforms",
      "user-interface"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:33.401290"
  },
  {
    "instruction": "What is the difference between a field and a property?",
    "context": "In C#, what makes a field different from a property, and when should a field be used instead of a property?",
    "output": "Properties expose fields.  Fields should (almost always) be kept private to a class and accessed via get and set properties.  Properties provide a level of abstraction allowing you to change the fields while not affecting the external way they are accessed by the things that use your class.\n\n```csharp\npublic class MyClass\n{\n    // this is a field.  It is private to your class and stores the actual data.\n    private string _myField;\n\n    // this is a property. When accessed it uses the underlying field,\n    // but only exposes the contract, which will not be affected by the underlying field\n    public string MyProperty\n    {\n        get\n        {\n            return _myField;\n        }\n        set\n        {\n            _myField = value;\n        }\n    }\n\n    // This is an AutoProperty (C# 3.0 and higher) - which is a shorthand syntax\n    // used to generate a private field for you\n    public int AnotherProperty { get; set; } \n}\n\n```\n\n@Kent points out that Properties are not required to encapsulate fields, they could do a calculation on other fields, or serve other purposes.\n@GSS points out that you can also do other logic, such as validation, when a property is accessed, another useful feature.",
    "score": 1378,
    "tags": [
      "c#",
      "oop",
      "properties",
      "field"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:33.693336"
  },
  {
    "instruction": "Why is Dictionary preferred over Hashtable in C#?",
    "context": "In most programming languages, dictionaries are preferred over hashtables.\nWhat are the reasons behind that?",
    "output": "For what it's worth, a Dictionary is (conceptually) a hash table.\nIf you meant \"why do we use the \n```csharp\nDictionary<TKey, TValue>\n```\n class instead of the \n```csharp\nHashtable\n```\n class?\", then it's an easy answer: \n```csharp\nDictionary<TKey, TValue>\n```\n is a generic type, \n```csharp\nHashtable\n```\n is not. That means you get type safety with \n```csharp\nDictionary<TKey, TValue>\n```\n, because you can't insert any random object into it, and you don't have to cast the values you take out.\nInterestingly, the \n```csharp\nDictionary<TKey, TValue>\n```\n implementation in the .NET Framework is based on the \n```csharp\nHashtable\n```\n, as you can tell from this comment in its source code:\n\nThe generic Dictionary was copied from Hashtable's source\n\nSource",
    "score": 1732,
    "tags": [
      "c#",
      ".net",
      "vb.net",
      "data-structures"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:33.952657"
  },
  {
    "instruction": "Path.Combine for URLs?",
    "context": "Path.Combine is handy, but is there a similar function in the .NET framework for URLs?\nI'm looking for syntax like this:\n\n```csharp\nUrl.Combine(\"http://MyUrl.com/\", \"/Images/Image.jpg\")\n\n```\n\nwhich would return:\n\n```csharp\n\"http://MyUrl.com/Images/Image.jpg\"\n```",
    "output": "```csharp\nUri\n```\n has a constructor that should do this for you: \n```csharp\nnew Uri(Uri baseUri, string relativeUri)\n```\n\nHere's an example:\n\n```csharp\nUri baseUri = new Uri(\"http://www.contoso.com\");\nUri myUri = new Uri(baseUri, \"catalog/shownew.htm\");\n\n```\n\nNote from editor: Beware, this method does not work as expected. It can cut part of baseUri in some cases. See comments and other answers.",
    "score": 1355,
    "tags": [
      "c#",
      ".net",
      "url"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:34.237401"
  },
  {
    "instruction": "LINQ's Distinct() on a particular property",
    "context": "I am playing with LINQ to learn about it, but I can't figure out how to use \n```csharp\nDistinct\n```\n when I do not have a simple list (a simple list of integers is pretty easy to do, this is not the question). What I if want to use \n```csharp\nDistinct\n```\n on a \n```csharp\nList<TElement>\n```\n on one or more properties of the \n```csharp\nTElement\n```\n?\nExample: If an object is \n```csharp\nPerson\n```\n, with property \n```csharp\nId\n```\n. How can I get all \n```csharp\nPerson\n```\n and use \n```csharp\nDistinct\n```\n on them with the property \n```csharp\nId\n```\n of the object?\n\n```csharp\nPerson1: Id=1, Name=\"Test1\"\nPerson2: Id=1, Name=\"Test1\"\nPerson3: Id=2, Name=\"Test2\"\n\n```\n\nHow can I get just \n```csharp\nPerson1\n```\n and \n```csharp\nPerson3\n```\n? Is that possible?\nIf it's not possible with LINQ, what would be the best way to have a list of \n```csharp\nPerson\n```\n depending on some of its properties?",
    "output": "What if I want to obtain a distinct list based on one or more properties?\n\nSimple! You want to group them and pick a winner out of the group.\n\n```csharp\nList<Person> distinctPeople = allPeople\n  .GroupBy(p => p.PersonId)\n  .Select(g => g.First())\n  .ToList();\n\n```\n\nIf you want to define groups on multiple properties, here's how:\n\n```csharp\nList<Person> distinctPeople = allPeople\n  .GroupBy(p => new {p.PersonId, p.FavoriteColor} )\n  .Select(g => g.First())\n  .ToList();\n\n```\n\nNote: Certain query providers are unable to resolve that each group must have at least one element, and that First is the appropriate method to call in that situation. If you find yourself working with such a query provider, FirstOrDefault may help get your query through the query provider.\nNote2: Consider this answer for an EF Core (prior to EF Core 6) compatible approach. https://stackoverflow.com/a/66529949/8155",
    "score": 2458,
    "tags": [
      "c#",
      "linq",
      "duplicates",
      "unique",
      "distinct"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:34.513666"
  },
  {
    "instruction": "Virtual member call in a constructor",
    "context": "I'm getting a warning from ReSharper about a call to a virtual member from my objects constructor. \nWhy would this be something not to do?",
    "output": "When an object written in C# is constructed, what happens is that the initializers run in order from the most derived class to the base class, and then constructors run in order from the base class to the most derived class (see Eric Lippert's blog for details as to why this is).\nAlso in .NET objects do not change type as they are constructed, but start out as the most derived type, with the method table being for the most derived type. This means that virtual method calls always run on the most derived type.\nWhen you combine these two facts you are left with the problem that if you make a virtual method call in a constructor, and it is not the most derived type in its inheritance hierarchy, that it will be called on a class whose constructor has not been run, and therefore may not be in a suitable state to have that method called. \nThis problem is, of course, mitigated if you mark your class as sealed to ensure that it is the most derived type in the inheritance hierarchy - in which case it is perfectly safe to call the virtual method.",
    "score": 1298,
    "tags": [
      "c#",
      "constructor",
      "warnings",
      "resharper",
      "virtual-functions"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:34.798305"
  },
  {
    "instruction": "Send HTTP POST request in .NET",
    "context": "How can I make an HTTP POST request and send data in the body?",
    "output": "There are several ways to perform HTTP GET and POST requests:\n\nMethod A: HttpClient (Preferred)\nAvailable in: .NET Framework 4.5+, .NET Standard 1.1+, and .NET Core 1.0+.\nIt is currently the preferred approach, and is asynchronous and high performance. Use the built-in version in most cases, but for very old platforms there is a NuGet package.\n\n```csharp\nusing System.Net.Http;\n\n```\n\nSetup\nIt is recommended to instantiate one \n```csharp\nHttpClient\n```\n for your application's lifetime and share it unless you have a specific reason not to.\n\n```csharp\nprivate static readonly HttpClient client = new HttpClient();\n\n```\n\nSee \n```csharp\nHttpClientFactory\n```\n for a dependency injection solution.\n\n\nPOST\n\n```csharp\n  var values = new Dictionary<string, string>\n  {\n      { \"thing1\", \"hello\" },\n      { \"thing2\", \"world\" }\n  };\n\n  var content = new FormUrlEncodedContent(values);\n\n  var response = await client.PostAsync(\"http://www.example.com/recepticle.aspx\", content);\n\n  var responseString = await response.Content.ReadAsStringAsync();\n\n```\n\n\nGET\n\n```csharp\n  var responseString = await client.GetStringAsync(\"http://www.example.com/recepticle.aspx\");\n\n```\n\n\n\n\nMethod B: Third-Party Libraries\nRestSharp\n\nPOST\n\n```csharp\n   var client = new RestClient(\"http://example.com\");\n   // client.Authenticator = new HttpBasicAuthenticator(username, password);\n   var request = new RestRequest(\"resource/{id}\");\n   request.AddParameter(\"thing1\", \"Hello\");\n   request.AddParameter(\"thing2\", \"world\");\n   request.AddHeader(\"header\", \"value\");\n   request.AddFile(\"file\", path);\n   var response = client.Post(request);\n   var content = response.Content; // Raw content as string\n   var response2 = client.Post<Person>(request);\n   var name = response2.Data.Name;\n\n```\n\n\n\nFlurl.Http\nIt is a newer library sporting a fluent API, testing helpers, uses HttpClient under the hood, and is portable. It is available via NuGet.\n\n```csharp\n    using Flurl.Http;\n\n```\n\n\n\nPOST\n\n```csharp\n  var responseString = await \"http://www.example.com/recepticle.aspx\"\n      .PostUrlEncodedAsync(new { thing1 = \"hello\", thing2 = \"world\" })\n      .ReceiveString();\n\n```\n\n\n\n```csharp\nGET\n```\n\n\n```csharp\n  var responseString = await \"http://www.example.com/recepticle.aspx\"\n      .GetStringAsync();\n\n```\n\n\n\n\nMethod C: HttpWebRequest (not recommended for new work)\nAvailable in: .NET Framework 1.1+, .NET Standard 2.0+, .NET Core 1.0+. In .NET Core, it is mostly for compatibility -- it wraps \n```csharp\nHttpClient\n```\n, is less performant, and won't get new features.\n\n```csharp\nusing System.Net;\nusing System.Text;  // For class Encoding\nusing System.IO;    // For StreamReader\n\n```\n\n\n\nPOST\n\n```csharp\n  var request = (HttpWebRequest)WebRequest.Create(\"http://www.example.com/recepticle.aspx\");\n\n  var postData = \"thing1=\" + Uri.EscapeDataString(\"hello\");\n      postData += \"&thing2=\" + Uri.EscapeDataString(\"world\");\n  var data = Encoding.ASCII.GetBytes(postData);\n\n  request.Method = \"POST\";\n  request.ContentType = \"application/x-www-form-urlencoded\";\n  request.ContentLength = data.Length;\n\n  using (var stream = request.GetRequestStream())\n  {\n      stream.Write(data, 0, data.Length);\n  }\n\n  var response = (HttpWebResponse)request.GetResponse();\n\n  var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n```\n\n\nGET\n\n```csharp\n  var request = (HttpWebRequest)WebRequest.Create(\"http://www.example.com/recepticle.aspx\");\n\n  var response = (HttpWebResponse)request.GetResponse();\n\n  var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n```\n\n\n\n\nMethod D: WebClient (Not recommended for new work)\nThis is a wrapper around \n```csharp\nHttpWebRequest\n```\n. Compare with \n```csharp\nHttpClient\n```\n.\nAvailable in: .NET Framework 1.1+, NET Standard 2.0+, and .NET Core 2.0+.\nIn some circumstances (.NET Framework 4.5-4.8), if you need to do a HTTP request synchronously, \n```csharp\nWebClient\n```\n can still be used.\n\n```csharp\nusing System.Net;\nusing System.Collections.Specialized;\n\n```\n\n\n\nPOST\n\n```csharp\n  using (var client = new WebClient())\n  {\n      var values = new NameValueCollection();\n      values[\"thing1\"] = \"hello\";\n      values[\"thing2\"] = \"world\";\n\n      var response = client.UploadValues(\"http://www.example.com/recepticle.aspx\", values);\n\n      var responseString = Encoding.Default.GetString(response);\n  }\n\n```\n\n\nGET\n\n```csharp\n  using (var client = new WebClient())\n  {\n      var responseString = client.DownloadString(\"http://www.example.com/recepticle.aspx\");\n  }\n\n```",
    "score": 2729,
    "tags": [
      "c#",
      ".net",
      "post",
      "httpwebrequest",
      "httprequest"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:35.078768"
  },
  {
    "instruction": "How to calculate difference between two dates (number of days)?",
    "context": "How can one calculate the number of days between two dates in C#?",
    "output": "Assuming \n```csharp\nStartDate\n```\n and \n```csharp\nEndDate\n```\n are of type \n```csharp\nDateTime\n```\n:\n\n```csharp\n(EndDate - StartDate).TotalDays\n\n```",
    "score": 2649,
    "tags": [
      "c#",
      "date"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:35.357982"
  },
  {
    "instruction": "Hidden Features of C#?",
    "context": "This came to my mind after I learned the following from this question:\n\n```csharp\nwhere T : struct\n\n```\n\nWe, C# developers, all know the basics of C#. I mean declarations, conditionals, loops, operators, etc.\nSome of us even mastered the stuff like Generics, anonymous types, lambdas, LINQ, ...\nBut what are the most hidden features or tricks of C# that even C# fans, addicts, experts barely know?\nHere are the revealed features so far:\n\nKeywords\n\n\n```csharp\nyield\n```\n by Michael Stum\n\n```csharp\nvar\n```\n by Michael Stum\n\n```csharp\nusing()\n```\n statement by kokos\n\n```csharp\nreadonly\n```\n by kokos\n\n```csharp\nas\n```\n by Mike Stone\n\n```csharp\nas\n```\n / \n```csharp\nis\n```\n by Ed Swangren\n\n```csharp\nas\n```\n / \n```csharp\nis\n```\n (improved) by Rocketpants\n\n```csharp\ndefault\n```\n by deathofrats\n\n```csharp\nglobal::\n```\n by pzycoman\n\n```csharp\nusing()\n```\n blocks by AlexCuse\n\n```csharp\nvolatile\n```\n by Jakub Šturc\n\n```csharp\nextern alias\n```\n by Jakub Šturc\n\nAttributes\n\n\n```csharp\nDefaultValueAttribute\n```\n by Michael Stum\n\n```csharp\nObsoleteAttribute\n```\n by DannySmurf\n\n```csharp\nDebuggerDisplayAttribute\n```\n by Stu\n\n```csharp\nDebuggerBrowsable\n```\n and \n```csharp\nDebuggerStepThrough\n```\n by bdukes\n\n```csharp\nThreadStaticAttribute\n```\n by marxidad\n\n```csharp\nFlagsAttribute\n```\n by Martin Clarke\n\n```csharp\nConditionalAttribute\n```\n by AndrewBurns\n\nSyntax\n\n\n```csharp\n??\n```\n (coalesce nulls) operator by kokos\nNumber flaggings by Nick Berardi\n\n```csharp\nwhere T:new\n```\n by Lars Mæhlum\nImplicit generics by Keith\nOne-parameter lambdas by Keith\nAuto properties by Keith\nNamespace aliases by Keith\nVerbatim string literals with @ by Patrick\n\n```csharp\nenum\n```\n values by lfoust\n@variablenames by marxidad\n\n```csharp\nevent\n```\n operators by marxidad\nFormat string brackets by Portman\nProperty accessor accessibility modifiers by xanadont\nConditional (ternary) operator (\n```csharp\n?:\n```\n) by JasonS\n\n```csharp\nchecked\n```\n and \n```csharp\nunchecked\n```\n operators by Binoj Antony\n\n```csharp\nimplicit and explicit\n```\n operators by Flory\n\nLanguage Features\n\nNullable types by Brad Barker\nAnonymous types by Keith\n\n```csharp\n__makeref __reftype __refvalue\n```\n by Judah Himango\nObject initializers by lomaxx\nFormat strings by David in Dakota\nExtension Methods by marxidad\n\n```csharp\npartial\n```\n methods by Jon Erickson\nPreprocessor directives by John Asbeck\n\n```csharp\nDEBUG\n```\n pre-processor directive by Robert Durgin\nOperator overloading by SefBkn\nType inferrence by chakrit\nBoolean operators taken to next level by Rob Gough\nPass value-type variable as interface without boxing by Roman Boiko\nProgrammatically determine declared variable type by Roman Boiko\nStatic Constructors by Chris\nEasier-on-the-eyes / condensed ORM-mapping using LINQ by roosteronacid\n\n```csharp\n__arglist\n```\n by Zac Bowling\n\nVisual Studio Features\n\nSelect block of text in editor by Himadri\nSnippets by DannySmurf \n\nFramework\n\n\n```csharp\nTransactionScope\n```\n by KiwiBastard\n\n```csharp\nDependantTransaction\n```\n by KiwiBastard\n\n```csharp\nNullable<T>\n```\n by IainMH\n\n```csharp\nMutex\n```\n by Diago\n\n```csharp\nSystem.IO.Path\n```\n by ageektrapped\n\n```csharp\nWeakReference\n```\n by Juan Manuel\n\nMethods and Properties\n\n\n```csharp\nString.IsNullOrEmpty()\n```\n method by KiwiBastard\n\n```csharp\nList.ForEach()\n```\n method by KiwiBastard\n\n```csharp\nBeginInvoke()\n```\n, \n```csharp\nEndInvoke()\n```\n methods by Will Dean\n\n```csharp\nNullable<T>.HasValue\n```\n and \n```csharp\nNullable<T>.Value\n```\n properties by Rismo\n\n```csharp\nGetValueOrDefault\n```\n method by John Sheehan\n\nTips & Tricks\n\nNice method for event handlers by Andreas H.R. Nilsson\nUppercase comparisons by John\nAccess anonymous types without reflection by dp\nA quick way to lazily instantiate collection properties by Will\nJavaScript-like anonymous inline-functions by roosteronacid\n\nOther\n\nnetmodules by kokos \nLINQBridge by Duncan Smart \nParallel Extensions by Joel Coehoorn",
    "output": "This isn't C# per se, but I haven't seen anyone who really uses \n```csharp\nSystem.IO.Path.Combine()\n```\n to the extent that they should. In fact, the whole Path class is really useful, but no one uses it!\nI'm willing to bet that every production app has the following code, even though it shouldn't:\n\n```csharp\nstring path = dir + \"\\\\\" + fileName;\n\n```",
    "score": 751,
    "tags": [
      "c#",
      "hidden-features"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:35.640663"
  },
  {
    "instruction": "JavaScriptSerializer - JSON serialization of enum as string",
    "context": "I have a class that contains an \n```csharp\nenum\n```\n property, and upon serializing the object using \n```csharp\nJavaScriptSerializer\n```\n, my json result contains the integer value of the enumeration rather than its \n```csharp\nstring\n```\n \"name\".  Is there a way to get the enum as a \n```csharp\nstring\n```\n in my json without having to create a custom \n```csharp\nJavaScriptConverter\n```\n?  Perhaps there's an attribute that I could decorate the \n```csharp\nenum\n```\n definition, or object property, with?\nAs an example:\n\n```csharp\nenum Gender { Male, Female }\n\nclass Person\n{\n    int Age { get; set; }\n    Gender Gender { get; set; }\n}\n\n```\n\nDesired JSON result:\n\n```csharp\n{ \"Age\": 35, \"Gender\": \"Male\" }\n\n```\n\nIdeally looking for answer with built-in .NET framework classes, if not possible alternatives (like Json.net) are welcome.",
    "output": "I have found that Json.NET provides the exact functionality I'm looking for with a \n```csharp\nJsonConverter\n```\n attribute, passing in the built-in \n```csharp\nStringEnumConverter\n```\n type:\n\n```csharp\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\n\n[JsonConverter(typeof(StringEnumConverter))]\npublic Gender Gender { get; set; }\n\n```\n\nMore details at available on \n```csharp\nStringEnumConverter\n```\n documentation.\nThere are other places to configure this converter more globally:\n\nenum itself if you want enum always be serialized/deserialized as string:\n\n```csharp\n  [JsonConverter(typeof(StringEnumConverter))]  \n  enum Gender { Male, Female }\n\n```\n\n\nIn case anyone wants to avoid attribute decoration, you can add the converter to your JsonSerializer (suggested by Bjørn Egil):\n\n```csharp\n  serializer.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter()); \n\n```\n\n\n\nand it will work for every enum it sees during that serialization (suggested by Travis).\n\nor JsonConverter (suggested by banana):\n\n```csharp\n  JsonConvert.SerializeObject(MyObject, \n      new Newtonsoft.Json.Converters.StringEnumConverter());\n\n```\n\n\n\nAdditionally you can control casing and whether numbers are still accepted by using StringEnumConverter(NamingStrategy, Boolean) constructor.",
    "score": 2466,
    "tags": [
      "c#",
      "asp.net",
      "json",
      "enums",
      "javascriptserializer"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:35.954759"
  },
  {
    "instruction": "Create Generic method constraining T to an Enum",
    "context": "I'm building a function to extend the \n```csharp\nEnum.Parse\n```\n concept that\n\nAllows a default value to be parsed in case that an Enum value is not found\nIs case insensitive\n\nSo I wrote the following:\n\n```csharp\npublic static T GetEnumFromString<T>(string value, T defaultValue) where T : Enum\n{\n    if (string.IsNullOrEmpty(value)) return defaultValue;\n    foreach (T item in Enum.GetValues(typeof(T)))\n    {\n        if (item.ToString().ToLower().Equals(value.Trim().ToLower())) return item;\n    }\n    return defaultValue;\n}\n\n```\n\nI am getting a Error Constraint cannot be special class \n```csharp\nSystem.Enum\n```\n.\nFair enough, but is there a workaround to allow a Generic Enum, or am I going to have to mimic the \n```csharp\nParse\n```\n function and pass a type as an attribute, which forces the ugly boxing requirement to your code.\nEdit 1\nI have settled on (I've left the loop to maintain case insensitivity - I am using this when parsing XML)\n\n```csharp\npublic static class EnumUtils\n{\n    public static T ParseEnum<T>(string value, T defaultValue) where T : struct, IConvertible\n    {\n        if (!typeof(T).IsEnum) throw new ArgumentException(\"T must be an enumerated type\");\n        if (string.IsNullOrEmpty(value)) return defaultValue;\n\n        foreach (T item in Enum.GetValues(typeof(T)))\n        {\n            if (item.ToString().ToLower().Equals(value.Trim().ToLower())) return item;\n        }\n        return defaultValue;\n    }\n}\n\n```\n\nEdit 2: (16th Feb 2015) Christopher Currens has posted a compiler enforced type-safe generic solution in MSIL or F# below, which is well worth a look, and an upvote. I will remove this edit if the solution bubbles further up the page.\nEdit 3: (13th Apr 2021) As this has now been addressed, and supported, since C# 7.3, I have changed the accepted answer, though full perusal of the top answers is worth it for academic, and historical, interest :)",
    "output": "Since \n```csharp\nEnum\n```\n Type implements \n```csharp\nIConvertible\n```\n interface, a better implementation should be something like this:\n\n```csharp\npublic T GetEnumFromString<T>(string value) where T : struct, IConvertible\n{\n   if (!typeof(T).IsEnum) \n   {\n      throw new ArgumentException(\"T must be an enumerated type\");\n   }\n\n   //...\n}\n\n```\n\nThis will still permit passing of value types implementing \n```csharp\nIConvertible\n```\n. The chances are rare though.",
    "score": 1110,
    "tags": [
      "c#",
      "generics",
      "enums",
      "generic-constraints"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:36.232872"
  },
  {
    "instruction": "Multiline string literal in C#",
    "context": "Is there an easy way to create a multiline string literal in C#?\nHere's what I have now:\n\n```csharp\nstring query = \"SELECT foo, bar\"\n+ \" FROM table\"\n+ \" WHERE id = 42\";\n\n```\n\nI know PHP has\n\n```csharp\n<<<BLOCK\n\nBLOCK;\n\n```\n\nDoes C# have something similar?",
    "output": "You can use the \n```csharp\n@\n```\n symbol in front of a \n```csharp\nstring\n```\n to form a verbatim string literal:\n\n```csharp\nstring query = @\"SELECT foo, bar\nFROM table\nWHERE id = 42\";\n\n```\n\nYou also do not have to escape special characters when you use this method, except for double quotes as shown in Jon Skeet's answer.",
    "score": 2158,
    "tags": [
      "c#",
      "string",
      "shorthand"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:36.507219"
  },
  {
    "instruction": "How to call asynchronous method from synchronous method in C#?",
    "context": "I have a \n```csharp\npublic async Task Foo()\n```\n method that I want to call from a synchronous method. So far all I have seen from MSDN documentation is calling \n```csharp\nasync\n```\n methods via \n```csharp\nasync\n```\n methods, but my whole program is not built with \n```csharp\nasync\n```\n methods.\nIs this even possible?\nHere's one example of calling these methods from an asynchronous method:\nWalkthrough: Accessing the Web by Using Async and Await (C# and Visual Basic)\nNow I'm looking into calling these \n```csharp\nasync\n```\n methods from synchronous methods.",
    "output": "Asynchronous programming does \"grow\" through the code base. It has been compared to a zombie virus. The best solution is to allow it to grow, but sometimes that's not possible.\nI have written a few types in my Nito.AsyncEx library for dealing with a partially-asynchronous code base. There's no solution that works in every situation, though.\nSolution A\nIf you have a simple asynchronous method that doesn't need to synchronize back to its context, then you can use \n```csharp\nTask.WaitAndUnwrapException\n```\n:\n\n```csharp\nvar task = MyAsyncMethod();\nvar result = task.WaitAndUnwrapException();\n\n```\n\nYou do not want to use \n```csharp\nTask.Wait\n```\n or \n```csharp\nTask.Result\n```\n because they wrap exceptions in \n```csharp\nAggregateException\n```\n.\nThis solution is only appropriate if \n```csharp\nMyAsyncMethod\n```\n does not synchronize back to its context. In other words, every \n```csharp\nawait\n```\n in \n```csharp\nMyAsyncMethod\n```\n should end with \n```csharp\nConfigureAwait(false)\n```\n. This means it can't update any UI elements or access the ASP.NET request context.\nSolution B\nIf \n```csharp\nMyAsyncMethod\n```\n does need to synchronize back to its context, then you may be able to use \n```csharp\nAsyncContext.RunTask\n```\n to provide a nested context:\n\n```csharp\nvar result = AsyncContext.RunTask(MyAsyncMethod).Result;\n\n```\n\n\n*Update 4/14/2014: In more recent versions of the library the API is as follows:\n\n```csharp\nvar result = AsyncContext.Run(MyAsyncMethod);\n\n```\n\n\n(It's OK to use \n```csharp\nTask.Result\n```\n in this example because \n```csharp\nRunTask\n```\n will propagate \n```csharp\nTask\n```\n exceptions).\nThe reason you may need \n```csharp\nAsyncContext.RunTask\n```\n instead of \n```csharp\nTask.WaitAndUnwrapException\n```\n is because of a rather subtle deadlock possibility that happens on WinForms/WPF/SL/ASP.NET:\n\nA synchronous method calls an async method, obtaining a \n```csharp\nTask\n```\n.\nThe synchronous method does a blocking wait on the \n```csharp\nTask\n```\n.\nThe \n```csharp\nasync\n```\n method uses \n```csharp\nawait\n```\n without \n```csharp\nConfigureAwait\n```\n.\nThe \n```csharp\nTask\n```\n cannot complete in this situation because it only completes when the \n```csharp\nasync\n```\n method is finished; the \n```csharp\nasync\n```\n method cannot complete because it is attempting to schedule its continuation to the \n```csharp\nSynchronizationContext\n```\n, and WinForms/WPF/SL/ASP.NET will not allow the continuation to run because the synchronous method is already running in that context.\n\nThis is one reason why it's a good idea to use \n```csharp\nConfigureAwait(false)\n```\n within every \n```csharp\nasync\n```\n method as much as possible.\nSolution C\n\n```csharp\nAsyncContext.RunTask\n```\n won't work in every scenario. For example, if the \n```csharp\nasync\n```\n method awaits something that requires a UI event to complete, then you'll deadlock even with the nested context. In that case, you could start the \n```csharp\nasync\n```\n method on the thread pool:\n\n```csharp\nvar task = Task.Run(async () => await MyAsyncMethod());\nvar result = task.WaitAndUnwrapException();\n\n```\n\nHowever, this solution requires a \n```csharp\nMyAsyncMethod\n```\n that will work in the thread pool context. So it can't update UI elements or access the ASP.NET request context. And in that case, you may as well add \n```csharp\nConfigureAwait(false)\n```\n to its \n```csharp\nawait\n```\n statements, and use solution A.\nUpdate: 2015 MSDN article 'Async Programming - Brownfield Async Development' by Stephen Cleary.",
    "score": 1115,
    "tags": [
      "c#",
      "asynchronous",
      "async-await",
      "synchronous"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:36.778338"
  },
  {
    "instruction": "How and when to use ‘async’ and ‘await’",
    "context": "From my understanding one of the main things that \n```csharp\nasync\n```\n and \n```csharp\nawait\n```\n do is to make code easy to write and read - but is using them equal to spawning background threads to perform long duration logic?\nI'm currently trying out the most basic example. I've added some comments inline. Can you clarify it for me?\n\n```csharp\n// I don't understand why this method must be marked as `async`.\nprivate async void button1_Click(object sender, EventArgs e)\n{\n    Task<int> access = DoSomethingAsync();\n    // task independent stuff here\n\n    // this line is reached after the 5 seconds sleep from \n    // DoSomethingAsync() method. Shouldn't it be reached immediately? \n    int a = 1; \n\n    // from my understanding the waiting should be done here.\n    int x = await access; \n}\n\nasync Task<int> DoSomethingAsync()\n{\n    // is this executed on a background thread?\n    System.Threading.Thread.Sleep(5000);\n    return 1;\n}\n\n```",
    "output": "When using \n```csharp\nasync\n```\n and \n```csharp\nawait\n```\n the compiler generates a state machine in the background.\nHere's an example on which I hope I can explain some of the high-level details that are going on:\n\n```csharp\npublic async Task MyMethodAsync()\n{\n    Task<int> longRunningTask = LongRunningOperationAsync();\n    // independent work which doesn't need the result of LongRunningOperationAsync can be done here\n\n    //and now we call await on the task \n    int result = await longRunningTask;\n    //use the result \n    Console.WriteLine(result);\n}\n\npublic async Task<int> LongRunningOperationAsync() // assume we return an int from this long running operation \n{\n    await Task.Delay(1000); // 1 second delay\n    return 1;\n}\n\n```\n\nOK, so what happens here:\n\n\n```csharp\nTask<int> longRunningTask = LongRunningOperationAsync();\n```\n starts executing \n```csharp\nLongRunningOperation\n```\n\n\nIndependent work is done on let's assume the Main Thread (Thread ID = 1) then \n```csharp\nawait longRunningTask\n```\n is reached.\nNow, if the \n```csharp\nlongRunningTask\n```\n hasn't finished and it is still running, \n```csharp\nMyMethodAsync()\n```\n will return to its calling method, thus the main thread doesn't get blocked. When the \n```csharp\nlongRunningTask\n```\n is done then a thread from the ThreadPool (can be any thread) will return to \n```csharp\nMyMethodAsync()\n```\n in its previous context and continue execution (in this case printing the result to the console).\n\n\nA second case would be that the \n```csharp\nlongRunningTask\n```\n has already finished its execution and the result is available. When reaching the \n```csharp\nawait longRunningTask\n```\n we already have the result so the code will continue executing on the very same thread. (in this case printing result to console). Of course this is not the case for the above example, where there's a \n```csharp\nTask.Delay(1000)\n```\n involved.",
    "score": 964,
    "tags": [
      "c#",
      ".net",
      "asynchronous",
      "async-await"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:37.076703"
  },
  {
    "instruction": "How do I encode and decode a base64 string?",
    "context": "How do I return a base64 encoded string given a string?\nHow do I decode a base64 encoded string into a string?",
    "output": "Encode\n\n```csharp\npublic static string Base64Encode(string plainText) \n{\n    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n    return System.Convert.ToBase64String(plainTextBytes);\n}\n\n```\n\nDecode\n\n```csharp\npublic static string Base64Decode(string base64EncodedData) \n{\n    var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);\n    return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);\n}\n\n```",
    "score": 2491,
    "tags": [
      "c#",
      "base64"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:37.366959"
  },
  {
    "instruction": "Difference Between Select and SelectMany",
    "context": "I've been searching the difference between \n```csharp\nSelect\n```\n and \n```csharp\nSelectMany\n```\n but I haven't been able to find a suitable answer. I need to learn the difference when using LINQ To SQL but all I've found are standard array examples. \nCan someone provide a LINQ To SQL example?",
    "output": "```csharp\nSelectMany\n```\n flattens queries that return lists of lists. For example\n\n```csharp\npublic class PhoneNumber\n{\n    public string Number { get; set; }\n}\n\npublic class Person\n{\n    public IEnumerable<PhoneNumber> PhoneNumbers { get; set; }\n    public string Name { get; set; }\n}\n\nIEnumerable<Person> people = new List<Person>();\n\n// Select gets a list of lists of phone numbers\nIEnumerable<IEnumerable<PhoneNumber>> phoneLists = people.Select(p => p.PhoneNumbers);\n\n// SelectMany flattens it to just a list of phone numbers.\nIEnumerable<PhoneNumber> phoneNumbers = people.SelectMany(p => p.PhoneNumbers);\n\n// And to include data from the parent in the result: \n// pass an expression to the second parameter (resultSelector) in the overload:\nvar directory = people\n   .SelectMany(p => p.PhoneNumbers,\n               (parent, child) => new { parent.Name, child.Number });\n\n```\n\nLive Demo on .NET Fiddle",
    "score": 1985,
    "tags": [
      "c#",
      "linq-to-sql",
      "linq"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:37.641056"
  },
  {
    "instruction": "Convert a string to an enum in C#",
    "context": "What's the best way to convert a string to an enumeration value in C#?\nI have an HTML select tag containing the values of an enumeration. When the page is posted, I want to pick up the value (which will be in the form of a string) and convert it to the corresponding enumeration value.\nIn an ideal world, I could do something like this:\n\n```csharp\nStatusEnum MyStatus = StatusEnum.Parse(\"Active\");\n\n```\n\nbut that isn't valid code.",
    "output": "In .NET Core and .NET Framework ≥4.0 there is a generic parse method:\n\n```csharp\nEnum.TryParse(\"Active\", out StatusEnum myStatus);\n\n```\n\nThis also includes C#7's new inline \n```csharp\nout\n```\n variables, so this does the try-parse, conversion to the explicit enum type and initialises+populates the \n```csharp\nmyStatus\n```\n variable.\nIf you have access to C#7 and the latest .NET this is the best way.\nOriginal Answer\nIn .NET it's rather ugly (until 4 or above):\n\n```csharp\nStatusEnum MyStatus = (StatusEnum) Enum.Parse(typeof(StatusEnum), \"Active\", true);\n\n```\n\nI tend to simplify this with:\n\n```csharp\npublic static T ParseEnum<T>(string value)\n{\n    return (T) Enum.Parse(typeof(T), value, true);\n}\n\n```\n\nThen I can do:\n\n```csharp\nStatusEnum MyStatus = EnumUtil.ParseEnum<StatusEnum>(\"Active\");\n\n```\n\nOne option suggested in the comments is to add an extension, which is simple enough:\n\n```csharp\npublic static T ToEnum<T>(this string value)\n{\n    return (T) Enum.Parse(typeof(T), value, true);\n}\n\nStatusEnum MyStatus = \"Active\".ToEnum<StatusEnum>();\n\n```\n\nFinally, you may want to have a default enum to use if the string cannot be parsed:\n\n```csharp\npublic static T ToEnum<T>(this string value, T defaultValue) \n{\n    if (string.IsNullOrEmpty(value))\n    {\n        return defaultValue;\n    }\n\n    T result;\n    return Enum.TryParse<T>(value, true, out result) ? result : defaultValue;\n}\n\n```\n\nWhich makes this the call:\n\n```csharp\nStatusEnum MyStatus = \"Active\".ToEnum(StatusEnum.None);\n\n```\n\nHowever, I would be careful adding an extension method like this to \n```csharp\nstring\n```\n as (without namespace control) it will appear on all instances of \n```csharp\nstring\n```\n whether they hold an enum or not (so \n```csharp\n1234.ToString().ToEnum(StatusEnum.None)\n```\n would be valid but nonsensical) . It's often be best to avoid cluttering Microsoft's core classes with extra methods that only apply in very specific contexts unless your entire development team has a very good understanding of what those extensions do.",
    "score": 2211,
    "tags": [
      "c#",
      "string",
      "enums"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:37.915759"
  },
  {
    "instruction": "Call one constructor from another",
    "context": "I have two constructors which feed values to readonly fields.\n\n```csharp\npublic class Sample\n{\n    public Sample(string theIntAsString)\n    {\n        int i = int.Parse(theIntAsString);\n        _intField = i;\n    }\n\n    public Sample(int theInt) => _intField = theInt;\n    public int IntProperty    => _intField;\n\n    private readonly int _intField;\n}\n\n```\n\nOne constructor receives the values directly, and the other does some calculation and obtains the values, then sets the fields.\nNow here's the catch:\n\nI don't want to duplicate the\nsetting code. In this case, just one\nfield is set but of course there may\nwell be more than one.\nTo make the fields readonly, I need\nto set them from the constructor, so\nI can't \"extract\" the shared code to\na utility function.\nI don't know how to call one\nconstructor from another.\n\nAny ideas?",
    "output": "Like this:\n\n```csharp\npublic Sample(string str) : this(int.Parse(str)) { }\n\n```",
    "score": 2140,
    "tags": [
      "c#",
      "constructor"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:38.167040"
  },
  {
    "instruction": "\\d less efficient than [0-9]",
    "context": "I made a comment yesterday on an answer where someone had used \n```csharp\n[0123456789]\n```\n in a regex rather than \n```csharp\n[0-9]\n```\n or \n```csharp\n\\d\n```\n. I said it was probably more efficient to use a range or digit specifier than a character set.\nI decided to test that out today and found out to my surprise that (in the c# regex engine at least) \n```csharp\n\\d\n```\n appears to be less efficient than either of the other two which don't seem to differ much. Here is my test output over 10000 random strings of 1000 random characters with 5077 actually containing a digit:\n\n```csharp\nRegex \\d           took 00:00:00.2141226 result: 5077/10000\nRegex [0-9]        took 00:00:00.1357972 result: 5077/10000  63.42 % of first\nRegex [0123456789] took 00:00:00.1388997 result: 5077/10000  64.87 % of first\n\n```\n\nIt's a surprise to me for two reasons, that I would be interested if anyone can shed some light on:\n\nI would have thought the range would be implemented much more efficiently than the set.\nI can't understand why \n```csharp\n\\d\n```\n is worse than \n```csharp\n[0-9]\n```\n. Is there more to \n```csharp\n\\d\n```\n than simply shorthand for \n```csharp\n[0-9]\n```\n?\n\nHere is the test code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace SO_RegexPerformance\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var rand = new Random(1234);\n            var strings = new List<string>();\n            //10K random strings\n            for (var i = 0; i < 10000; i++)\n            {\n                //generate random string\n                var sb = new StringBuilder();\n                for (var c = 0; c < 1000; c++)\n                {\n                    //add a-z randomly\n                    sb.Append((char)('a' + rand.Next(26)));\n                }\n                //in roughly 50% of them, put a digit\n                if (rand.Next(2) == 0)\n                {\n                    //replace 1 char with a digit 0-9\n                    sb[rand.Next(sb.Length)] = (char)('0' + rand.Next(10));\n                }\n                strings.Add(sb.ToString());\n            }\n\n            var baseTime = testPerfomance(strings, @\"\\d\");\n            Console.WriteLine();\n            var testTime = testPerfomance(strings, \"[0-9]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n            testTime = testPerfomance(strings, \"[0123456789]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n        }\n\n        private static TimeSpan testPerfomance(List<string> strings, string regex)\n        {\n            var sw = new Stopwatch();\n\n            int successes = 0;\n\n            var rex = new Regex(regex);\n\n            sw.Start();\n            foreach (var str in strings)\n            {\n                if (rex.Match(str).Success)\n                {\n                    successes++;\n                }\n            }\n            sw.Stop();\n\n            Console.Write(\"Regex {0,-12} took {1} result: {2}/{3}\", regex, sw.Elapsed, successes, strings.Count);\n\n            return sw.Elapsed;\n        }\n    }\n}\n\n```",
    "output": "```csharp\n\\d\n```\n checks all Unicode digits, while \n```csharp\n[0-9]\n```\n is limited to these 10 characters. For example, Persian digits, \n```csharp\n۱۲۳۴۵۶۷۸۹\n```\n, are an example of Unicode digits which are matched with \n```csharp\n\\d\n```\n, but not \n```csharp\n[0-9]\n```\n.\nYou can generate a list of all such characters using the following code:\n\n```csharp\nvar sb = new StringBuilder();\nfor(UInt16 i = 0; i < UInt16.MaxValue; i++)\n{\n    string str = Convert.ToChar(i).ToString();\n    if (Regex.IsMatch(str, @\"\\d\"))\n        sb.Append(str);\n}\nConsole.WriteLine(sb.ToString());\n\n```\n\nWhich generates:\n\n0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９",
    "score": 1675,
    "tags": [
      "c#",
      "regex",
      "performance"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:38.446967"
  },
  {
    "instruction": "Could not find a part of the path ... bin\\roslyn\\csc.exe",
    "context": "I am trying to run an ASP.NET MVC (model-view-controller) project retrieved from TFS (Team Foundation Server) source control. I have added all assembly references and I am able to build and compile successfully without any error or warning.\nBut I get the following error in the browser:\n\nCould not find a part of the path\n'C:\\B8akWorkspace\\B8akProject\\B8akSolution\\B8AK.Portal\\bin\\roslyn\\csc.exe'.\n\nHere is a full screenshot of the error page.\n\nAfter few days of research, I understood that Roslyn is a .NET compiler platform that offers advanced compiling features. However, I do not understand why my build is trying to find \\bin\\roslyn\\csc.exe because I did not configure anything related to Roslyn. Nor did I intend to use Roslyn in my project.",
    "output": "TL; DR\nrun this in the Package Manager Console:\n\n```csharp\nUpdate-Package Microsoft.CodeDom.Providers.DotNetCompilerPlatform -r\n```\n\nMore information\nThis problem is not related to Visual Studio itself, so answers suggesting adding build steps to copy files over are rather a workaround. Same with adding compiler binaries manually to the project.\nThe Roslyn compiler comes from a NuGet package and there is/was a bug in some versions of that package (I don't know exactly which ones). The solution is to reinstall/upgrade that package to a bug-free version. Originally before I wrote the answer back in 2015 I fixed it by installing following packages at specific versions:\n\nMicrosoft.Net.Compilers 1.1.1\nMicrosoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.1\n\nThen I looked into .csproj and made sure that the paths to packages are correct (in my case ..\\..\\packages\\*.*) inside tags \n```csharp\n<ImportProject>\n```\n on top and in \n```csharp\n<Target>\n```\n with name \"EnsureNuGetPackageBuildImports\" on the bottom. This is on MVC 5 and .NET Framework 4.5.2.",
    "score": 2013,
    "tags": [
      "c#",
      "asp.net",
      ".net",
      "visual-studio",
      "roslyn"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:38.702454"
  },
  {
    "instruction": "How do you get the index of the current iteration of a foreach loop?",
    "context": "Is there some rare language construct I haven't encountered (like the few I've learned recently, some on Stack Overflow) in C# to get a value representing the current iteration of a foreach loop?\nFor instance, I currently do something like this depending on the circumstances:\n\n```csharp\nint i = 0;\nforeach (Object o in collection)\n{\n    // ...\n    i++;\n}\n\n```",
    "output": "Ian Mercer posted a similar solution as this on Phil Haack's blog:\n\n```csharp\nforeach (var item in Model.Select((value, i) => new { i, value }))\n{\n    var value = item.value;\n    var index = item.i;\n}\n\n```\n\nThis gets you the item (\n```csharp\nitem.value\n```\n) and its index (\n```csharp\nitem.i\n```\n) by using this overload of LINQ's \n```csharp\nSelect\n```\n:\n\nthe second parameter of the function [inside Select] represents the index of the source element.\n\nThe \n```csharp\nnew { i, value }\n```\n is creating a new anonymous object.\nHeap allocations can be avoided by using \n```csharp\nValueTuple\n```\n if you're using C# 7.0 or later:\n\n```csharp\nforeach (var item in Model.Select((value, i) => ( value, i )))\n{\n    var value = item.value;\n    var index = item.i;\n}\n\n```\n\nYou can also eliminate the \n```csharp\nitem.\n```\n by using automatic destructuring:\n\n```csharp\nforeach (var (value, i) in Model.Select((value, i) => ( value, i )))\n{\n    // Access `value` and `i` directly here.\n}\n\n```",
    "score": 1018,
    "tags": [
      "c#",
      "foreach"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:38.964647"
  },
  {
    "instruction": "How to mark a method as obsolete or deprecated?",
    "context": "How do I mark a method as obsolete or deprecated using C#?",
    "output": "The shortest way is by adding the \n```csharp\nObsoleteAttribute\n```\n as an attribute to the method. Make sure to include an appropriate explanation:\n\n```csharp\n[Obsolete(\"Method1 is deprecated, please use Method2 instead.\")]\npublic void Method1()\n{ … }\n\n```\n\nYou can also cause the compilation to fail, treating the usage of the method as an error instead of warning, if the method is called from somewhere in code like this:\n\n```csharp\n[Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)]\n\n```",
    "score": 2064,
    "tags": [
      "c#",
      ".net",
      "versioning",
      "deprecated"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:39.276820"
  },
  {
    "instruction": "How can I generate random alphanumeric strings?",
    "context": "How can I generate a random 8 character alphanumeric string in C#?",
    "output": "I heard LINQ is the new black, so here's my attempt using LINQ:\n\n```csharp\nprivate static Random random = new Random();\n\npublic static string RandomString(int length)\n{\n    const string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    return new string(Enumerable.Repeat(chars, length)\n        .Select(s => s[random.Next(s.Length)]).ToArray());\n}\n\n```\n\n(Note: The use of the \n```csharp\nRandom\n```\n class makes this unsuitable for anything security related, such as creating passwords or tokens. Use the \n```csharp\nRNGCryptoServiceProvider\n```\n class if you need a strong random number generator.)",
    "score": 2211,
    "tags": [
      "c#",
      ".net",
      "random"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:39.587251"
  },
  {
    "instruction": "How do I call a generic method using a Type variable?",
    "context": "What's the best way to call a generic method when the type parameter isn't known at compile time, but instead is obtained dynamically at runtime?\nConsider the following sample code - inside the \n```csharp\nExample()\n```\n method, what's the most concise way to invoke \n```csharp\nGenericMethod<T>()\n```\n using the \n```csharp\nType\n```\n stored in the \n```csharp\nmyType\n```\n variable?\n\n```csharp\npublic class Sample\n{\n    public void Example(string typeName)\n    {\n        Type myType = FindType(typeName);\n\n        // What goes here to call GenericMethod<T>()?\n        GenericMethod<myType>(); // This doesn't work\n\n        // What changes to call StaticMethod<T>()?\n        Sample.StaticMethod<myType>(); // This also doesn't work\n    }\n\n    public void GenericMethod<T>()\n    {\n        // ...\n    }\n\n    public static void StaticMethod<T>()\n    {\n        //...\n    }\n}\n\n```",
    "output": "You need to use reflection to get the method to start with, then \"construct\" it by supplying type arguments with MakeGenericMethod:\n\n```csharp\nMethodInfo method = typeof(Sample).GetMethod(nameof(Sample.GenericMethod));\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n```\n\nFor a static method, pass \n```csharp\nnull\n```\n as the first argument to \n```csharp\nInvoke\n```\n. That's nothing to do with generic methods - it's just normal reflection.\nAs noted, a lot of this is simpler as of C# 4 using \n```csharp\ndynamic\n```\n - if you can use type inference, of course. It doesn't help in cases where type inference isn't available, such as the exact example in the question.",
    "score": 1374,
    "tags": [
      "c#",
      ".net",
      "generics",
      "reflection"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:40.089578"
  },
  {
    "instruction": "Group by in LINQ",
    "context": "Let's suppose if we have a class like:\n\n```csharp\nclass Person { \n    internal int PersonID; \n    internal string car; \n}\n\n```\n\nI have a list of this class: \n```csharp\nList<Person> persons;\n```\n\nAnd this list can have multiple instances with same \n```csharp\nPersonID\n```\ns, for example: \n\n```csharp\npersons[0] = new Person { PersonID = 1, car = \"Ferrari\" }; \npersons[1] = new Person { PersonID = 1, car = \"BMW\"     }; \npersons[2] = new Person { PersonID = 2, car = \"Audi\"    }; \n\n```\n\nIs there a way I can group by \n```csharp\nPersonID\n```\n and get the list of all the cars he has? \nFor example, the expected result would be \n\n```csharp\nclass Result { \n   int PersonID;\n   List<string> cars; \n}\n\n```\n\nSo after grouping, I would get: \n\n```csharp\nresults[0].PersonID = 1; \nList<string> cars = results[0].cars; \n\nresult[1].PersonID = 2; \nList<string> cars = result[1].cars;\n\n```\n\nFrom what I have done so far: \n\n```csharp\nvar results = from p in persons\n              group p by p.PersonID into g\n              select new { PersonID = g.Key, // this is where I am not sure what to do\n\n```\n\nCould someone please point me in the right direction?",
    "output": "Absolutely - you basically want:\n\n```csharp\nvar results = from p in persons\n              group p.car by p.PersonId into g\n              select new { PersonId = g.Key, Cars = g.ToList() };\n\n```\n\nOr as a non-query expression:\n\n```csharp\nvar results = persons.GroupBy(\n    p => p.PersonId, \n    p => p.car,\n    (key, g) => new { PersonId = key, Cars = g.ToList() });\n\n```\n\nBasically the contents of the group (when viewed as an \n```csharp\nIEnumerable<T>\n```\n) is a sequence of whatever values were in the projection (\n```csharp\np.car\n```\n in this case) present for the given key.\nFor more on how \n```csharp\nGroupBy\n```\n works, see my Edulinq post on the topic.\n(I've renamed \n```csharp\nPersonID\n```\n to \n```csharp\nPersonId\n```\n in the above, to follow .NET naming conventions, which specifically call this out in the \"Capitalizing Compound Words and Common Terms\" section.)\nAlternatively, you could use a \n```csharp\nLookup\n```\n:\n\n```csharp\nvar carsByPersonId = persons.ToLookup(p => p.PersonId, p => p.car);\n\n```\n\nYou can then get the cars for each person very easily:\n\n```csharp\n// This will be an empty sequence for any personId not in the lookup\nvar carsForPerson = carsByPersonId[personId];\n\n```",
    "score": 2104,
    "tags": [
      "c#",
      "linq",
      "group-by"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:40.379982"
  },
  {
    "instruction": "How do I turn a C# object into a JSON string in .NET?",
    "context": "I have classes like these:\n\n```csharp\nclass MyDate\n{\n    int year, month, day;\n}\n\nclass Lad\n{\n    string firstName;\n    string lastName;\n    MyDate dateOfBirth;\n}\n\n```\n\nAnd I would like to turn a \n```csharp\nLad\n```\n object into a JSON string like this:\n\n```csharp\n{\n    \"firstName\":\"Markoff\",\n    \"lastName\":\"Chaney\",\n    \"dateOfBirth\":\n    {\n        \"year\":\"1901\",\n        \"month\":\"4\",\n        \"day\":\"30\"\n    }\n}\n\n```\n\n(Without the formatting). I found this link, but it uses a namespace that's not in .NET 4. I also heard about JSON.NET, but their site seems to be down at the moment, and I'm not keen on using external DLL files.\nAre there other options besides manually creating a JSON string writer?",
    "output": "Since we all love one-liners\n... this one depends on the Newtonsoft NuGet package, which is popular and better than the default serializer.\n\n```csharp\nNewtonsoft.Json.JsonConvert.SerializeObject(new {foo = \"bar\"})\n\n```\n\nDocumentation: Serializing and Deserializing JSON",
    "score": 1493,
    "tags": [
      "c#",
      ".net",
      "json",
      "serialization"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:40.664442"
  },
  {
    "instruction": "Returning IEnumerable<T> vs. IQueryable<T>",
    "context": "What is the difference between returning \n```csharp\nIQueryable<T>\n```\n vs. \n```csharp\nIEnumerable<T>\n```\n, when should one be preferred over the other?\n\n```csharp\nIQueryable<Customer> custs = from c in db.Customers\nwhere c.City == \"<City>\"\nselect c;\n\nIEnumerable<Customer> custs = from c in db.Customers\nwhere c.City == \"<City>\"\nselect c;\n\n```\n\nWill both be deferred execution and when should one be preferred over the other?",
    "output": "Yes, both will give you deferred execution.\nThe difference is that \n```csharp\nIQueryable<T>\n```\n is the interface that allows LINQ-to-SQL (LINQ.-to-anything really) to work. So if you further refine your query on an \n```csharp\nIQueryable<T>\n```\n, that query will be executed in the database, if possible. \nFor the \n```csharp\nIEnumerable<T>\n```\n case, it will be LINQ-to-object, meaning that all objects matching the original query will have to be loaded into memory from the database.\nIn code:\n\n```csharp\nIQueryable<Customer> custs = ...;\n// Later on...\nvar goldCustomers = custs.Where(c => c.IsGold);\n\n```\n\nThat code will execute SQL to only select gold customers. The following code, on the other hand, will execute the original query in the database, then filtering out the non-gold customers in the memory:\n\n```csharp\nIEnumerable<Customer> custs = ...;\n// Later on...\nvar goldCustomers = custs.Where(c => c.IsGold);\n\n```\n\nThis is quite an important difference, and working on \n```csharp\nIQueryable<T>\n```\n can in many cases save you from returning too many rows from the database. Another prime example is doing paging: If you use \n```csharp\nTake\n```\n and \n```csharp\nSkip\n```\n on \n```csharp\nIQueryable\n```\n, you will only get the number of rows requested; doing that on an \n```csharp\nIEnumerable<T>\n```\n will cause all of your rows to be loaded in memory.",
    "score": 1960,
    "tags": [
      "c#",
      "linq",
      "linq-to-sql",
      "ienumerable",
      "iqueryable"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:40.947044"
  },
  {
    "instruction": "Get property value from string using reflection",
    "context": "I am trying implement the Data transformation using Reflection1 example in my code.\nThe \n```csharp\nGetSourceValue\n```\n function has a switch comparing various types, but I want to remove these types and properties and have \n```csharp\nGetSourceValue\n```\n get the value of the property using only a single string as the parameter.  I want to pass a class and property in the string and resolve the value of the property.\nIs this possible?\n1 Web Archive version of original blog post",
    "output": "```csharp\n public static object GetPropValue(object src, string propName)\n {\n     return src.GetType().GetProperty(propName).GetValue(src, null);\n }\n\n```\n\nOf course, you will want to add validation and whatnot, but that is the gist of it.",
    "score": 2291,
    "tags": [
      "c#",
      "reflection",
      "properties"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:41.229052"
  },
  {
    "instruction": "Collection was modified; enumeration operation may not execute",
    "context": "I can't get to the bottom of this error, because when the debugger is attached, it does not seem to occur.\n\nCollection was modified; enumeration operation may not execute\n\nBelow is the code.\nThis is a WCF server in a Windows service. The method \n```csharp\nNotifySubscribers()\n```\n is called by the service whenever there is a data event (at random intervals, but not very often - about 800 times per day).\nWhen a Windows Forms client subscribes, the subscriber ID is added to the subscribers dictionary, and when the client unsubscribes, it is deleted from the dictionary. The error happens when (or after) a client unsubscribes. It appears that the next time the \n```csharp\nNotifySubscribers()\n```\n method is called, the \n```csharp\nforeach()\n```\n loop fails with the error in the subject line. The method writes the error into the application log as shown in the code below. When a debugger is attached and a client unsubscribes, the code executes fine.\nDo you see a problem with this code? Do I need to make the dictionary thread-safe?\n\n```csharp\n[ServiceBehavior(InstanceContextMode=InstanceContextMode.Single)]\npublic class SubscriptionServer : ISubscriptionServer\n{\n    private static IDictionary<Guid, Subscriber> subscribers;\n\n    public SubscriptionServer()\n    {            \n        subscribers = new Dictionary<Guid, Subscriber>();\n    }\n\n    public void NotifySubscribers(DataRecord sr)\n    {\n        foreach(Subscriber s in subscribers.Values)\n        {\n            try\n            {\n                s.Callback.SignalData(sr);\n            }\n            catch (Exception e)\n            {\n                DCS.WriteToApplicationLog(e.Message, \n                  System.Diagnostics.EventLogEntryType.Error);\n\n                UnsubscribeEvent(s.ClientId);\n            }\n        }\n    }\n    \n    public Guid SubscribeEvent(string clientDescription)\n    {\n        Subscriber subscriber = new Subscriber();\n        subscriber.Callback = OperationContext.Current.\n                GetCallbackChannel<IDCSCallback>();\n\n        subscribers.Add(subscriber.ClientId, subscriber);\n        \n        return subscriber.ClientId;\n    }\n\n    public void UnsubscribeEvent(Guid clientId)\n    {\n        try\n        {\n            subscribers.Remove(clientId);\n        }\n        catch(Exception e)\n        {\n            System.Diagnostics.Debug.WriteLine(\"Unsubscribe Error \" + \n                    e.Message);\n        }\n    }\n}\n\n```",
    "output": "What's likely happening is that \n```csharp\nSignalData\n```\n is indirectly changing the subscribers dictionary under the hood during the loop and leading to that message.  You can verify this by changing\n\n```csharp\nforeach(Subscriber s in subscribers.Values)\n\n```\n\nTo\n\n```csharp\nforeach(Subscriber s in subscribers.Values.ToList())\n\n```\n\nIf I'm right, the problem will disappear.\nCalling \n```csharp\nsubscribers.Values.ToList()\n```\n copies the values of \n```csharp\nsubscribers.Values\n```\n to a separate list at the start of the \n```csharp\nforeach\n```\n. Nothing else has access to this list (it doesn't even have a variable name!), so nothing can modify it inside the loop.",
    "score": 2138,
    "tags": [
      "c#",
      "wcf",
      "concurrency",
      "dictionary",
      "thread-safety"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:41.520046"
  },
  {
    "instruction": "Deserialize JSON into C# dynamic object?",
    "context": "Is there a way to deserialize JSON content into a C# dynamic type? It would be nice to skip creating a bunch of classes in order to use the \n```csharp\nDataContractJsonSerializer\n```\n.",
    "output": "It's pretty simple using Json.NET:\n\n```csharp\ndynamic stuff = JsonConvert.DeserializeObject(\"{ 'Name': 'Jon Smith', 'Address': { 'City': 'New York', 'State': 'NY' }, 'Age': 42 }\");\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n```\n\nAlso \n```csharp\nusing Newtonsoft.Json.Linq\n```\n:\n\n```csharp\ndynamic stuff = JObject.Parse(\"{ 'Name': 'Jon Smith', 'Address': { 'City': 'New York', 'State': 'NY' }, 'Age': 42 }\");\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n```\n\nDocumentation: Querying JSON with dynamic",
    "score": 768,
    "tags": [
      "c#",
      ".net",
      "json",
      "serialization",
      "dynamic"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:41.833688"
  },
  {
    "instruction": "How to group by multiple columns using LINQ",
    "context": "How can I do group by multiple columns in LINQ?\nSomething similar to this in SQL:\n\n```csharp\nSELECT * FROM <TableName> GROUP BY <Column1>,<Column2>\n\n```\n\nHow can I convert this to LINQ:\n\n```csharp\nQuantityBreakdown\n(\n    MaterialID int,\n    ProductID int,\n    Quantity float\n)\n\nINSERT INTO @QuantityBreakdown (MaterialID, ProductID, Quantity)\nSELECT MaterialID, ProductID, SUM(Quantity)\nFROM @Transactions\nGROUP BY MaterialID, ProductID\n\n```",
    "output": "Use an anonymous type.\nEg\n\n```csharp\ngroup x by new { x.Column1, x.Column2 }\n\n```",
    "score": 1401,
    "tags": [
      "c#",
      ".net",
      "linq",
      "group-by"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:42.169976"
  },
  {
    "instruction": "How to escape braces (curly brackets) in a format string in .NET",
    "context": "How can brackets be escaped in using \n```csharp\nstring.Format\n```\n?\nFor example:\n\n```csharp\nString val = \"1,2,3\"\nString.Format(\" foo {{0}}\", val);\n\n```\n\nThis example doesn't throw an exception, but it outputs the string \n```csharp\nfoo {0}\n```\n.\nIs there a way to escape the brackets?",
    "output": "For you to output \n```csharp\n foo {1, 2, 3}\n```\n you have to do something like:\n\n```csharp\nstring t = \"1, 2, 3\";\nstring v = String.Format(\" foo {{{0}}}\", t);\n\n```\n\nTo output a \n```csharp\n{\n```\n you use \n```csharp\n{{\n```\n and to output a \n```csharp\n}\n```\n you use \n```csharp\n}}\n```\n.\nOr now, you can also use C# string interpolation like this (a feature available in C# 6.0)\nEscaping brackets: String interpolation $(\"\"). It is new feature in C# 6.0.\n\n```csharp\nvar inVal = \"1, 2, 3\";\nvar outVal = $\" foo {{{inVal}}}\";\n// The output will be:  foo {1, 2, 3}\n\n```",
    "score": 1500,
    "tags": [
      "c#",
      ".net",
      "string",
      "parsing",
      "formatting"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:42.448686"
  },
  {
    "instruction": "How to convert UTF-8 byte[] to string",
    "context": "I have a \n```csharp\nbyte[]\n```\n array that is loaded from a file that I happen to known contains UTF-8.\nIn some debugging code, I need to convert it to a string. Is there a one-liner that will do this?\nUnder the covers it should be just an allocation and a memcopy, so even if it is not implemented, it should be possible.",
    "output": "```csharp\nstring result = System.Text.Encoding.UTF8.GetString(byteArray);\n\n```\n\nor one of the overload if you know the length:\n\n```csharp\nstring result = System.Text.Encoding.UTF8.GetString(byteArray, 0, 42);\n\n```",
    "score": 1816,
    "tags": [
      "c#",
      ".net",
      "arrays",
      "string",
      "type-conversion"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:42.723390"
  },
  {
    "instruction": "How to set the Content-Type header for an HttpClient request?",
    "context": "I'm trying to set the \n```csharp\nContent-Type\n```\n header of an \n```csharp\nHttpClient\n```\n object as required by an API I am calling.\nI tried setting the \n```csharp\nContent-Type\n```\n like below:\n\n```csharp\nusing (var httpClient = new HttpClient())\n{\n    httpClient.BaseAddress = new Uri(\"http://example.com/\");\n    httpClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n    httpClient.DefaultRequestHeaders.Add(\"Content-Type\", \"application/json\");\n    // ...\n}\n\n```\n\nIt allows me to add the \n```csharp\nAccept\n```\n header but when I try to add \n```csharp\nContent-Type\n```\n it throws the following exception:\n\nMisused header name. Make sure request headers are used with\n  \n```csharp\nHttpRequestMessage\n```\n, response headers with \n```csharp\nHttpResponseMessage\n```\n, and\n  content headers with \n```csharp\nHttpContent\n```\n objects.\n\nHow can I set the \n```csharp\nContent-Type\n```\n header in a \n```csharp\nHttpClient\n```\n request?",
    "output": "The content type is a header of the content, not of the request, which is why this is failing. \n```csharp\nAddWithoutValidation\n```\n as suggested by Robert Levy may work, but you can also set the content type when creating the request content itself (note that the code snippet adds \n```csharp\napplication/json\n```\n in two places-for Accept and Content-Type headers):\n\n```csharp\nHttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(\"http://example.com/\");\nclient.DefaultRequestHeaders\n      .Accept\n      .Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));//ACCEPT header\n\nHttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, \"relativeAddress\");\nrequest.Content = new StringContent(\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":33}\",\n                                    Encoding.UTF8, \n                                    \"application/json\");//CONTENT-TYPE header\n\nclient.SendAsync(request)\n      .ContinueWith(responseTask =>\n      {\n          Console.WriteLine(\"Response: {0}\", responseTask.Result);\n      });\n\n```",
    "score": 1449,
    "tags": [
      "c#",
      "asp.net",
      "rest",
      "content-type",
      "dotnet-httpclient"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:43.021862"
  },
  {
    "instruction": "DateTime vs DateTimeOffset",
    "context": "What is the difference between a \n```csharp\nDateTime\n```\n and a \n```csharp\nDateTimeOffset\n```\n and when should one be used?\n\nCurrently, we have a standard way of dealing with .NET \n```csharp\nDateTime\n```\ns in a TimeZone-aware way: Whenever we produce a \n```csharp\nDateTime\n```\n we do it in UTC (e.g. using \n```csharp\nDateTime.UtcNow\n```\n), and whenever we display one, we convert back from UTC to the user's local time.\nThat works fine, but I've been reading about \n```csharp\nDateTimeOffset\n```\n and how it captures the local and UTC time in the object itself.",
    "output": "```csharp\nDateTimeOffset\n```\n is a representation of instantaneous time (also known as absolute time).  By that, I mean a moment in time that is universal for everyone (not accounting for leap seconds, or the relativistic effects of time dilation).  Another way to represent instantaneous time is with a \n```csharp\nDateTime\n```\n where \n```csharp\n.Kind\n```\n is \n```csharp\nDateTimeKind.Utc\n```\n.\nThis is distinct from calendar time (also known as civil time), which is a position on someone's calendar, and there are many different calendars all over the globe.  We call these calendars time zones.  Calendar time is represented by a \n```csharp\nDateTime\n```\n where \n```csharp\n.Kind\n```\n is \n```csharp\nDateTimeKind.Unspecified\n```\n, or \n```csharp\nDateTimeKind.Local\n```\n.  And \n```csharp\n.Local\n```\n is only meaningful in scenarios where you have an implied understanding of where the computer that is using the result is positioned.  (For example, a user's workstation)\nSo then, why \n```csharp\nDateTimeOffset\n```\n instead of a UTC \n```csharp\nDateTime\n```\n?  It's all about perspective.  Let's use an analogy - we'll pretend to be photographers.\nImagine you are standing on a calendar timeline, pointing a camera at a person on the instantaneous timeline laid out in front of you.  You line up your camera according to the rules of your timezone - which change periodically due to daylight saving time, or due to other changes to the legal definition of your time zone.  (You don't have a steady hand, so your camera is shaky.)  \nThe person standing in the photo would see the angle at which your camera came from. If others were taking pictures, they could be from different angles. This is what the \n```csharp\nOffset\n```\n part of the \n```csharp\nDateTimeOffset\n```\n represents.\nSo if you label your camera \"Eastern Time\", sometimes you are pointing from -5, and sometimes you are pointing from -4.  There are cameras all over the world, all labeled different things, and all pointing at the same instantaneous timeline from different angles.  Some of them are right next to (or on top of) each other, so just knowing the offset isn't enough to determine which timezone the time is related to.\nAnd what about UTC?  Well, it's the one camera out there that is guaranteed to have a steady hand.  It's on a tripod, firmly anchored into the ground. It's not going anywhere.  We call its angle of perspective the zero offset.\n\nSo - what does this analogy tell us?  It provides some intuitive guidelines-\n\nIf you are representing time relative to some place in particular, represent it in calendar time with a \n```csharp\nDateTime\n```\n.  Just be sure you don't ever confuse one calendar with another.  \n```csharp\nUnspecified\n```\n should be your assumption.  \n```csharp\nLocal\n```\n is only useful coming from \n```csharp\nDateTime.Now\n```\n.  For example, I might get \n```csharp\nDateTime.Now\n```\n and save it in a database - but when I retrieve it, I have to assume that it is \n```csharp\nUnspecified\n```\n.  I can't rely that my local calendar is the same calendar that it was originally taken from.\nIf you must always be certain of the moment, make sure you are representing instantaneous time.  Use \n```csharp\nDateTimeOffset\n```\n to enforce it, or use UTC \n```csharp\nDateTime\n```\n by convention.\nIf you need to track a moment of instantaneous time, but you want to also know \"What time did the user think it was on their local calendar?\" - then you must use a \n```csharp\nDateTimeOffset\n```\n.  This is very important for timekeeping systems, for example - both for technical and legal concerns.\nIf you ever need to modify a previously recorded \n```csharp\nDateTimeOffset\n```\n - you don't have enough information in the offset alone to ensure that the new offset is still relevant for the user.  You must also store a timezone identifier  (think - I need the name of that camera so I can take a new picture even if the position has changed).\nIt should also be pointed out that Noda Time has a representation called \n```csharp\nZonedDateTime\n```\n for this, while the .Net base class library does not have anything similar.  You would need to store both a \n```csharp\nDateTimeOffset\n```\n and a \n```csharp\nTimeZoneInfo.Id\n```\n value.\nOccasionally, you will want to represent a calendar time that is local to \"whomever is looking at it\".  For example, when defining what today means.  Today is always midnight to midnight, but these represent a near-infinite number of overlapping ranges on the instantaneous timeline.  (In practice we have a finite number of timezones, but you can express offsets down to the tick)  So in these situations, make sure you understand how to either limit the \"who's asking?\" question down to a single time zone, or deal with translating them back to instantaneous time as appropriate.\n\nHere are a few other little bits about \n```csharp\nDateTimeOffset\n```\n that back up this analogy, and some tips for keeping it straight:\n\nIf you compare two \n```csharp\nDateTimeOffset\n```\n values, they are first normalized to zero offset before comparing.  In other words, \n```csharp\n2012-01-01T00:00:00+00:00\n```\n and \n```csharp\n2012-01-01T02:00:00+02:00\n```\n refer to the same instantaneous moment, and are therefore equivalent.\nIf you are doing any unit testing and need to be certain of the offset, test both the \n```csharp\nDateTimeOffset\n```\n value, and the \n```csharp\n.Offset\n```\n property separately.\nThere is a one-way implicit conversion built in to the .Net framework that lets you pass a \n```csharp\nDateTime\n```\n into any \n```csharp\nDateTimeOffset\n```\n parameter or variable.  When doing so, the \n```csharp\n.Kind\n```\n matters.  If you pass a UTC kind, it will carry in with a zero offset, but if you pass either \n```csharp\n.Local\n```\n or \n```csharp\n.Unspecified\n```\n, it will assume to be local.  The framework is basically saying, \"Well, you asked me to convert calendar time to instantaneous time, but I have no idea where this came from, so I'm just going to use the local calendar.\"  This is a huge gotcha if you load up an unspecified \n```csharp\nDateTime\n```\n on a computer with a different timezone.  (IMHO - that should throw an exception - but it doesn't.)\n\nShameless Plug:\nMany people have shared with me that they find this analogy extremely valuable, so I included it in my Pluralsight course, Date and Time Fundamentals.  You'll find a step-by-step walkthrough of the camera analogy in the second module, \"Context Matters\", in the clip titled \"Calendar Time vs. Instantaneous Time\".",
    "score": 1792,
    "tags": [
      "c#",
      ".net",
      "datetime",
      "timezone",
      "datetimeoffset"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:43.287006"
  },
  {
    "instruction": "Why would you use Expression<Func<T>> rather than Func<T>?",
    "context": "I understand lambdas and the \n```csharp\nFunc\n```\n and \n```csharp\nAction\n```\n delegates. But expressions \nstump me. \nIn what circumstances would you use an \n```csharp\nExpression<Func<T>>\n```\n rather than a plain old \n```csharp\nFunc<T>\n```\n?",
    "output": "When you want to treat lambda expressions as expression trees and look inside them instead of executing them. For example, LINQ to SQL gets the expression and converts it to the equivalent SQL statement and submits it to server (rather than executing the lambda).\nConceptually, \n```csharp\nExpression<Func<T>>\n```\n is completely different from \n```csharp\nFunc<T>\n```\n. \n```csharp\nFunc<T>\n```\n denotes a \n```csharp\ndelegate\n```\n which is pretty much a pointer to a method and \n```csharp\nExpression<Func<T>>\n```\n denotes a tree data structure for a lambda expression. This tree structure describes what a lambda expression does rather than doing the actual thing. It basically holds data about the composition of expressions, variables, method calls, ... (for example it holds information such as this lambda is some constant + some parameter). You can use this description to convert it to an actual method (with \n```csharp\nExpression.Compile\n```\n) or do other stuff (like the LINQ to SQL example) with it. The act of treating lambdas as anonymous methods and expression trees is purely a compile time thing.\n\n```csharp\nFunc<int> myFunc = () => 10; // similar to: int myAnonMethod() { return 10; }\n\n```\n\nwill effectively compile to an IL method that gets nothing and returns 10.\n\n```csharp\nExpression<Func<int>> myExpression = () => 10;\n\n```\n\nwill be converted to a data structure that describes an expression that gets no parameters and returns the value 10:\n larger image\nWhile they both look the same at compile time, what the compiler generates is totally different.",
    "score": 1330,
    "tags": [
      "c#",
      "delegates",
      "lambda",
      "expression-trees"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:43.577740"
  },
  {
    "instruction": "LINQ query on a DataTable",
    "context": "I'm trying to perform a LINQ query on a DataTable object and bizarrely I am finding that performing such queries on DataTables is not straightforward. For example:\n\n```csharp\nvar results = from myRow in myDataTable\nwhere results.Field(\"RowNo\") == 1\nselect results;\n\n```\n\nThis is not allowed. How do I get something like this working?\nI'm amazed that LINQ queries are not allowed on DataTables!",
    "output": "You can't query against the \n```csharp\nDataTable\n```\n's Rows collection, since \n```csharp\nDataRowCollection\n```\n doesn't implement \n```csharp\nIEnumerable<T>\n```\n. You need to use the \n```csharp\nAsEnumerable()\n```\n extension for \n```csharp\nDataTable\n```\n. Like so:\n\n```csharp\nvar results = from myRow in myDataTable.AsEnumerable()\nwhere myRow.Field<int>(\"RowNo\") == 1\nselect myRow;\n\n```\n\nAnd as @Keith says, you'll need to add a reference to System.Data.DataSetExtensions\n\n```csharp\nAsEnumerable()\n```\n returns \n```csharp\nIEnumerable<DataRow>\n```\n. If you need to convert \n```csharp\nIEnumerable<DataRow>\n```\n to a \n```csharp\nDataTable\n```\n, use the \n```csharp\nCopyToDataTable()\n```\n extension.\nBelow is query with Lambda Expression,\n\n```csharp\nvar result = myDataTable\n    .AsEnumerable()\n    .Where(myRow => myRow.Field<int>(\"RowNo\") == 1);\n\n```",
    "score": 1421,
    "tags": [
      "c#",
      ".net",
      "linq",
      "datatable",
      ".net-3.5"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:43.862290"
  },
  {
    "instruction": "How can I get the application's path in a .NET console application?",
    "context": "How do I find the application's path in a console application?\nIn Windows Forms, I can use \n```csharp\nApplication.StartupPath\n```\n to find the current path, but this doesn't seem to be available in a console application.",
    "output": "```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly()\n```\n.\n```csharp\nLocation\n```\n1\nCombine that with \n```csharp\nSystem.IO.Path.GetDirectoryName\n```\n if all you want is the directory.\n\n1As per Mr.Mindor's comment:\n\n```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly().Location\n```\n returns where the executing assembly is currently located, which may or may not be where the assembly is located when not executing. In the case of shadow copying assemblies, you will get a path in a temp directory. \n```csharp\nSystem.Reflection.Assembly.GetExecutingAssembly().CodeBase\n```\n will return the 'permanent' path of the assembly.",
    "score": 1360,
    "tags": [
      "c#",
      ".net",
      "console",
      "console-application"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:44.144068"
  },
  {
    "instruction": "Randomize a List<T>",
    "context": "What is the best way to randomize the order of a generic list in C#? I've got a finite set of 75 numbers in a list I would like to assign a random order to, in order to draw them for a lottery type application.",
    "output": "Shuffle any \n```csharp\n(I)List\n```\n with an extension method based on the Fisher-Yates shuffle:\n\n```csharp\nprivate static Random rng = new Random();  \n\npublic static void Shuffle<T>(this IList<T> list)  \n{  \n    int n = list.Count;  \n    while (n > 1) {  \n        n--;  \n        int k = rng.Next(n + 1);  \n        T value = list[k];  \n        list[k] = list[n];  \n        list[n] = value;  \n    }  \n}\n\n```\n\nUsage:\n\n```csharp\nList<Product> products = GetProducts();\nproducts.Shuffle();\n\n```\n\nThe code above uses the much criticised System.Random method to select swap candidates. It's fast but not as random as it should be. If you need a better quality of randomness in your shuffles use the random number generator in System.Security.Cryptography like so:\n\n```csharp\nusing System.Security.Cryptography;\n...\npublic static void Shuffle<T>(this IList<T> list)\n{\n    RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();\n    int n = list.Count;\n    while (n > 1)\n    {\n        byte[] box = new byte[1];\n        do provider.GetBytes(box);\n        while (!(box[0] < n * (Byte.MaxValue / n)));\n        int k = (box[0] % n);\n        n--;\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n    }\n}\n\n```\n\nA simple comparison is available at this blog (WayBack Machine).\nEdit: Since writing this answer a couple years back, many people have commented or written to me, to point out the big silly flaw in my comparison. They are of course right. There's nothing wrong with System.Random if it's used in the way it was intended. In my first example above, I instantiate the rng variable inside of the Shuffle method, which is asking for trouble if the method is going to be called repeatedly. Below is a fixed, full example based on a really useful comment received today from @weston here on SO.\nProgram.cs:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace SimpleLottery\n{\n  class Program\n  {\n    private static void Main(string[] args)\n    {\n      var numbers = new List<int>(Enumerable.Range(1, 75));\n      numbers.Shuffle();\n      Console.WriteLine(\"The winning numbers are: {0}\", string.Join(\",  \", numbers.GetRange(0, 5)));\n    }\n  }\n\n  public static class ThreadSafeRandom\n  {\n      [ThreadStatic] private static Random Local;\n\n      public static Random ThisThreadsRandom\n      {\n          get { return Local ?? (Local = new Random(unchecked(Environment.TickCount * 31 + Thread.CurrentThread.ManagedThreadId))); }\n      }\n  }\n\n  static class MyExtensions\n  {\n    public static void Shuffle<T>(this IList<T> list)\n    {\n      int n = list.Count;\n      while (n > 1)\n      {\n        n--;\n        int k = ThreadSafeRandom.ThisThreadsRandom.Next(n + 1);\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n      }\n    }\n  }\n}\n\n```",
    "score": 1433,
    "tags": [
      "c#",
      "list",
      "random",
      "shuffle"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:44.423583"
  },
  {
    "instruction": "Creating a byte array from a stream",
    "context": "What is the prefered method for creating a byte array from an input stream? \nHere is my current solution with .NET 3.5. \n\n```csharp\nStream s;\nbyte[] b;\n\nusing (BinaryReader br = new BinaryReader(s))\n{\n    b = br.ReadBytes((int)s.Length);\n}\n\n```\n\nIs it still a better idea to read and write chunks of the stream?",
    "output": "It really depends on whether or not you can trust \n```csharp\ns.Length\n```\n. For many streams, you just don't know how much data there will be. In such cases - and before .NET 4 - I'd use code like this:\n\n```csharp\npublic static byte[] ReadFully(Stream input)\n{\n    byte[] buffer = new byte[16*1024];\n    using (MemoryStream ms = new MemoryStream())\n    {\n        int read;\n        while ((read = input.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        return ms.ToArray();\n    }\n}\n\n```\n\nWith .NET 4 and above, I'd use \n```csharp\nStream.CopyTo\n```\n, which is basically equivalent to the loop in my code - create the \n```csharp\nMemoryStream\n```\n, call \n```csharp\nstream.CopyTo(ms)\n```\n and then return \n```csharp\nms.ToArray()\n```\n. Job done.\nI should perhaps explain why my answer is longer than the others. \n```csharp\nStream.Read\n```\n doesn't guarantee that it will read everything it's asked for. If you're reading from a network stream, for example, it may read one packet's worth and then return, even if there will be more data soon. \n```csharp\nBinaryReader.Read\n```\n will keep going until the end of the stream or your specified size, but you still have to know the size to start with.\nThe above method will keep reading (and copying into a \n```csharp\nMemoryStream\n```\n) until it runs out of data. It then asks the \n```csharp\nMemoryStream\n```\n to return a copy of the data in an array. If you know the size to start with - or think you know the size, without being sure - you can construct the \n```csharp\nMemoryStream\n```\n to be that size to start with. Likewise you can put a check at the end, and if the length of the stream is the same size as the buffer (returned by \n```csharp\nMemoryStream.GetBuffer\n```\n) then you can just return the buffer. So the above code isn't quite optimised, but will at least be correct. It doesn't assume any responsibility for closing the stream - the caller should do that.\nSee this article for more info (and an alternative implementation).",
    "score": 1482,
    "tags": [
      "c#",
      ".net-3.5",
      "inputstream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:44.707941"
  },
  {
    "instruction": "How to count occurrences of a char\\string within a string?",
    "context": "I want to count how many \n```csharp\n/\n```\ns I could find in a string. There are several ways to do it, but I couldn't decide on what the best (or easiest) is.\nAt the moment I'm going with something like:\n\n```csharp\nstring source = \"/once/upon/a/time/\";\nint count = source.Length - source.Replace(\"/\", \"\").Length;\n\n```\n\nOr for strings where length > 1:\n\n```csharp\nstring haystack = \"/once/upon/a/time\";\nstring needle = \"/\";\nint needleCount = ( haystack.Length - haystack.Replace(needle,\"\").Length ) / needle.Length;\n\n```",
    "output": "If you're using .NET 3.5 you can do this in a one-liner with LINQ:\n\n```csharp\nint count = source.Count(f => f == '/');\n\n```\n\nIf you don't want to use LINQ you can do it with:\n\n```csharp\nint count = source.Split('/').Length - 1;\n\n```\n\n\nYou might be surprised to learn that your original technique seems to be about 30% faster than either of these! I've just done a quick benchmark with \"/once/upon/a/time/\" and the results are as follows:\n\nYour original = 12s\n  source.Count = 19s\n  source.Split = 17s\n  foreach (from bobwienholt's answer) = 10s \n\n(The times are for 50,000,000 iterations so you're unlikely to notice much difference in the real world.)",
    "score": 1245,
    "tags": [
      "c#",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:44.987958"
  },
  {
    "instruction": "Creating a comma separated list from IList<string> or IEnumerable<string>",
    "context": "What is the cleanest way to create a comma-separated list of string values from an \n```csharp\nIList<string>\n```\n or \n```csharp\nIEnumerable<string>\n```\n?\n\n```csharp\nString.Join(...)\n```\n operates on a \n```csharp\nstring[]\n```\n so can be cumbersome to work with when types such as \n```csharp\nIList<string>\n```\n or \n```csharp\nIEnumerable<string>\n```\n cannot easily be converted into a string array.",
    "output": ".NET 4+\n\n```csharp\nIList<string> strings = new List<string>{\"1\",\"2\",\"testing\"};\nstring joined = string.Join(\",\", strings);\n\n```\n\nDetail & Pre .Net 4.0 Solutions\n\n```csharp\nIEnumerable<string>\n```\n can be converted into a string array very easily with LINQ (.NET 3.5):\n\n```csharp\nIEnumerable<string> strings = ...;\nstring[] array = strings.ToArray();\n\n```\n\nIt's easy enough to write the equivalent helper method if you need to:\n\n```csharp\npublic static T[] ToArray(IEnumerable<T> source)\n{\n    return new List<T>(source).ToArray();\n}\n\n```\n\nThen call it like this:\n\n```csharp\nIEnumerable<string> strings = ...;\nstring[] array = Helpers.ToArray(strings);\n\n```\n\nYou can then call \n```csharp\nstring.Join\n```\n. Of course, you don't have to use a helper method:\n\n```csharp\n// C# 3 and .NET 3.5 way:\nstring joined = string.Join(\",\", strings.ToArray());\n// C# 2 and .NET 2.0 way:\nstring joined = string.Join(\",\", new List<string>(strings).ToArray());\n\n```\n\nThe latter is a bit of a mouthful though :)\nThis is likely to be the simplest way to do it, and quite performant as well - there are other questions about exactly what the performance is like, including (but not limited to) this one.\nAs of .NET 4.0, there are more overloads available in \n```csharp\nstring.Join\n```\n, so you can actually just write:\n\n```csharp\nstring joined = string.Join(\",\", strings);\n\n```\n\nMuch simpler :)",
    "score": 1813,
    "tags": [
      "c#",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:45.260886"
  },
  {
    "instruction": ".NET String.Format() to add commas in thousands place for a number",
    "context": "I want to add a comma in the thousands place for a number.\nWould \n```csharp\nString.Format()\n```\n be the correct path to take? What format would I use?",
    "output": "```csharp\n$\"{1234:n}\";  // Output: 1,234.00\n$\"{9876:n0}\"; // No digits after the decimal point. Output: 9,876\n\n```",
    "score": 1564,
    "tags": [
      "c#",
      ".net",
      "string",
      "format"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:45.568827"
  },
  {
    "instruction": "What is the yield keyword used for in C#?",
    "context": "In the How Can I Expose Only a Fragment of IList<> question one of the answers had the following code snippet:\n\n```csharp\nIEnumerable<object> FilteredList()\n{\n    foreach(object item in FullList)\n    {\n        if(IsItemInPartialList(item))\n            yield return item;\n    }\n}\n\n```\n\nWhat does the yield keyword do there?  I've seen it referenced in a couple places, and one other question, but I haven't quite figured out what it actually does.  I'm used to thinking of yield in the sense of one thread yielding to another, but that doesn't seem relevant here.",
    "output": "The \n```csharp\nyield\n```\n contextual keyword actually does quite a lot here.\nThe function returns an object that implements the \n```csharp\nIEnumerable<object>\n```\n interface. If a calling function starts \n```csharp\nforeach\n```\ning over this object, the function is called again until it \"yields\". This is syntactic sugar introduced in C# 2.0. In earlier versions you had to create your own \n```csharp\nIEnumerable\n```\n and \n```csharp\nIEnumerator\n```\n objects to do stuff like this.\nThe easiest way understand code like this is to type-in an example, set some breakpoints and see what happens. Try stepping through this example:\n\n```csharp\npublic void Consumer()\n{\n    foreach(int i in Integers())\n    {\n        Console.WriteLine(i.ToString());\n    }\n}\n\npublic IEnumerable<int> Integers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 4;\n    yield return 8;\n    yield return 16;\n    yield return 16777216;\n}\n\n```\n\nWhen you step through the example, you'll find the first call to \n```csharp\nIntegers()\n```\n returns \n```csharp\n1\n```\n. The second call returns \n```csharp\n2\n```\n and the line \n```csharp\nyield return 1\n```\n is not executed again.\nHere is a real-life example:\n\n```csharp\npublic IEnumerable<T> Read<T>(string sql, Func<IDataReader, T> make, params object[] parms)\n{\n    using (var connection = CreateConnection())\n    {\n        using (var command = CreateCommand(CommandType.Text, sql, connection, parms))\n        {\n            command.CommandTimeout = dataBaseSettings.ReadCommandTimeout;\n            using (var reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    yield return make(reader);\n                }\n            }\n        }\n    }\n}\n\n```",
    "score": 970,
    "tags": [
      "c#",
      "yield"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:45.874868"
  },
  {
    "instruction": "Escape curly brace '{' in String.Format",
    "context": "How do I display a literal curly brace character when using the String.Format method?\nExample:\n\n```csharp\nsb.AppendLine(String.Format(\"public {0} {1} { get; private set; }\", \nprop.Type, prop.Name));\n\n```\n\nI would like the output to look like this:\n\n```csharp\npublic Int32 MyProperty { get; private set; }\n\n```",
    "output": "Use double braces \n```csharp\n{{\n```\n or \n```csharp\n}}\n```\n so your code becomes:\n\n```csharp\nsb.AppendLine(String.Format(\"public {0} {1} {{ get; private set; }}\", \nprop.Type, prop.Name));\n\n// For prop.Type of \"Foo\" and prop.Name of \"Bar\", the result would be:\n// public Foo Bar { get; private set; }\n\n```",
    "score": 1614,
    "tags": [
      "c#",
      ".net",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:46.159466"
  },
  {
    "instruction": "Best way to repeat a character in C#",
    "context": "What is the best way to generate a string of \n```csharp\n\\t\n```\n's in C#?\nI am learning C# and experimenting with different ways of saying the same thing.\n\n```csharp\nTabs(uint t)\n```\n is a function that returns a \n```csharp\nstring\n```\n with \n```csharp\nt\n```\n amount of \n```csharp\n\\t\n```\n's\nFor example, \n```csharp\nTabs(3)\n```\n returns \n```csharp\n\"\\t\\t\\t\"\n```\n\nWhich of these three ways of implementing \n```csharp\nTabs(uint numTabs)\n```\n is best?\nOf course that depends on what \"best\" means.\n\nThe LINQ version is only two lines, which is nice.  But are the calls to Repeat and Aggregate unnecessarily time/resource consuming?\n\nThe \n```csharp\nStringBuilder\n```\n version is very clear, but is the \n```csharp\nStringBuilder\n```\n class somehow slower?\n\nThe \n```csharp\nstring\n```\n version is basic, which means it is easy to understand.\n\nDoes it not matter at all?  Are they all equal?\n\n\nThese are all questions to help me get a better feel for C#.\n\n```csharp\nprivate string Tabs(uint numTabs)\n{\n    IEnumerable<string> tabs = Enumerable.Repeat(\"\\t\", (int) numTabs);\n    return (numTabs > 0) ? tabs.Aggregate((sum, next) => sum + next) : \"\";\n}\n\nprivate string Tabs(uint numTabs)\n{\n    StringBuilder sb = new StringBuilder();\n    for (uint i = 0; i < numTabs; i++)\n        sb.Append(\"\\t\");\n\n    return sb.ToString();\n}\n\nprivate string Tabs(uint numTabs)\n{\n    string output = \"\";\n    for (uint i = 0; i < numTabs; i++)\n    {\n        output += '\\t';\n    }\n    return output;\n}\n\n```",
    "output": "What about this:\n\n```csharp\nstring tabs = new string('\\t', n);\n\n```\n\nWhere \n```csharp\nn\n```\n is the number of times you want to repeat the string.\nOr better:\n\n```csharp\nstatic string Tabs(int n)\n{\n    return new string('\\t', n);\n}\n\n```",
    "score": 1926,
    "tags": [
      "c#",
      ".net",
      "string"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:46.436351"
  },
  {
    "instruction": "Given a DateTime object, how do I get an ISO 8601 date in string format?",
    "context": "Given:\n\n```csharp\nDateTime.UtcNow\n\n```\n\nHow do I get a string which represents the same value in an ISO 8601-compliant format?\nNote that ISO 8601 defines a number of similar formats. The specific format I am looking for is:\n\n```csharp\nyyyy-MM-ddTHH:mm:ssZ\n\n```",
    "output": "Note to readers: Several commenters have pointed out some problems in this answer (related particularly to the first suggestion). Refer to the comments section for more information.\n\n\n```csharp\n// Do not use this\nDateTime.UtcNow.ToString(\"yyyy-MM-ddTHH\\\\:mm\\\\:ss.fffffffzzz\", CultureInfo.InvariantCulture);\n\n```\n\nUsing custom date-time formatting, this gives you a date similar to\n2008-09-22T13:57:31.2311892-04:00.\nAnother way is:\n\n```csharp\n// Prefer this, to avoid having to manually define a framework-provided format\nDateTime.UtcNow.ToString(\"o\", CultureInfo.InvariantCulture);\n\n```\n\nwhich uses the standard \"round-trip\" style (ISO 8601) to give you\n2008-09-22T14:01:54.9571247Z.\nTo get the specified format, you can use:\n\n```csharp\nDateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\", CultureInfo.InvariantCulture)\n\n```",
    "score": 1032,
    "tags": [
      "c#",
      "datetime",
      "datetime-format",
      "iso8601"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:46.713661"
  },
  {
    "instruction": "How do I generate a stream from a string?",
    "context": "I need to write a unit test for a method that takes a stream which comes from a text file. I would like to do do something like this:\n\n```csharp\nStream s = GenerateStreamFromString(\"a,b \\n c,d\");\n\n```",
    "output": "```csharp\npublic static Stream GenerateStreamFromString(string s)\n{\n    var stream = new MemoryStream();\n    var writer = new StreamWriter(stream);\n    writer.Write(s);\n    writer.Flush();\n    stream.Position = 0;\n    return stream;\n}\n\n```\n\nDon't forget to use Using:\n\n```csharp\nusing (var stream = GenerateStreamFromString(\"a,b \\n c,d\"))\n{\n    // ... Do stuff to stream\n}\n\n```\n\n\nAbout the \n```csharp\nStreamWriter\n```\n not being disposed. \n```csharp\nStreamWriter\n```\n is just a wrapper around the base stream, and doesn't use any resources that need to be disposed. The \n```csharp\nDispose\n```\n method will close the underlying \n```csharp\nStream\n```\n that \n```csharp\nStreamWriter\n```\n is writing to. In this case that is the \n```csharp\nMemoryStream\n```\n we want to return.\nIn .NET 4.5 there is now an overload for \n```csharp\nStreamWriter\n```\n that keeps the underlying stream open after the writer is disposed of, but this code does the same thing and works with other versions of .NET too.\nSee Is there any way to close a StreamWriter without closing its BaseStream?",
    "score": 1276,
    "tags": [
      "c#",
      "unit-testing",
      "string",
      "stream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:46.998649"
  },
  {
    "instruction": "What's the difference between the 'ref' and 'out' keywords?",
    "context": "I'm creating a function where I need to pass an object so that it can be modified by the function. What is the difference between:\n\n```csharp\npublic void myFunction(ref MyClass someClass)\n\n```\n\nand\n\n```csharp\npublic void myFunction(out MyClass someClass)\n\n```\n\nWhich should I use and why?",
    "output": "```csharp\nref\n```\n tells the compiler that the object is initialized before entering the function, while \n```csharp\nout\n```\n tells the compiler that the object will be initialized inside the function. \nSo while \n```csharp\nref\n```\n is two-ways, \n```csharp\nout\n```\n is out-only.",
    "score": 1334,
    "tags": [
      "c#",
      "reference",
      "keyword",
      "out",
      "ref"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:47.280101"
  },
  {
    "instruction": "decimal vs double! - Which one should I use and when?",
    "context": "I keep seeing people using doubles in C#. I know I read somewhere that doubles sometimes lose precision. \nMy question is when should a use a double and when should I use a decimal type?\nWhich type is suitable for money computations? (ie. greater than $100 million)",
    "output": "For money, always decimal. It's why it was created.\nIf numbers must add up correctly or balance, use decimal. This includes any financial storage or calculations, scores, or other numbers that people might do by hand.\nIf the exact value of numbers is not important, use double for speed. This includes graphics, physics or other physical sciences computations where there is already a \"number of significant digits\".",
    "score": 1265,
    "tags": [
      "c#",
      "double",
      "decimal",
      "precision",
      "currency"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:47.556494"
  },
  {
    "instruction": "What is the difference between .NET Core and .NET Standard Class Library project types?",
    "context": "In Visual Studio, there are at least three different types of class libraries you can create:\n\nClass Library (.NET Framework)\nClass Library (.NET Standard)\nClass Library (.NET Core)\n\nWhile the first is what we've been using for years, a major point of confusion I've been having is when to use the .NET Standard and .NET Core class library types. I've been bitten by this recently when attempting to multi-target different framework versions, and creating a unit test project.\nSo, what is the difference between Class Library (.NET Standard) and Class Library (.NET Core), why do both exist, and when should we use one over the other?",
    "output": "When should we use one over the other?\n\nThe decision is a trade-off between compatibility and API access.\nUse a .NET Standard library when you want to increase the number of applications that will be compatible with your library, and you are okay with a decrease in the .NET API surface area your library can access.\nUse a .NET Core library when you want to increase the .NET API surface area your library can access, and you are okay with allowing only .NET Core applications to be compatible with your library.\nFor example, a library that targets .NET Standard 1.3 will be compatible with applications that target .NET Framework 4.6, .NET Core 1.0, Universal Windows Platform 10.0, and any other platform that supports .NET Standard 1.3. The library will not have access to some parts of the .NET API, though. For instance, the  \n```csharp\nMicrosoft.NETCore.CoreCLR\n```\n package is compatible with .NET Core, but not with .NET Standard.\n\nWhat is the difference between Class Library (.NET Standard) and Class Library (.NET Core)?\n\nCompatibility: Libraries that target .NET Standard will run on any .NET Standard compliant runtime, such as .NET Core, .NET Framework, Mono/Xamarin. On the other hand, libraries that target .NET Core can only run on the .NET Core runtime.\nAPI Surface Area: .NET Standard libraries come with everything in \n```csharp\nNETStandard.Library\n```\n, whereas .NET Core libraries come with everything in \n```csharp\nMicrosoft.NETCore.App\n```\n. The latter includes approximately 20 additional libraries, some of which we can add manually to our .NET Standard library (such as \n```csharp\nSystem.Threading.Thread\n```\n) and some of which are not compatible with the .NET Standard (such as \n```csharp\nMicrosoft.NETCore.CoreCLR\n```\n).\nAlso, .NET Core libraries specify a runtime and come with an application model. That's important, for instance, to make unit test class libraries runnable.\n\nWhy do both exist?\n\nIgnoring libraries for a moment, the reason that .NET Standard exists is for portability; it defines a set of APIs that .NET platforms agree to implement. Any platform that implements a .NET Standard is compatible with libraries that target that .NET Standard. One of those compatible platforms is .NET Core.\nComing back to libraries, the .NET Standard library templates exist to run on multiple runtimes (at the expense of API surface area). Conversely, the .NET Core library templates exist to access more API surface area (at the expense of compatibility) and to specify a platform against which to build an executable.\nHere is an interactive matrix that shows which .NET Standard supports which .NET implementation(s) and how much API surface area is available.",
    "score": 777,
    "tags": [
      "c#",
      ".net",
      ".net-core",
      ".net-standard",
      "class-library"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:47.851898"
  },
  {
    "instruction": "How can I convert a Unix timestamp to DateTime and vice versa?",
    "context": "There is this example code, but then it starts talking about millisecond / nanosecond problems.\nThe same question is on MSDN, Seconds since the Unix epoch in C#.\nThis is what I've got so far:\n\n```csharp\npublic Double CreatedEpoch\n{\n  get\n  {\n    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\n    TimeSpan span = (this.Created.ToLocalTime() - epoch);\n    return span.TotalSeconds;\n  }\n  set\n  {\n    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\n    this.Created = epoch.AddSeconds(value);\n  }\n}\n\n```",
    "output": "Here's what you need:\n\n```csharp\npublic static DateTime UnixTimeStampToDateTime( double unixTimeStamp )\n{\n    // Unix timestamp is seconds past epoch\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddSeconds( unixTimeStamp ).ToLocalTime();\n    return dateTime;\n}\n\n```\n\nOr, for Java (which is different because the timestamp is in milliseconds, not seconds):\n\n```csharp\npublic static DateTime JavaTimeStampToDateTime( double javaTimeStamp )\n{\n    // Java timestamp is milliseconds past epoch\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddMilliseconds( javaTimeStamp ).ToLocalTime();\n    return dateTime;\n}\n\n```",
    "score": 1276,
    "tags": [
      "c#",
      "datetime",
      "unix",
      "epoch",
      "data-conversion"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:48.231939"
  },
  {
    "instruction": "Metadata file '.dll' could not be found",
    "context": "I am working on a WPF, C# 3.0 project, and I get this error:\n\n```csharp\nError 1 Metadata file\n'WORK=- \\Tools\\VersionManagementSystem\\BusinessLogicLayer\\bin\\Debug\n\\BusinessLogicLayer.dll' could not be found C:\\-=WORK=- \\Tools\n\\VersionManagementSystem\\VersionManagementSystem\\CSC VersionManagementSystem\n\n```\n\nThis is how I reference my usercontrols:\n\n```csharp\nxmlns:vms=\"clr-namespace:VersionManagementSystem\"\n<vms:SignOffProjectListing Margin=\"5\"/>\n\n```\n\nIt happens after every failed build. The only way I can get the solution to compile is to comment-out all my user controls and re-build the project. Then I uncomment the usercontrols and everything is fine.\nI have checked build orders and dependency configurations.\nAs you can see, it seems to have truncated the DLL file's absolute path... I have read that there is a bug with the length. Is this a possible problem?\nIt's very annoying and having to comment, build, and uncomment, the build is becoming extremely tiresome.",
    "output": "I just had the same problem. Visual Studio isn't building the project that's being referenced.\nWritten Instructions:\n\nRight click on the solution and click Properties.\nClick Configuration on the left.\nMake sure the check box under \"Build\" for the project it can't find is checked. If it is already checked, uncheck, hit apply and check the boxes again.\n(Optional) You had to do it for both Release and Debug modes on the solution properties.\n\nScreen capture Instructions:\n\nThey say a picture is worth a thousand words. Click on the GIF to zoom in, and hopefully it will be easy to follow:",
    "score": 1219,
    "tags": [
      "c#",
      ".net",
      "wpf",
      "visual-studio-2008",
      "c#-3.0"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:48.533160"
  },
  {
    "instruction": "Is there a way to check if a file is in use?",
    "context": "I'm writing a program in C# that needs to repeatedly access 1 image file. Most of the time it works, but if my computer's running fast, it will try to access the file before it's been saved back to the filesystem and throw an error:\n\n\"File in use by another process\"\n\nI would like to find a way around this, but all my Googling has only yielded creating checks by using exception handling. This is against my religion, so I was wondering if anyone has a better way of doing it?",
    "output": "Updated NOTE on this solution: Checking with \n```csharp\nFileAccess.ReadWrite\n```\n will fail for Read-Only files so the solution has been modified to check with \n```csharp\nFileAccess.Read\n```\n.\nORIGINAL:\nI've used this code for the past several years, and I haven't had any issues with it.\nUnderstand your hesitation about using exceptions, but you can't avoid them all of the time:\n\n```csharp\nprotected virtual bool IsFileLocked(FileInfo file)\n{\n    try\n    {\n        using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n        {\n            stream.Close();\n        }\n    }\n    catch (IOException)\n    {\n        //the file is unavailable because it is:\n        //still being written to\n        //or being processed by another thread\n        //or does not exist (has already been processed)\n        return true;\n    }\n\n    //file is not locked\n    return false;\n}\n\n```",
    "score": 689,
    "tags": [
      "c#",
      ".net",
      "file",
      "file-io",
      "file-locking"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:48.820660"
  },
  {
    "instruction": "How do I force my .NET application to run as administrator?",
    "context": "Once my program is installed on a client machine, how do I force my program to run as an administrator on Windows 7?",
    "output": "You'll want to modify the manifest that gets embedded in the program. This works on Visual Studio 2008 and higher: Project + Add New Item, select \"Application Manifest File\". Change the \n```csharp\n<requestedExecutionLevel>\n```\n element to:\n\n```csharp\n <requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\" />\n\n```\n\nThe user gets the UAC prompt when they start the program. Use wisely; their patience can wear out quickly.",
    "score": 1281,
    "tags": [
      "c#",
      ".net",
      "windows-7",
      "administrator",
      "elevated-privileges"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:49.087634"
  },
  {
    "instruction": "Proper use of 'yield return'",
    "context": "The yield keyword is one of those keywords in C# that continues to mystify me, and I've never been confident that I'm using it correctly.\nOf the following two pieces of code, which is the preferred and why?\nVersion 1: Using yield return\n\n```csharp\npublic static IEnumerable<Product> GetAllProducts()\n{\n    using (AdventureWorksEntities db = new AdventureWorksEntities())\n    {\n        var products = from product in db.Product\n                       select product;\n\n        foreach (Product product in products)\n        {\n            yield return product;\n        }\n    }\n}\n\n```\n\nVersion 2: Return the list\n\n```csharp\npublic static IEnumerable<Product> GetAllProducts()\n{\n    using (AdventureWorksEntities db = new AdventureWorksEntities())\n    {\n        var products = from product in db.Product\n                       select product;\n\n        return products.ToList<Product>();\n    }\n}\n\n```",
    "output": "I tend to use \n```csharp\nyield return\n```\n when I calculate the next item in the list (or even the next group of items).\nUsing your Version 2, you must have the complete list before returning.\nBy using \n```csharp\nyield return\n```\n, you really only need to have the next item before returning.\nAmong other things, this helps spread the computational cost of complex calculations over a larger time-frame.  For example, if the list is hooked up to a GUI and the user never goes to the last page, you never calculate the final items in the list.\nAnother case where \n```csharp\nyield return\n```\n is preferable is if the \n```csharp\nIEnumerable\n```\n represents an infinite set. Consider the list of Prime Numbers, or an infinite list of random numbers. You can never return the full \n```csharp\nIEnumerable\n```\n at once,  so you use \n```csharp\nyield return\n```\n to return the list incrementally.\nIn your particular example, you have the full list of products, so I'd use Version 2.",
    "score": 868,
    "tags": [
      "c#",
      "yield-return"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:49.367768"
  },
  {
    "instruction": "If a folder does not exist, create it",
    "context": "I use a \n```csharp\nFileUploader\n```\n control in my application. I want to save a file to a specified folder. If this folder does not exist, I want to first create it, and then save my file to this folder.  If the folder already exists, then just save the file in it.\nHow can I do this?",
    "output": "Use \n```csharp\nSystem.IO.Directory.CreateDirectory\n```\n.\n\nAccording to the official \".NET\" docs, you don't need to check if it exists first.\n\nSystem.io   >   Directory   >    Directory.CreateDirectory\nAny and all directories specified in \n```csharp\npath\n```\n are created, unless they already exist or unless some part of \n```csharp\npath\n```\n is invalid. If the directory already exists, this method does not create a new directory, but it returns a \n```csharp\nDirectoryInfo\n```\n object for the existing directory.\n        — learn.microsoft.com/dotnet/api/",
    "score": 1555,
    "tags": [
      "c#",
      "asp.net",
      "directory"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:49.642308"
  },
  {
    "instruction": "split a string on newlines in .NET",
    "context": "I need to split a string into newlines in .NET and the only way I know of to split strings is with the Split method. However that will not allow me to (easily) split on a newline, so what is the best way to do it?",
    "output": "To split on a string you need to use the overload that takes an array of strings:\n\n```csharp\nstring[] lines = theText.Split(\n    new string[] { Environment.NewLine },\n    StringSplitOptions.None\n);\n\n```\n\nEdit:\nIf you want to handle different types of line breaks in a text, you can use the ability to match more than one string. This will correctly split on either type of line break, and preserve empty lines and spacing in the text:\n\n```csharp\nstring[] lines = theText.Split(\n    new string[] { \"\\r\\n\", \"\\r\", \"\\n\" },\n    StringSplitOptions.None\n);\n\n```",
    "score": 1721,
    "tags": [
      "c#",
      ".net",
      "string",
      "split"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:49.913873"
  },
  {
    "instruction": "Converting string to byte array in C#",
    "context": "I'm converting something from VB into C#. Having a problem with the syntax of this statement:\n\n```csharp\nif ((searchResult.Properties[\"user\"].Count > 0))\n{\n    profile.User = System.Text.Encoding.UTF8.GetString(searchResult.Properties[\"user\"][0]);\n}\n\n```\n\nI then see the following errors:\n\nArgument 1: cannot convert from 'object' to 'byte[]'\nThe best overloaded method match for\n'System.Text.Encoding.GetString(byte[])' has some invalid arguments\n\nI tried to fix the code based on this post, but still no success:\n\n```csharp\nstring User = Encoding.UTF8.GetString(\"user\", 0);\n\n```\n\nAny suggestions?",
    "output": "If you already have a byte array then you will need to know what type of encoding was used to make it into that byte array.\nFor example, if the byte array was created like this:\n\n```csharp\nbyte[] bytes = Encoding.ASCII.GetBytes(someString);\n\n```\n\nYou will need to turn it back into a string like this:\n\n```csharp\nstring someString = Encoding.ASCII.GetString(bytes);\n\n```\n\nIf you can find in the code you inherited, the encoding used to create the byte array then you should be set.\nBesides ASCII, the System.Text.Encoding class also includes \n```csharp\nUTF8\n```\n, \n```csharp\nUnicode\n```\n (for UTF-16), and \n```csharp\nUTF32\n```\n. A full list is in the docs.",
    "score": 1750,
    "tags": [
      "c#",
      "string",
      "encoding",
      "byte"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:50.206784"
  },
  {
    "instruction": "How do I convert struct System.Byte byte[] to a System.IO.Stream object in C#?",
    "context": "How do I convert struct \n```csharp\nSystem.Byte\n```\n \n```csharp\nbyte[]\n```\n to a \n```csharp\nSystem.IO.Stream\n```\n object in C#?",
    "output": "The easiest way to convert a byte array to a stream is using the \n```csharp\nMemoryStream\n```\n class:\n\n```csharp\nStream stream = new MemoryStream(byteArray);\n\n```",
    "score": 1660,
    "tags": [
      "c#",
      ".net",
      "arrays",
      "stream"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:50.495436"
  },
  {
    "instruction": "How do I use Assert to verify that an exception has been thrown with MSTest?",
    "context": "How do I use \n```csharp\nAssert\n```\n (or other Test class) to verify that an exception has been thrown when using MSTest/Microsoft.VisualStudio.TestTools.UnitTesting?",
    "output": "For \"Visual Studio Team Test\" it appears you apply the ExpectedException attribute to the test's method.\nSample from the documentation here: A Unit Testing Walkthrough with Visual Studio Team Test\n\n```csharp\n[TestMethod]\n[ExpectedException(typeof(ArgumentException),\n    \"A userId of null was inappropriately allowed.\")]\npublic void NullUserIdInConstructor()\n{\n   LogonInfo logonInfo = new LogonInfo(null, \"P@ss0word\");\n}\n\n```",
    "score": 1110,
    "tags": [
      "c#",
      "unit-testing",
      "mstest",
      "assert",
      "vs-unit-testing-framework"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:50.769301"
  },
  {
    "instruction": "Reading settings from app.config or web.config in .NET",
    "context": "I'm working on a C# class library that needs to be able to read settings from the \n```csharp\nweb.config\n```\n or \n```csharp\napp.config\n```\n file (depending on whether the DLL is referenced from an ASP.NET web application or a Windows Forms application).\nI've found that\n\n```csharp\nConfigurationSettings.AppSettings.Get(\"MySetting\")\n\n```\n\nworks, but that code has been marked as deprecated by Microsoft.\nI've read that I should be using:\n\n```csharp\nConfigurationManager.AppSettings[\"MySetting\"]\n\n```\n\nHowever, the \n```csharp\nSystem.Configuration.ConfigurationManager\n```\n class doesn't seem to be available from a C# Class Library project.\nWhat is the best way to do this?",
    "output": "For a sample app.config file like below:\n\n```csharp\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <appSettings>\n    <add key=\"countoffiles\" value=\"7\" />\n    <add key=\"logfilelocation\" value=\"abc.txt\" />\n  </appSettings>\n</configuration>\n\n```\n\nYou read the above application settings using the code shown below:\n\n```csharp\nusing System.Configuration;\n\n```\n\nYou may also need to also add a reference to \n```csharp\nSystem.Configuration\n```\n in your project if there isn't one already. You can then access the values like so:\n\n```csharp\nstring configvalue1 = ConfigurationManager.AppSettings[\"countoffiles\"];\nstring configvalue2 = ConfigurationManager.AppSettings[\"logfilelocation\"];\n\n```",
    "score": 1059,
    "tags": [
      "c#",
      ".net",
      "configuration",
      "appsettings"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:51.058271"
  },
  {
    "instruction": "Sending email in .NET through Gmail",
    "context": "Instead of relying on my host to send an email, I was thinking of sending the email messages using my Gmail account. The emails are personalized emails to the bands I play on my show. \nIs it possible to do it?",
    "output": "Be sure to use \n```csharp\nSystem.Net.Mail\n```\n, not the deprecated \n```csharp\nSystem.Web.Mail\n```\n. Doing SSL with \n```csharp\nSystem.Web.Mail\n```\n is a gross mess of hacky extensions.\n\n```csharp\nusing System.Net;\nusing System.Net.Mail;\n\nvar fromAddress = new MailAddress(\"from@gmail.com\", \"From Name\");\nvar toAddress = new MailAddress(\"to@example.com\", \"To Name\");\nconst string fromPassword = \"fromPassword\";\nconst string subject = \"Subject\";\nconst string body = \"Body\";\n\nvar smtp = new SmtpClient\n{\n    Host = \"smtp.gmail.com\",\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    UseDefaultCredentials = false,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword)\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n```\n\nAdditionally go to the Google Account > Security page and look at the Signing in to Google > 2-Step Verification setting.\n\nIf it is enabled, then you have to generate a password allowing .NET to bypass the 2-Step Verification. To do this, click on Signing in to Google > App passwords, select app = Mail, and device = Windows Computer, and finally generate the password. Use the generated password in the \n```csharp\nfromPassword\n```\n constant instead of your standard Gmail password.\nIf it is disabled, then you have to turn on Less secure app access, which is not recommended! So better enable the 2-Step verification.",
    "score": 1175,
    "tags": [
      "c#",
      ".net",
      "email",
      "smtp",
      "gmail"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:51.340976"
  },
  {
    "instruction": "How do you sort a dictionary by value?",
    "context": "I often have to sort a dictionary (consisting of keys & values) by value. For example, I have a hash of words and respective frequencies that I want to order by frequency.\nThere is a \n```csharp\nSortedList\n```\n which is good for a single value (say frequency), that I want to map back to the word.\nSortedDictionary orders by key, not value. Some resort to a custom class, but is there a cleaner way?",
    "output": "Use LINQ:\n\n```csharp\nDictionary<string, int> myDict = new Dictionary<string, int>();\nmyDict.Add(\"one\", 1);\nmyDict.Add(\"four\", 4);\nmyDict.Add(\"two\", 2);\nmyDict.Add(\"three\", 3);\n\nvar sortedDict = from entry in myDict orderby entry.Value ascending select entry;\n\n```\n\nThis would also allow for great flexibility in that you can select the top 10, 20 10%, etc. Or if you are using your word frequency index for \n```csharp\ntype-ahead\n```\n, you could also include \n```csharp\nStartsWith\n```\n clause as well.",
    "score": 598,
    "tags": [
      "c#",
      ".net",
      "sorting",
      "dictionary"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:51.613926"
  },
  {
    "instruction": "When to use .First and when to use .FirstOrDefault with LINQ?",
    "context": "I've searched around and haven't really found a clear answer as to when you'd want to use \n```csharp\n.First\n```\n and when you'd want to use \n```csharp\n.FirstOrDefault\n```\n with LINQ.\n\nWhen would you want to use \n```csharp\n.First\n```\n? Only when you'd want to catch the exception if no results where returned?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").First();\n\n```\n\nAnd when would you want to use \n```csharp\n.FirstOrDefault\n```\n? When you'd always want the default type if no result?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").FirstOrDefault();\n\n```\n\nAnd for that matter, what about Take?\n\n```csharp\nvar result = List.Where(x => x == \"foo\").Take(1);\n\n```",
    "output": "I would use \n```csharp\nFirst()\n```\n when I know or expect the sequence to have at least one element. In other words, when it is an exceptional occurrence that the sequence is empty.\nUse \n```csharp\nFirstOrDefault()\n```\n when you know that you will need to check whether there was an element or not. In other words, when it is legal for the sequence to be empty. You should not rely on exception handling for the check. (It is bad practice and might hurt performance).\nFinally, the difference between \n```csharp\nFirst()\n```\n and \n```csharp\nTake(1)\n```\n is that \n```csharp\nFirst()\n```\n returns the element itself, while \n```csharp\nTake(1)\n```\n returns a sequence of elements that contains exactly one element.",
    "score": 932,
    "tags": [
      "c#",
      ".net",
      "linq"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:51.910648"
  },
  {
    "instruction": "Identify if a string is a number",
    "context": "If I have these strings:\n\n\n```csharp\n\"abc\"\n```\n  =  \n```csharp\nfalse\n```\n\n\n```csharp\n\"123\"\n```\n  = \n```csharp\ntrue\n```\n\n\n```csharp\n\"ab2\"\n```\n  = \n```csharp\nfalse\n```\n\n\nIs there a command, like \n```csharp\nIsNumeric()\n```\n or something else, that can identify if a string is a valid number?",
    "output": "```csharp\nint n;\nbool isNumeric = int.TryParse(\"123\", out n);\n\n```\n\nUpdate As of C# 7:\n\n```csharp\nvar isNumeric = int.TryParse(\"123\", out int n);\n\n```\n\nor if you don't need the number you can discard the out parameter\n\n```csharp\nvar isNumeric = int.TryParse(\"123\", out _);\n\n```\n\nThe var s can be replaced by their respective types!",
    "score": 1548,
    "tags": [
      "c#",
      "string",
      "parsing",
      "isnumeric"
    ],
    "source": "stackoverflow",
    "timestamp": "2025-06-24T22:16:52.186439"
  }
]