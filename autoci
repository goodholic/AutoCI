#!/bin/bash
# AutoCI - WSL 터미널 명령어 스크립트

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# AutoCI 디렉토리 설정
AUTOCI_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$AUTOCI_DIR"

# 가상환경 경로 설정
VENV_PATH=""
if [ -d "llm_venv_wsl" ]; then
    VENV_PATH="llm_venv_wsl"
elif [ -d "llm_venv" ]; then
    VENV_PATH="llm_venv"
elif [ -d "venv" ]; then
    VENV_PATH="venv"
fi

# 가상환경 활성화
if [ -n "$VENV_PATH" ] && [ -f "$VENV_PATH/bin/activate" ]; then
    echo -e "${GREEN}✓ 가상환경 활성화: $VENV_PATH${NC}"
    source "$VENV_PATH/bin/activate"
else
    echo -e "${YELLOW}⚠️  가상환경을 찾을 수 없습니다. 시스템 Python을 사용합니다.${NC}"
fi

# 파이썬 환경 확인
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}❌ Python3가 설치되어 있지 않습니다.${NC}"
    exit 1
fi

# 명령어 처리
case "$1" in
    # 시스템 시작
    start)
        echo -e "${GREEN}🚀 AutoCI 시스템을 시작합니다...${NC}"
        python3 autoci_terminal.py --start
        ;;
    
    # 대화형 모드
    terminal|t)
        echo -e "${BLUE}🤖 AutoCI 터미널 모드${NC}"
        python3 autoci_terminal.py --interactive
        ;;
    
    # 한국어 AI 대화 모드
    korean|k|한국어)
        echo -e "${CYAN}🇰🇷 AutoCI ChatGPT 수준 한국어 AI 대화 모드${NC}"
        echo -e "${GREEN}자연스러운 한국어로 대화하세요!${NC}"
        echo -e "${BLUE}✨ 격식체/반말 자동 감지, 감정 인식, Unity 전문 지식 통합${NC}"
        
        # 의존성 확인 후 적절한 버전 실행
        if python3 -c "import rich, colorama, psutil" 2>/dev/null; then
            echo -e "${GREEN}✅ 고급 한국어 AI 실행${NC}"
            python3 "$AUTOCI_DIR/autoci_interactive.py"
        else
            echo -e "${YELLOW}⚠️  간단한 한국어 AI 실행${NC}"
            python3 "$AUTOCI_DIR/autoci_simple_interactive.py"
        fi
        ;;
    
    # 빠른 명령 실행
    create|c)
        shift
        python3 autoci_terminal.py "만들어줘 $*"
        ;;
    
    modify|m)
        shift
        python3 autoci_terminal.py "수정해줘 $*"
        ;;
    
    improve|i)
        shift
        python3 autoci_terminal.py "개선해줘 $*"
        ;;
    
    fix|f)
        shift
        python3 autoci_terminal.py "고쳐줘 $*"
        ;;
    
    # 데이터 관리
    data)
        case "$2" in
            add)
                echo -e "${YELLOW}📥 전문가 데이터 수집 중...${NC}"
                python3 autoci_terminal.py "데이터 추가"
                ;;
            index)
                echo -e "${YELLOW}🔍 벡터 기반 고급 인덱싱 중...${NC}"
                python3 vector_indexer.py
                ;;
            *)
                echo "사용법: autoci data [add|index]"
                ;;
        esac
        ;;
    
    # 시스템 상태
    status|s)
        python3 autoci_terminal.py "상태"
        ;;
    
    # Dual Phase 시스템
    dual)
        case "$2" in
            start)
                echo -e "${GREEN}🚀 Robust Dual Phase System 시작 (RAG + Fine-tuning)${NC}"
                echo -e "${YELLOW}웹 UI: http://localhost:8080${NC}"
                python3 robust_dual_phase.py start
                ;;
            stop)
                echo -e "${RED}🛑 Dual Phase System 종료${NC}"
                python3 robust_dual_phase.py stop
                ;;
            status)
                echo -e "${YELLOW}📊 시스템 상태${NC}"
                python3 robust_dual_phase.py status
                ;;
            report)
                echo -e "${CYAN}📝 상태 리포트${NC}"
                # 최신 dual phase 리포트 찾기
                REPORT_DIR="$AUTOCI_DIR/autoci_reports"
                if [ -d "$REPORT_DIR" ]; then
                    LATEST_REPORT=$(ls -t "$REPORT_DIR"/final_report_*.md 2>/dev/null | head -n1)
                    if [ -f "$LATEST_REPORT" ]; then
                        cat "$LATEST_REPORT"
                    else
                        echo "리포트가 없습니다. 시스템을 실행하세요."
                    fi
                else
                    echo "리포트 디렉토리가 없습니다."
                fi
                ;;
            *)
                echo "사용법: autoci dual [start|stop|status|report]"
                ;;
        esac
        ;;
    
    # RAG 시스템
    rag)
        case "$2" in
            start)
                echo -e "${GREEN}🔍 Enhanced RAG v2.0 서버 시작${NC}"
                python3 enhanced_rag_system_v2.py --server
                ;;
            test)
                python3 enhanced_rag_system_v2.py --test
                ;;
            query)
                shift 2
                python3 enhanced_rag_system_v2.py --query "$*"
                ;;
            *)
                echo "사용법: autoci rag [start|test|query <질문>]"
                ;;
        esac
        ;;
    
    # 향상된 시스템 (24시간 자동 코드 수정)
    enhance)
        shift
        case "$1" in
            start)
                echo -e "${GREEN}🚀 24시간 자동 코드 수정 시스템 시작${NC}"
                shift
                if [ -n "$1" ]; then
                    echo -e "${BLUE}📁 대상 경로: $1${NC}"
                    python3 "$AUTOCI_DIR/advanced_autoci_system.py" start --path "$1"
                else
                    echo -e "${BLUE}📁 현재 디렉토리에서 시작${NC}"
                    python3 "$AUTOCI_DIR/advanced_autoci_system.py" start
                fi
                ;;
            stop)
                echo -e "${RED}🛑 시스템 종료${NC}"
                python3 "$AUTOCI_DIR/advanced_autoci_system.py" stop
                ;;
            status)
                echo -e "${YELLOW}📊 시스템 상태 확인${NC}"
                python3 "$AUTOCI_DIR/advanced_autoci_system.py" status
                ;;
            collect)
                echo -e "${BLUE}📚 심층 C# 전문 데이터 수집${NC}"
                python3 "$AUTOCI_DIR/deep_csharp_collector.py"
                ;;
            report)
                echo -e "${CYAN}📝 최신 리포트 보기${NC}"
                # 최신 리포트 파일 찾기
                REPORT_DIR="$AUTOCI_DIR/autoci_reports"
                if [ -d "$REPORT_DIR" ]; then
                    LATEST_REPORT=$(ls -t "$REPORT_DIR"/*.md 2>/dev/null | head -n1)
                    if [ -f "$LATEST_REPORT" ]; then
                        cat "$LATEST_REPORT"
                    else
                        echo "리포트가 없습니다. 먼저 시스템을 실행하세요."
                    fi
                else
                    echo "리포트 디렉토리가 없습니다."
                fi
                ;;
            *)
                echo -e "${YELLOW}사용법: autoci enhance [start|stop|status|collect|report] [옵션]${NC}"
                echo "  start [경로]      # 24시간 자동 시스템 시작"
                echo "  stop              # 시스템 종료"
                echo "  status            # 현재 상태 확인"
                echo "  collect           # C# 전문 데이터 수집"
                echo "  report            # 최신 리포트 보기"
                echo ""
                echo "예시:"
                echo "  autoci enhance start /home/user/my-project"
                echo "  autoci enhance start  # 현재 디렉토리"
                ;;
        esac
        ;;
    
    # 24시간 연속 학습 시스템
    learn)
        shift
        case "$1" in
            start)
                echo -e "${GREEN}🧠 AutoCI 24시간 연속 학습 시스템 시작${NC}"
                echo -e "${BLUE}📚 C# 전문 지식 지속적 크롤링 및 학습${NC}"
                python3 "$AUTOCI_DIR/start_continuous_learning.py" start
                ;;
            stop)
                echo -e "${RED}🛑 연속 학습 시스템 종료${NC}"
                python3 "$AUTOCI_DIR/start_continuous_learning.py" stop
                ;;
            restart)
                echo -e "${YELLOW}🔄 연속 학습 시스템 재시작${NC}"
                python3 "$AUTOCI_DIR/start_continuous_learning.py" restart
                ;;
            status)
                echo -e "${CYAN}📊 연속 학습 상태 확인${NC}"
                python3 "$AUTOCI_DIR/start_continuous_learning.py" status
                ;;
            logs)
                shift
                if [ -n "$1" ]; then
                    echo -e "${YELLOW}📄 연속 학습 로그 (최근 $1줄)${NC}"
                    python3 "$AUTOCI_DIR/start_continuous_learning.py" logs "$1"
                else
                    echo -e "${YELLOW}📄 연속 학습 로그 (최근 50줄)${NC}"
                    python3 "$AUTOCI_DIR/start_continuous_learning.py" logs
                fi
                ;;
            simple)
                echo -e "${GREEN}🧠 간단한 연속 학습 시스템 (대화형)${NC}"
                echo -e "${BLUE}✨ 의존성 없이 실행 가능한 버전${NC}"
                python3 "$AUTOCI_DIR/autoci_simple_continuous_learning.py"
                ;;
            demo)
                echo -e "${CYAN}🚀 연속 학습 데모 실행${NC}"
                echo -e "${YELLOW}✨ 실제 학습 AI 개념 시연${NC}"
                python3 "$AUTOCI_DIR/autoci_learning_ai_concept.py"
                ;;
            *)
                echo -e "${YELLOW}사용법: autoci learn [start|stop|restart|status|logs|simple|demo] [옵션]${NC}"
                echo ""
                echo "  start             # 24시간 연속 학습 시작"
                echo "  stop              # 연속 학습 중지"
                echo "  restart           # 연속 학습 재시작"
                echo "  status            # 학습 상태 및 통계 확인"
                echo "  logs [줄수]       # 학습 로그 보기 (기본: 50줄)"
                echo "  simple            # 간단한 버전 (의존성 없음)"
                echo "  demo              # 실제 학습 AI 개념 데모"
                echo ""
                echo "특징:"
                echo "  🧠 ChatGPT 수준 학습: Microsoft Docs, Unity, GitHub, StackOverflow 크롤링"
                echo "  📊 실시간 통계: 학습 세션, 지식 증가량, 정확도 향상 추적"
                echo "  🔄 자동 복구: 네트워크 오류 시 자동 재시도"
                echo "  🗄️ 지식베이스: SQLite 기반 영구 저장"
                echo ""
                echo "예시:"
                echo "  autoci learn start     # 백그라운드 학습 시작"
                echo "  autoci learn status    # 실시간 상태 확인"
                echo "  autoci learn logs 100  # 최근 100줄 로그"
                echo "  autoci learn simple    # 대화형 간단 버전"
                ;;
        esac
        ;;
    
    # 인터랙티브 모드 (인자 없이 실행)
    "")
        echo -e "${CYAN}🤖 AutoCI ChatGPT 수준 한국어 AI 통합 시스템${NC}"
        echo -e "${GREEN}가상환경 활성화 및 시스템 초기화 중...${NC}"
        echo -e "${BLUE}✨ ChatGPT 수준의 자연스러운 한국어 대화 지원${NC}"
        
        # 업그레이드된 한국어 AI 버전 시도
        echo -e "${YELLOW}🔄 의존성 확인 중...${NC}"
        if python3 -c "import rich, colorama, psutil" 2>/dev/null; then
            echo -e "${GREEN}✅ 모든 의존성 설치됨 - 고급 버전 실행${NC}"
            python3 "$AUTOCI_DIR/autoci_interactive.py"
        else
            echo -e "${YELLOW}⚠️  일부 의존성 누락 - 간단한 버전 실행${NC}"
            echo -e "${CYAN}💡 완전한 기능을 위해 다음 명령어 실행: bash install_dependencies_wsl.sh${NC}"
            python3 "$AUTOCI_DIR/autoci_simple_interactive.py"
        fi
        ;;
    
    # 도움말
    help|h)
        echo -e "${BLUE}🤖 AutoCI - 24시간 자동 코드 수정 시스템${NC}"
        echo ""
        echo "사용법: autoci [명령] [옵션]"
        echo ""
        echo "기본 명령어:"
        echo "  start              - 모든 시스템 시작"
        echo "  terminal, t        - 대화형 터미널 모드"
        echo "  korean, k, 한국어   - ChatGPT 수준 한국어 AI 대화 모드 🇰🇷"
        echo "  status, s          - 시스템 상태 확인"
        echo ""
        echo "빠른 코드 수정:"
        echo "  create, c <설명>   - 코드 생성 (예: autoci c PlayerController 클래스)"
        echo "  modify, m <파일>   - 코드 수정 (예: autoci m GameManager.cs)"
        echo "  improve, i <파일>  - 코드 개선 (예: autoci i /path/to/file.cs)"
        echo "  fix, f <설명>      - 버그 수정 (예: autoci f NetworkManager 오류)"
        echo ""
        echo "데이터 관리:"
        echo "  data add           - 전문가 데이터 수집"
        echo "  data index         - 데이터 인덱싱"
        echo ""
        echo "고급 기능:"
        echo "  dual start         - Enhanced Dual Phase System 시작"
        echo "  dual stop          - Dual Phase System 종료"
        echo "  dual status        - Dual Phase 상태 확인"
        echo "  dual report        - Dual Phase 상태 리포트"
        echo "  rag start          - RAG 서버만 시작"
        echo "  rag test           - RAG 시스템 테스트"
        echo "  rag query <질문>   - RAG 쿼리 실행"
        echo ""
        echo "24시간 자동 시스템:"
        echo "  enhance start [경로] - 24시간 자동 코드 수정 시작"
        echo "  enhance stop         - 시스템 종료"
        echo "  enhance status       - 현재 상태 확인"
        echo "  enhance collect      - C# 전문 데이터 수집"
        echo "  enhance report       - 최신 리포트 보기"
        echo ""
        echo "24시간 연속 학습 시스템:"
        echo "  learn start          - 백그라운드 연속 학습 시작 🧠"
        echo "  learn stop           - 연속 학습 중지"
        echo "  learn restart        - 연속 학습 재시작"
        echo "  learn status         - 학습 상태 및 통계 확인"
        echo "  learn logs [줄수]    - 학습 로그 보기"
        echo "  learn simple         - 간단 버전 (의존성 없음)"
        echo "  learn demo           - 실제 학습 AI 개념 데모"
        echo ""
        echo "예시:"
        echo "  autoci c Unity에서 Object Pool 패턴 구현"
        echo "  autoci m Assets/Scripts/Player.cs 위치: /home/user/project"
        echo "  autoci terminal    # 대화형 모드로 진입"
        echo "  autoci learn start # ChatGPT 수준 24시간 학습 시작"
        ;;
    
    # 알 수 없는 명령
    *)
        # 한글 명령어도 Python 스크립트로 전달
        python3 autoci_terminal.py "$@"
        ;;
esac